
robot_arm_write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007060  08007060  00008060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  000091d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  000091d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074d0  080074d0  000084d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  080074d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  200001d0  080076a4  000091d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  080076a4  0000999c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0c3  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233c  00000000  00000000  000152c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00017600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac5  00000000  00000000  00018470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020432  00000000  00000000  00018f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd9d  00000000  00000000  00039367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6373  00000000  00000000  00045104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c8c  00000000  00000000  000fb4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00100148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007048 	.word	0x08007048

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08007048 	.word	0x08007048

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <readStatusPacket_pos_DMA>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(USART6);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket_pos_DMA(int32_t* position) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <readStatusPacket_pos_DMA+0x48>)
 8000f1e:	7a1b      	ldrb	r3, [r3, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d114      	bne.n	8000f4e <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <readStatusPacket_pos_DMA+0x48>)
 8000f26:	7b1b      	ldrb	r3, [r3, #12]
 8000f28:	061a      	lsls	r2, r3, #24
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <readStatusPacket_pos_DMA+0x48>)
 8000f2c:	7adb      	ldrb	r3, [r3, #11]
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <readStatusPacket_pos_DMA+0x48>)
 8000f34:	7a9b      	ldrb	r3, [r3, #10]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <readStatusPacket_pos_DMA+0x48>)
 8000f3c:	7a5b      	ldrb	r3, [r3, #9]
 8000f3e:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <readStatusPacket_pos_DMA+0x48>)
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 8000f4a:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000f4c:	601a      	str	r2, [r3, #0]
	}
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000240 	.word	0x20000240

08000f60 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	332c      	adds	r3, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000f78:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f7c:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	fa92 f2a2 	rbit	r2, r2
 8000f84:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	d101      	bne.n	8000f94 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8000f90:	2220      	movs	r2, #32
 8000f92:	e003      	b.n	8000f9c <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	fab2 f282 	clz	r2, r2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	40d3      	lsrs	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	211f      	movs	r1, #31
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 011f 	and.w	r1, r3, #31
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fce:	bf00      	nop
 8000fd0:	3724      	adds	r7, #36	@ 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001000:	b480      	push	{r7}
 8001002:	b08f      	sub	sp, #60	@ 0x3c
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	330c      	adds	r3, #12
 8001010:	4619      	mov	r1, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800101c:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	fa92 f2a2 	rbit	r2, r2
 8001024:	613a      	str	r2, [r7, #16]
  return result;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	2a00      	cmp	r2, #0
 800102e:	d101      	bne.n	8001034 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8001030:	2220      	movs	r2, #32
 8001032:	e003      	b.n	800103c <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	40d3      	lsrs	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8001044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800104e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8001052:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	fa91 f1a1 	rbit	r1, r1
 800105a:	61f9      	str	r1, [r7, #28]
  return result;
 800105c:	69f9      	ldr	r1, [r7, #28]
 800105e:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 8001060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001062:	2900      	cmp	r1, #0
 8001064:	d101      	bne.n	800106a <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 8001066:	2120      	movs	r1, #32
 8001068:	e003      	b.n	8001072 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 800106a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800106c:	fab1 f181 	clz	r1, r1
 8001070:	b2c9      	uxtb	r1, r1
 8001072:	40cb      	lsrs	r3, r1
 8001074:	2107      	movs	r1, #7
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8001084:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8001088:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800108c:	fa91 f1a1 	rbit	r1, r1
 8001090:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 8001092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001094:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 8001096:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001098:	2900      	cmp	r1, #0
 800109a:	d101      	bne.n	80010a0 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 800109c:	2120      	movs	r1, #32
 800109e:	e003      	b.n	80010a8 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80010a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80010a2:	fab1 f181 	clz	r1, r1
 80010a6:	b2c9      	uxtb	r1, r1
 80010a8:	40cb      	lsrs	r3, r1
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	431a      	orrs	r2, r3
 80010b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80010b6:	bf00      	nop
 80010b8:	373c      	adds	r7, #60	@ 0x3c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800

080010f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001100:	4907      	ldr	r1, [pc, #28]	@ (8001120 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <LL_APB2_GRP1_EnableClock+0x2c>)
 800110a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40023800 	.word	0x40023800

08001124 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b092      	sub	sp, #72	@ 0x48
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800112a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001164:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001168:	f7ff ffc4 	bl	80010f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800116c:	2004      	movs	r0, #4
 800116e:	f7ff ffa9 	bl	80010c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN10
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001172:	2301      	movs	r3, #1
 8001174:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	@ (8001200 <MX_ADC1_Init+0xdc>)
 8001184:	f002 fc5b 	bl	8003a3e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800118c:	2300      	movs	r3, #0
 800118e:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001194:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001198:	4619      	mov	r1, r3
 800119a:	481a      	ldr	r0, [pc, #104]	@ (8001204 <MX_ADC1_Init+0xe0>)
 800119c:	f002 fa96 	bl	80036cc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4812      	ldr	r0, [pc, #72]	@ (8001204 <MX_ADC1_Init+0xe0>)
 80011bc:	f002 fab2 	bl	8003724 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80011c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011c4:	480f      	ldr	r0, [pc, #60]	@ (8001204 <MX_ADC1_Init+0xe0>)
 80011c6:	f7ff ff08 	bl	8000fda <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ce:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_ADC1_Init+0xe4>)
 80011dc:	f002 fa2e 	bl	800363c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 80011e0:	220a      	movs	r2, #10
 80011e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e6:	4807      	ldr	r0, [pc, #28]	@ (8001204 <MX_ADC1_Init+0xe0>)
 80011e8:	f7ff feba 	bl	8000f60 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_480CYCLES);
 80011ec:	2207      	movs	r2, #7
 80011ee:	210a      	movs	r1, #10
 80011f0:	4804      	ldr	r0, [pc, #16]	@ (8001204 <MX_ADC1_Init+0xe0>)
 80011f2:	f7ff ff05 	bl	8001000 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3748      	adds	r7, #72	@ 0x48
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020800 	.word	0x40020800
 8001204:	40012000 	.word	0x40012000
 8001208:	40012300 	.word	0x40012300

0800120c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	@ 0x38
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001212:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 800123e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001242:	f7ff ff57 	bl	80010f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001246:	2004      	movs	r0, #4
 8001248:	f7ff ff3c 	bl	80010c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN11
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800124c:	2302      	movs	r3, #2
 800124e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001250:	2303      	movs	r3, #3
 8001252:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <MX_ADC2_Init+0xb8>)
 800125e:	f002 fbee 	bl	8003a3e <LL_GPIO_Init>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800126e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001272:	4619      	mov	r1, r3
 8001274:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <MX_ADC2_Init+0xbc>)
 8001276:	f002 fa29 	bl	80036cc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_ADC2_Init+0xbc>)
 8001296:	f002 fa45 	bl	8003724 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800129a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800129e:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <MX_ADC2_Init+0xbc>)
 80012a0:	f7ff fe9b 	bl	8000fda <LL_ADC_REG_SetFlagEndOfConversion>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 80012a4:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <MX_ADC2_Init+0xc0>)
 80012a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012aa:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_ADC2_Init+0xbc>)
 80012ac:	f7ff fe58 	bl	8000f60 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_480CYCLES);
 80012b0:	2207      	movs	r2, #7
 80012b2:	4906      	ldr	r1, [pc, #24]	@ (80012cc <MX_ADC2_Init+0xc0>)
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <MX_ADC2_Init+0xbc>)
 80012b6:	f7ff fea3 	bl	8001000 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3738      	adds	r7, #56	@ 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40012100 	.word	0x40012100
 80012cc:	0030000b 	.word	0x0030000b

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	@ (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <LL_AHB1_GRP1_EnableClock>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f0:	4907      	ldr	r1, [pc, #28]	@ (8001410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40023800 	.word	0x40023800

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001418:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800141c:	f7ff ffe2 	bl	80013e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001420:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001424:	f7ff ffde 	bl	80013e4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001428:	f7ff ff52 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800142c:	4603      	mov	r3, r0
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffa2 	bl	800137c <NVIC_EncodePriority>
 8001438:	4603      	mov	r3, r0
 800143a:	4619      	mov	r1, r3
 800143c:	200d      	movs	r0, #13
 800143e:	f7ff ff73 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001442:	200d      	movs	r0, #13
 8001444:	f7ff ff52 	bl	80012ec <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001448:	f7ff ff42 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800144c:	4603      	mov	r3, r0
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff92 	bl	800137c <NVIC_EncodePriority>
 8001458:	4603      	mov	r3, r0
 800145a:	4619      	mov	r1, r3
 800145c:	200f      	movs	r0, #15
 800145e:	f7ff ff63 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001462:	200f      	movs	r0, #15
 8001464:	f7ff ff42 	bl	80012ec <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001468:	f7ff ff32 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800146c:	4603      	mov	r3, r0
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff82 	bl	800137c <NVIC_EncodePriority>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	2010      	movs	r0, #16
 800147e:	f7ff ff53 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001482:	2010      	movs	r0, #16
 8001484:	f7ff ff32 	bl	80012ec <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001488:	f7ff ff22 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800148c:	4603      	mov	r3, r0
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff72 	bl	800137c <NVIC_EncodePriority>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	2011      	movs	r0, #17
 800149e:	f7ff ff43 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014a2:	2011      	movs	r0, #17
 80014a4:	f7ff ff22 	bl	80012ec <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a8:	f7ff ff12 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff62 	bl	800137c <NVIC_EncodePriority>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	2039      	movs	r0, #57	@ 0x39
 80014be:	f7ff ff33 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014c2:	2039      	movs	r0, #57	@ 0x39
 80014c4:	f7ff ff12 	bl	80012ec <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014c8:	f7ff ff02 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff52 	bl	800137c <NVIC_EncodePriority>
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	2045      	movs	r0, #69	@ 0x45
 80014de:	f7ff ff23 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014e2:	2045      	movs	r0, #69	@ 0x45
 80014e4:	f7ff ff02 	bl	80012ec <__NVIC_EnableIRQ>

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LL_AHB1_GRP1_EnableClock>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f8:	4907      	ldr	r1, [pc, #28]	@ (8001518 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4013      	ands	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40023800 	.word	0x40023800

0800151c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001552:	2004      	movs	r0, #4
 8001554:	f7ff ffca 	bl	80014ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001558:	2080      	movs	r0, #128	@ 0x80
 800155a:	f7ff ffc7 	bl	80014ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff ffc4 	bl	80014ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff ffc1 	bl	80014ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800156a:	2008      	movs	r0, #8
 800156c:	f7ff ffbe 	bl	80014ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel4_CS_GPIO_Port, Dynamixel4_CS_Pin);
 8001570:	2110      	movs	r1, #16
 8001572:	4814      	ldr	r0, [pc, #80]	@ (80015c4 <MX_GPIO_Init+0x88>)
 8001574:	f7ff ffd2 	bl	800151c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel6_CS_GPIO_Port, Dynamixel6_CS_Pin);
 8001578:	2101      	movs	r1, #1
 800157a:	4813      	ldr	r0, [pc, #76]	@ (80015c8 <MX_GPIO_Init+0x8c>)
 800157c:	f7ff ffce 	bl	800151c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Dynamixel4_CS_Pin;
 8001580:	2310      	movs	r3, #16
 8001582:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001584:	2301      	movs	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001588:	2302      	movs	r3, #2
 800158a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel4_CS_GPIO_Port, &GPIO_InitStruct);
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <MX_GPIO_Init+0x88>)
 800159a:	f002 fa50 	bl	8003a3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Dynamixel6_CS_Pin;
 800159e:	2301      	movs	r3, #1
 80015a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015a6:	2302      	movs	r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015ae:	2302      	movs	r3, #2
 80015b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel6_CS_GPIO_Port, &GPIO_InitStruct);
 80015b2:	463b      	mov	r3, r7
 80015b4:	4619      	mov	r1, r3
 80015b6:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_GPIO_Init+0x8c>)
 80015b8:	f002 fa41 	bl	8003a3e <LL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400

080015cc <__NVIC_SetPriorityGrouping>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <LL_RCC_HSE_EnableBypass+0x1c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <LL_RCC_HSE_EnableBypass+0x1c>)
 800163e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <LL_RCC_HSE_Enable+0x1c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <LL_RCC_HSE_Enable+0x1c>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <LL_RCC_HSE_IsReady+0x24>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <LL_RCC_SetSysClkSource+0x24>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 0203 	bic.w	r2, r3, #3
 80016ac:	4904      	ldr	r1, [pc, #16]	@ (80016c0 <LL_RCC_SetSysClkSource+0x24>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40023800 	.word	0x40023800

080016c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <LL_RCC_GetSysClkSource+0x18>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 030c 	and.w	r3, r3, #12
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <LL_RCC_SetAHBPrescaler+0x24>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f0:	4904      	ldr	r1, [pc, #16]	@ (8001704 <LL_RCC_SetAHBPrescaler+0x24>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023800 	.word	0x40023800

08001708 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001718:	4904      	ldr	r1, [pc, #16]	@ (800172c <LL_RCC_SetAPB1Prescaler+0x24>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40023800 	.word	0x40023800

08001730 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <LL_RCC_SetAPB2Prescaler+0x24>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001740:	4904      	ldr	r1, [pc, #16]	@ (8001754 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40023800 	.word	0x40023800

08001758 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <LL_RCC_SetTIMPrescaler+0x28>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001766:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800176a:	4905      	ldr	r1, [pc, #20]	@ (8001780 <LL_RCC_SetTIMPrescaler+0x28>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40023800 	.word	0x40023800

08001784 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <LL_RCC_PLL_Enable+0x1c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <LL_RCC_PLL_Enable+0x1c>)
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <LL_RCC_PLL_IsReady+0x24>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	68f9      	ldr	r1, [r7, #12]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	0192      	lsls	r2, r2, #6
 80017ec:	430a      	orrs	r2, r1
 80017ee:	490c      	ldr	r1, [pc, #48]	@ (8001820 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017fc:	4908      	ldr	r1, [pc, #32]	@ (8001820 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800180c:	4904      	ldr	r1, [pc, #16]	@ (8001820 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800
 8001824:	ffbf8000 	.word	0xffbf8000

08001828 <LL_APB1_GRP1_EnableClock>:
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <LL_APB1_GRP1_EnableClock+0x2c>)
 800183e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4013      	ands	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40023800 	.word	0x40023800

08001858 <LL_APB2_GRP1_EnableClock>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4313      	orrs	r3, r2
 800186a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <LL_APB2_GRP1_EnableClock+0x2c>)
 800186e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4013      	ands	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40023800 	.word	0x40023800

08001888 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <LL_FLASH_SetLatency+0x24>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 020f 	bic.w	r2, r3, #15
 8001898:	4904      	ldr	r1, [pc, #16]	@ (80018ac <LL_FLASH_SetLatency+0x24>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <LL_FLASH_GetLatency+0x18>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 030f 	and.w	r3, r3, #15
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d106      	bne.n	80018e8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <LL_SYSTICK_SetClkSource+0x34>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <LL_SYSTICK_SetClkSource+0x34>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80018e6:	e005      	b.n	80018f4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <LL_SYSTICK_SetClkSource+0x34>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <LL_SYSTICK_SetClkSource+0x34>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e010 	.word	0xe000e010

08001904 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <LL_SYSTICK_EnableIT+0x1c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <LL_SYSTICK_EnableIT+0x1c>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <LL_PWR_EnableOverDriveMode+0x1c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <LL_PWR_EnableOverDriveMode+0x1c>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40007000 	.word	0x40007000

08001944 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001954:	4904      	ldr	r1, [pc, #16]	@ (8001968 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40007000 	.word	0x40007000

0800196c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40007000 	.word	0x40007000

08001994 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a4:	2b80      	cmp	r3, #128	@ 0x80
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80019de:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80019e2:	f7ff ff21 	bl	8001828 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019e6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019ea:	f7ff ff35 	bl	8001858 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019ee:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80019f2:	f7ff ff19 	bl	8001828 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019f6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019fa:	f7ff ff2d 	bl	8001858 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019fe:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001a02:	f7ff ff11 	bl	8001828 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a06:	2007      	movs	r0, #7
 8001a08:	f7ff fde0 	bl	80015cc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0c:	f000 f87a 	bl	8001b04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_Init1msTick(180000000);			//Add here to fix MX generated code
 8001a10:	4835      	ldr	r0, [pc, #212]	@ (8001ae8 <main+0x110>)
 8001a12:	f002 fde3 	bl	80045dc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a16:	2004      	movs	r0, #4
 8001a18:	f7ff ff58 	bl	80018cc <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8001a1c:	f7ff ff72 	bl	8001904 <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f7ff fd8c 	bl	800153c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a24:	f7ff fcf6 	bl	8001414 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a28:	f001 fbd4 	bl	80031d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001a2c:	f001 f820 	bl	8002a70 <MX_TIM1_Init>
  MX_UART4_Init();
 8001a30:	f001 fa98 	bl	8002f64 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8001a34:	f001 fcf4 	bl	8003420 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8001a38:	f001 fb54 	bl	80030e4 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001a3c:	f001 fc78 	bl	8003330 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001a40:	f7ff fb70 	bl	8001124 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a44:	f7ff fbe2 	bl	800120c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
//  init();
  LL_ADC_Enable(ADC1);
 8001a48:	4828      	ldr	r0, [pc, #160]	@ (8001aec <main+0x114>)
 8001a4a:	f7ff fde3 	bl	8001614 <LL_ADC_Enable>
  LL_mDelay(10);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f002 fdd2 	bl	80045f8 <LL_mDelay>
  LL_ADC_Enable(ADC2);
 8001a54:	4826      	ldr	r0, [pc, #152]	@ (8001af0 <main+0x118>)
 8001a56:	f7ff fddd 	bl	8001614 <LL_ADC_Enable>
  LL_mDelay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f002 fdcc 	bl	80045f8 <LL_mDelay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint16_t adc_val_1 = Read_Pressure_Right();
 8001a60:	f000 f8f8 	bl	8001c54 <Read_Pressure_Right>
 8001a64:	4603      	mov	r3, r0
 8001a66:	81fb      	strh	r3, [r7, #14]
	float percent_1 = ((float)adc_val_1 / 4095.0f) * 100.0f;
 8001a68:	89fb      	ldrh	r3, [r7, #14]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a72:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001af4 <main+0x11c>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001af8 <main+0x120>
 8001a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a82:	edc7 7a02 	vstr	s15, [r7, #8]
	printf("ADC1: %u, Pressure: %.1f %%\r\n", adc_val_1, percent_1);
 8001a86:	89fc      	ldrh	r4, [r7, #14]
 8001a88:	68b8      	ldr	r0, [r7, #8]
 8001a8a:	f7fe fd7d 	bl	8000588 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4621      	mov	r1, r4
 8001a94:	4819      	ldr	r0, [pc, #100]	@ (8001afc <main+0x124>)
 8001a96:	f003 fafd 	bl	8005094 <iprintf>
	LL_mDelay(500);
 8001a9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a9e:	f002 fdab 	bl	80045f8 <LL_mDelay>
	uint16_t adc_val_2 = Read_Pressure_Left();
 8001aa2:	f000 f8f1 	bl	8001c88 <Read_Pressure_Left>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
	float percent_2 = ((float)adc_val_2 / 4095.0f) * 100.0f;
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001af4 <main+0x11c>
 8001ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001af8 <main+0x120>
 8001ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac4:	edc7 7a00 	vstr	s15, [r7]
	printf("ADC2: %u, Pressure: %.1f %%\r\n", adc_val_2, percent_2);
 8001ac8:	88fc      	ldrh	r4, [r7, #6]
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f7fe fd5c 	bl	8000588 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <main+0x128>)
 8001ad8:	f003 fadc 	bl	8005094 <iprintf>
	LL_mDelay(500);
 8001adc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ae0:	f002 fd8a 	bl	80045f8 <LL_mDelay>
  {
 8001ae4:	bf00      	nop
 8001ae6:	e7bb      	b.n	8001a60 <main+0x88>
 8001ae8:	0aba9500 	.word	0x0aba9500
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40012100 	.word	0x40012100
 8001af4:	457ff000 	.word	0x457ff000
 8001af8:	42c80000 	.word	0x42c80000
 8001afc:	08007060 	.word	0x08007060
 8001b00:	08007080 	.word	0x08007080

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f7ff febd 	bl	8001888 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001b0e:	bf00      	nop
 8001b10:	f7ff fece 	bl	80018b0 <LL_FLASH_GetLatency>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d1fa      	bne.n	8001b10 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b1a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8001b1e:	f7ff ff11 	bl	8001944 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001b22:	f7ff feff 	bl	8001924 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 8001b26:	f7ff fd85 	bl	8001634 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8001b2a:	f7ff fd93 	bl	8001654 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001b2e:	bf00      	nop
 8001b30:	f7ff fda0 	bl	8001674 <LL_RCC_HSE_IsReady>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d1fa      	bne.n	8001b30 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	22b4      	movs	r2, #180	@ 0xb4
 8001b3e:	2104      	movs	r1, #4
 8001b40:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001b44:	f7ff fe42 	bl	80017cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b48:	f7ff fe1c 	bl	8001784 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b4c:	bf00      	nop
 8001b4e:	f7ff fe29 	bl	80017a4 <LL_RCC_PLL_IsReady>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d1fa      	bne.n	8001b4e <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001b58:	bf00      	nop
 8001b5a:	f7ff ff07 	bl	800196c <LL_PWR_IsActiveFlag_VOS>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0fa      	beq.n	8001b5a <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fdbb 	bl	80016e0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001b6a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001b6e:	f7ff fdcb 	bl	8001708 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001b72:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b76:	f7ff fddb 	bl	8001730 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	f7ff fd8e 	bl	800169c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b80:	bf00      	nop
 8001b82:	f7ff fd9f 	bl	80016c4 <LL_RCC_GetSysClkSource>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d1fa      	bne.n	8001b82 <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <SystemClock_Config+0xa0>)
 8001b8e:	f002 fd25 	bl	80045dc <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 8001b92:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <SystemClock_Config+0xa0>)
 8001b94:	f002 fd56 	bl	8004644 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fddd 	bl	8001758 <LL_RCC_SetTIMPrescaler>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	0aba9500 	.word	0x0aba9500

08001ba8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e011      	b.n	8001bde <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	60ba      	str	r2, [r7, #8]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480a      	ldr	r0, [pc, #40]	@ (8001bf0 <_write+0x48>)
 8001bc6:	f7ff fef8 	bl	80019ba <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 8001bca:	bf00      	nop
 8001bcc:	4808      	ldr	r0, [pc, #32]	@ (8001bf0 <_write+0x48>)
 8001bce:	f7ff fee1 	bl	8001994 <LL_USART_IsActiveFlag_TXE>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f9      	beq.n	8001bcc <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbe9      	blt.n	8001bba <_write+0x12>
			;
	}
	return len;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	b29b      	uxth	r3, r3
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(const ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <Read_Pressure_Right>:
#include "stm32f4xx_ll_utils.h"
#include "stm32f4xx.h"
#include <cstdint>

uint16_t Read_Pressure_Right(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    LL_ADC_REG_StartConversionSWStart(ADC1);   // 每次都手動啟動一次轉換
 8001c58:	480a      	ldr	r0, [pc, #40]	@ (8001c84 <Read_Pressure_Right+0x30>)
 8001c5a:	f7ff ffcb 	bl	8001bf4 <LL_ADC_REG_StartConversionSWStart>
    while (!LL_ADC_IsActiveFlag_EOCS(ADC1));   // 確保轉換完成
 8001c5e:	bf00      	nop
 8001c60:	4808      	ldr	r0, [pc, #32]	@ (8001c84 <Read_Pressure_Right+0x30>)
 8001c62:	f7ff ffe4 	bl	8001c2e <LL_ADC_IsActiveFlag_EOCS>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f4      	bne.n	8001c60 <Read_Pressure_Right+0xc>
    return LL_ADC_REG_ReadConversionData12(ADC1);
 8001c76:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <Read_Pressure_Right+0x30>)
 8001c78:	f7ff ffcc 	bl	8001c14 <LL_ADC_REG_ReadConversionData12>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40012000 	.word	0x40012000

08001c88 <Read_Pressure_Left>:

uint16_t Read_Pressure_Left(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
    LL_ADC_REG_StartConversionSWStart(ADC2);   // 每次都手動啟動一次轉換
 8001c8c:	480a      	ldr	r0, [pc, #40]	@ (8001cb8 <Read_Pressure_Left+0x30>)
 8001c8e:	f7ff ffb1 	bl	8001bf4 <LL_ADC_REG_StartConversionSWStart>
    while (!LL_ADC_IsActiveFlag_EOCS(ADC2));   // 確保轉換完成
 8001c92:	bf00      	nop
 8001c94:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <Read_Pressure_Left+0x30>)
 8001c96:	f7ff ffca 	bl	8001c2e <LL_ADC_IsActiveFlag_EOCS>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f4      	bne.n	8001c94 <Read_Pressure_Left+0xc>
    return LL_ADC_REG_ReadConversionData12(ADC2);
 8001caa:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <Read_Pressure_Left+0x30>)
 8001cac:	f7ff ffb2 	bl	8001c14 <LL_ADC_REG_ReadConversionData12>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40012100 	.word	0x40012100

08001cbc <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <LL_DMA_EnableStream+0x3c>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <LL_DMA_EnableStream+0x3c>)
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	440a      	add	r2, r1
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	440a      	add	r2, r1
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	08007128 	.word	0x08007128

08001cfc <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001d06:	4a0c      	ldr	r2, [pc, #48]	@ (8001d38 <LL_DMA_DisableStream+0x3c>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <LL_DMA_DisableStream+0x3c>)
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	440a      	add	r2, r1
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	440a      	add	r2, r1
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	08007128 	.word	0x08007128

08001d3c <LL_DMA_IsEnabledStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <LL_DMA_IsEnabledStream+0x34>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	08007128 	.word	0x08007128

08001d74 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LL_DMA_SetDataLength+0x44>)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <LL_DMA_SetDataLength+0x44>)
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	440a      	add	r2, r1
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	440a      	add	r2, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	08007128 	.word	0x08007128

08001dbc <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <LL_DMA_SetMemoryAddress+0x2c>)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	08007128 	.word	0x08007128

08001dec <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <LL_DMA_SetPeriphAddress+0x2c>)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	08007128 	.word	0x08007128

08001e1c <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll LISR  TCIF2    LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_DMA_IsActiveFlag_TC4>:
  * @rmtoll HISR  TCIF4    LL_DMA_IsActiveFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef0:	609a      	str	r2, [r3, #8]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_DMA_ClearFlag_HT2>:
  * @rmtoll LIFCR  CHTIF2    LL_DMA_ClearFlag_HT2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f0c:	609a      	str	r2, [r3, #8]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f28:	609a      	str	r2, [r3, #8]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f44:	609a      	str	r2, [r3, #8]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	60da      	str	r2, [r3, #12]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f7a:	60da      	str	r2, [r3, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_DMA_ClearFlag_TE2>:
  * @rmtoll LIFCR  CTEIF2    LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8002018 <LL_DMA_EnableIT_TC+0x3c>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4908      	ldr	r1, [pc, #32]	@ (8002018 <LL_DMA_EnableIT_TC+0x3c>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	440a      	add	r2, r1
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	4611      	mov	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	440a      	add	r2, r1
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6013      	str	r3, [r2, #0]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	08007128 	.word	0x08007128

0800201c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f06f 0201 	mvn.w	r2, #1
 800202a:	611a      	str	r2, [r3, #16]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_USART_IsActiveFlag_RXNE>:
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b20      	cmp	r3, #32
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_USART_IsActiveFlag_TC>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002094:	2b40      	cmp	r3, #64	@ 0x40
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_USART_ClearFlag_TC>:
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_USART_DisableIT_TC>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	b089      	sub	sp, #36	@ 0x24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	330c      	adds	r3, #12
 80020d2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	e853 3f00 	ldrex	r3, [r3]
 80020da:	60bb      	str	r3, [r7, #8]
   return(result);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	330c      	adds	r3, #12
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	61ba      	str	r2, [r7, #24]
 80020ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	6979      	ldr	r1, [r7, #20]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	613b      	str	r3, [r7, #16]
   return(result);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e7      	bne.n	80020ce <LL_USART_DisableIT_TC+0x8>
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	3724      	adds	r7, #36	@ 0x24
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_USART_IsEnabledIT_RXNE>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b20      	cmp	r3, #32
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_USART_EnableDMAReq_RX>:
{
 8002132:	b480      	push	{r7}
 8002134:	b089      	sub	sp, #36	@ 0x24
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3314      	adds	r3, #20
 800213e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	e853 3f00 	ldrex	r3, [r3]
 8002146:	60bb      	str	r3, [r7, #8]
   return(result);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3314      	adds	r3, #20
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	61ba      	str	r2, [r7, #24]
 8002158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	e841 2300 	strex	r3, r2, [r1]
 8002162:	613b      	str	r3, [r7, #16]
   return(result);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e7      	bne.n	800213a <LL_USART_EnableDMAReq_RX+0x8>
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	3724      	adds	r7, #36	@ 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_USART_DisableDMAReq_TX>:
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3314      	adds	r3, #20
 8002184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	e853 3f00 	ldrex	r3, [r3]
 800218c:	60bb      	str	r3, [r7, #8]
   return(result);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3314      	adds	r3, #20
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	61ba      	str	r2, [r7, #24]
 800219e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	e841 2300 	strex	r3, r2, [r1]
 80021a8:	613b      	str	r3, [r7, #16]
   return(result);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e7      	bne.n	8002180 <LL_USART_DisableDMAReq_TX+0x8>
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_USART_DMA_GetRegAddr>:
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_USART_ReceiveData8>:
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_GPIO_ResetOutputPin>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002212:	bf00      	nop
 8002214:	e7fd      	b.n	8002212 <NMI_Handler+0x4>

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	bf00      	nop
 800221c:	e7fd      	b.n	800221a <HardFault_Handler+0x4>

0800221e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002222:	bf00      	nop
 8002224:	e7fd      	b.n	8002222 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <BusFault_Handler+0x4>

0800222e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002232:	bf00      	nop
 8002234:	e7fd      	b.n	8002232 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8002274:	4814      	ldr	r0, [pc, #80]	@ (80022c8 <DMA1_Stream2_IRQHandler+0x58>)
 8002276:	f7ff fde5 	bl	8001e44 <LL_DMA_IsActiveFlag_TC2>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d021      	beq.n	80022c4 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 8002280:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <DMA1_Stream2_IRQHandler+0x58>)
 8002282:	f7ff fe58 	bl	8001f36 <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 8002286:	4811      	ldr	r0, [pc, #68]	@ (80022cc <DMA1_Stream2_IRQHandler+0x5c>)
 8002288:	f002 ff6c 	bl	8005164 <puts>
			readStatusPacket_pos_DMA(dynamixel_position);
 800228c:	4810      	ldr	r0, [pc, #64]	@ (80022d0 <DMA1_Stream2_IRQHandler+0x60>)
 800228e:	f7fe fe41 	bl	8000f14 <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
//	        readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
//	        readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8002292:	2102      	movs	r1, #2
 8002294:	480c      	ldr	r0, [pc, #48]	@ (80022c8 <DMA1_Stream2_IRQHandler+0x58>)
 8002296:	f7ff fd31 	bl	8001cfc <LL_DMA_DisableStream>
			Packet_Return -= 1;
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <DMA1_Stream2_IRQHandler+0x64>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <DMA1_Stream2_IRQHandler+0x64>)
 80022a4:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 80022a6:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <DMA1_Stream2_IRQHandler+0x64>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <DMA1_Stream2_IRQHandler+0x68>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <DMA1_Stream2_IRQHandler+0x6c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80022ba:	e003      	b.n	80022c4 <DMA1_Stream2_IRQHandler+0x54>
			    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 80022bc:	2102      	movs	r1, #2
 80022be:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DMA1_Stream2_IRQHandler+0x58>)
 80022c0:	f7ff fcfc 	bl	8001cbc <LL_DMA_EnableStream>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40026000 	.word	0x40026000
 80022cc:	080070a0 	.word	0x080070a0
 80022d0:	200001ec 	.word	0x200001ec
 80022d4:	20000001 	.word	0x20000001
 80022d8:	20000238 	.word	0x20000238
 80022dc:	20000000 	.word	0x20000000

080022e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 80022e4:	480c      	ldr	r0, [pc, #48]	@ (8002318 <DMA1_Stream4_IRQHandler+0x38>)
 80022e6:	f7ff fdc1 	bl	8001e6c <LL_DMA_IsActiveFlag_TC4>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d111      	bne.n	8002314 <DMA1_Stream4_IRQHandler+0x34>
		    printf("DMA TX Complete\r\n");
 80022f0:	480a      	ldr	r0, [pc, #40]	@ (800231c <DMA1_Stream4_IRQHandler+0x3c>)
 80022f2:	f002 ff37 	bl	8005164 <puts>
			LL_DMA_ClearFlag_TC4(DMA1);
 80022f6:	4808      	ldr	r0, [pc, #32]	@ (8002318 <DMA1_Stream4_IRQHandler+0x38>)
 80022f8:	f7ff fe2b 	bl	8001f52 <LL_DMA_ClearFlag_TC4>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 80022fc:	2104      	movs	r1, #4
 80022fe:	4806      	ldr	r0, [pc, #24]	@ (8002318 <DMA1_Stream4_IRQHandler+0x38>)
 8002300:	f7ff fcfc 	bl	8001cfc <LL_DMA_DisableStream>
			LL_USART_DisableDMAReq_TX(UART4);
 8002304:	4806      	ldr	r0, [pc, #24]	@ (8002320 <DMA1_Stream4_IRQHandler+0x40>)
 8002306:	f7ff ff37 	bl	8002178 <LL_USART_DisableDMAReq_TX>
			uart4_dma_rx_start();
 800230a:	f000 f981 	bl	8002610 <uart4_dma_rx_start>
			dynamixel_Ready = 1;
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <DMA1_Stream4_IRQHandler+0x44>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40026000 	.word	0x40026000
 800231c:	080070ac 	.word	0x080070ac
 8002320:	40004c00 	.word	0x40004c00
 8002324:	20000000 	.word	0x20000000

08002328 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 800232c:	4807      	ldr	r0, [pc, #28]	@ (800234c <DMA1_Stream5_IRQHandler+0x24>)
 800232e:	f7ff fdb0 	bl	8001e92 <LL_DMA_IsActiveFlag_TC5>
 8002332:	4603      	mov	r3, r0
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 8002338:	4804      	ldr	r0, [pc, #16]	@ (800234c <DMA1_Stream5_IRQHandler+0x24>)
 800233a:	f7ff fe17 	bl	8001f6c <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 800233e:	2105      	movs	r1, #5
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <DMA1_Stream5_IRQHandler+0x24>)
 8002342:	f7ff fcdb 	bl	8001cfc <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40026000 	.word	0x40026000

08002350 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <DMA1_Stream6_IRQHandler+0x24>)
 8002356:	f7ff fdb0 	bl	8001eba <LL_DMA_IsActiveFlag_TC6>
 800235a:	4603      	mov	r3, r0
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8002360:	4804      	ldr	r0, [pc, #16]	@ (8002374 <DMA1_Stream6_IRQHandler+0x24>)
 8002362:	f7ff fe11 	bl	8001f88 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8002366:	2106      	movs	r1, #6
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <DMA1_Stream6_IRQHandler+0x24>)
 800236a:	f7ff fcc7 	bl	8001cfc <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40026000 	.word	0x40026000

08002378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 800237c:	4806      	ldr	r0, [pc, #24]	@ (8002398 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800237e:	f7ff fe5b 	bl	8002038 <LL_TIM_IsActiveFlag_UPDATE>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8002388:	4803      	ldr	r0, [pc, #12]	@ (8002398 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800238a:	f7ff fe47 	bl	800201c <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 800238e:	4b03      	ldr	r3, [pc, #12]	@ (800239c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010000 	.word	0x40010000
 800239c:	20000259 	.word	0x20000259

080023a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 80023a4:	481d      	ldr	r0, [pc, #116]	@ (800241c <USART3_IRQHandler+0x7c>)
 80023a6:	f7ff fe5a 	bl	800205e <LL_USART_IsActiveFlag_RXNE>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d033      	beq.n	8002418 <USART3_IRQHandler+0x78>
 80023b0:	481a      	ldr	r0, [pc, #104]	@ (800241c <USART3_IRQHandler+0x7c>)
 80023b2:	f7ff feab 	bl	800210c <LL_USART_IsEnabledIT_RXNE>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d02d      	beq.n	8002418 <USART3_IRQHandler+0x78>
	{
		rx_data = LL_USART_ReceiveData8(USART3);
 80023bc:	4817      	ldr	r0, [pc, #92]	@ (800241c <USART3_IRQHandler+0x7c>)
 80023be:	f7ff ff0a 	bl	80021d6 <LL_USART_ReceiveData8>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <USART3_IRQHandler+0x80>)
 80023c8:	701a      	strb	r2, [r3, #0]

		// 檢查是否資料結束（這裡用 ! 當作結尾）
		if (rx_data == '!' || rx_index >= RX_BUFFER_SIZE - 1)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <USART3_IRQHandler+0x80>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b21      	cmp	r3, #33	@ 0x21
 80023d2:	d006      	beq.n	80023e2 <USART3_IRQHandler+0x42>
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <USART3_IRQHandler+0x84>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f240 52da 	movw	r2, #1498	@ 0x5da
 80023de:	4293      	cmp	r3, r2
 80023e0:	d90d      	bls.n	80023fe <USART3_IRQHandler+0x5e>
		{
		    rx_buffer[rx_index] = '\0';  // 加上結尾字元
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <USART3_IRQHandler+0x84>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <USART3_IRQHandler+0x88>)
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]
		    rx_index = 0;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <USART3_IRQHandler+0x84>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]
		    data_ready = 1;  // 設定資料完成旗標
 80023f6:	4b0d      	ldr	r3, [pc, #52]	@ (800242c <USART3_IRQHandler+0x8c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
		{
		    rx_buffer[rx_index++] = rx_data;
		}
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80023fc:	e00c      	b.n	8002418 <USART3_IRQHandler+0x78>
		    rx_buffer[rx_index++] = rx_data;
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <USART3_IRQHandler+0x84>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	b291      	uxth	r1, r2
 8002408:	4a06      	ldr	r2, [pc, #24]	@ (8002424 <USART3_IRQHandler+0x84>)
 800240a:	8011      	strh	r1, [r2, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <USART3_IRQHandler+0x80>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <USART3_IRQHandler+0x88>)
 8002416:	5499      	strb	r1, [r3, r2]
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40004800 	.word	0x40004800
 8002420:	2000025a 	.word	0x2000025a
 8002424:	2000025c 	.word	0x2000025c
 8002428:	20000260 	.word	0x20000260
 800242c:	2000083c 	.word	0x2000083c

08002430 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 8002434:	4812      	ldr	r0, [pc, #72]	@ (8002480 <UART4_IRQHandler+0x50>)
 8002436:	f002 fe95 	bl	8005164 <puts>
	LL_mDelay(100);
 800243a:	2064      	movs	r0, #100	@ 0x64
 800243c:	f002 f8dc 	bl	80045f8 <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 8002440:	4810      	ldr	r0, [pc, #64]	@ (8002484 <UART4_IRQHandler+0x54>)
 8002442:	f7ff fe1f 	bl	8002084 <LL_USART_IsActiveFlag_TC>
 8002446:	4603      	mov	r3, r0
 8002448:	2b01      	cmp	r3, #1
 800244a:	d117      	bne.n	800247c <UART4_IRQHandler+0x4c>
		printf("TX complete, switching to RX mode\r\n");
 800244c:	480e      	ldr	r0, [pc, #56]	@ (8002488 <UART4_IRQHandler+0x58>)
 800244e:	f002 fe89 	bl	8005164 <puts>
		LL_USART_ClearFlag_TC(UART4);
 8002452:	480c      	ldr	r0, [pc, #48]	@ (8002484 <UART4_IRQHandler+0x54>)
 8002454:	f7ff fe29 	bl	80020aa <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART4);  // 避免反覆進中斷
 8002458:	480a      	ldr	r0, [pc, #40]	@ (8002484 <UART4_IRQHandler+0x54>)
 800245a:	f7ff fe34 	bl	80020c6 <LL_USART_DisableIT_TC>
	#if USE_THREE_STATE_GATE == 1
		LL_mDelay(1);  // 多數 buffer 切換需要時間
 800245e:	2001      	movs	r0, #1
 8002460:	f002 f8ca 	bl	80045f8 <LL_mDelay>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002464:	2110      	movs	r1, #16
 8002466:	4809      	ldr	r0, [pc, #36]	@ (800248c <UART4_IRQHandler+0x5c>)
 8002468:	f7ff fec2 	bl	80021f0 <LL_GPIO_ResetOutputPin>
	#else
	    LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif
		if(Packet_Return == 0) {
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <UART4_IRQHandler+0x60>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <UART4_IRQHandler+0x4c>
			dynamixel_Ready = 1;
 8002474:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <UART4_IRQHandler+0x64>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
			return;
 800247a:	bf00      	nop
			}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	080070c0 	.word	0x080070c0
 8002484:	40004c00 	.word	0x40004c00
 8002488:	080070cc 	.word	0x080070cc
 800248c:	40020000 	.word	0x40020000
 8002490:	20000001 	.word	0x20000001
 8002494:	20000000 	.word	0x20000000

08002498 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5)) {
 800249e:	4815      	ldr	r0, [pc, #84]	@ (80024f4 <UART5_IRQHandler+0x5c>)
 80024a0:	f7ff fddd 	bl	800205e <LL_USART_IsActiveFlag_RXNE>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <UART5_IRQHandler+0x3e>
 80024aa:	4812      	ldr	r0, [pc, #72]	@ (80024f4 <UART5_IRQHandler+0x5c>)
 80024ac:	f7ff fe2e 	bl	800210c <LL_USART_IsEnabledIT_RXNE>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00f      	beq.n	80024d6 <UART5_IRQHandler+0x3e>
	    uint8_t byte = LL_USART_ReceiveData8(UART5);
 80024b6:	480f      	ldr	r0, [pc, #60]	@ (80024f4 <UART5_IRQHandler+0x5c>)
 80024b8:	f7ff fe8d 	bl	80021d6 <LL_USART_ReceiveData8>
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
	    uart5_rx_buffer[uart5_rx_index++] = byte;
 80024c0:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <UART5_IRQHandler+0x60>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	b2d1      	uxtb	r1, r2
 80024ca:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <UART5_IRQHandler+0x60>)
 80024cc:	7011      	strb	r1, [r2, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <UART5_IRQHandler+0x64>)
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	5453      	strb	r3, [r2, r1]
	}
	if (uart5_rx_index >= PACKET_SIZE) {
 80024d6:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <UART5_IRQHandler+0x60>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d905      	bls.n	80024ec <UART5_IRQHandler+0x54>
	   uart5_rx_index = 0;
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <UART5_IRQHandler+0x60>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
	   uart5_packet_ready = 1;
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <UART5_IRQHandler+0x68>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART5_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40005000 	.word	0x40005000
 80024f8:	20000849 	.word	0x20000849
 80024fc:	20000840 	.word	0x20000840
 8002500:	2000084a 	.word	0x2000084a

08002504 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2)) {
 8002508:	4814      	ldr	r0, [pc, #80]	@ (800255c <DMA2_Stream1_IRQHandler+0x58>)
 800250a:	f7ff fc87 	bl	8001e1c <LL_DMA_IsActiveFlag_TC1>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d021      	beq.n	8002558 <DMA2_Stream1_IRQHandler+0x54>
		LL_DMA_ClearFlag_TC1(DMA2);
 8002514:	4811      	ldr	r0, [pc, #68]	@ (800255c <DMA2_Stream1_IRQHandler+0x58>)
 8002516:	f7ff fd00 	bl	8001f1a <LL_DMA_ClearFlag_TC1>
		printf("stream1 it\r\n");
 800251a:	4811      	ldr	r0, [pc, #68]	@ (8002560 <DMA2_Stream1_IRQHandler+0x5c>)
 800251c:	f002 fe22 	bl	8005164 <puts>
		readStatusPacket_pos_DMA(dynamixel_position);
 8002520:	4810      	ldr	r0, [pc, #64]	@ (8002564 <DMA2_Stream1_IRQHandler+0x60>)
 8002522:	f7fe fcf7 	bl	8000f14 <readStatusPacket_pos_DMA>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8002526:	2101      	movs	r1, #1
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <DMA2_Stream1_IRQHandler+0x58>)
 800252a:	f7ff fbe7 	bl	8001cfc <LL_DMA_DisableStream>
		Packet_Return -= 1;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <DMA2_Stream1_IRQHandler+0x64>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	3b01      	subs	r3, #1
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <DMA2_Stream1_IRQHandler+0x64>)
 8002538:	701a      	strb	r2, [r3, #0]
		if(Packet_Return == 0) {
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <DMA2_Stream1_IRQHandler+0x64>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <DMA2_Stream1_IRQHandler+0x4c>
			Is_dynamixel_GetData = 1;
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <DMA2_Stream1_IRQHandler+0x68>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
			dynamixel_Ready = 1;
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <DMA2_Stream1_IRQHandler+0x6c>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800254e:	e003      	b.n	8002558 <DMA2_Stream1_IRQHandler+0x54>
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8002550:	2101      	movs	r1, #1
 8002552:	4802      	ldr	r0, [pc, #8]	@ (800255c <DMA2_Stream1_IRQHandler+0x58>)
 8002554:	f7ff fbb2 	bl	8001cbc <LL_DMA_EnableStream>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40026400 	.word	0x40026400
 8002560:	080070f0 	.word	0x080070f0
 8002564:	200001ec 	.word	0x200001ec
 8002568:	20000001 	.word	0x20000001
 800256c:	20000238 	.word	0x20000238
 8002570:	20000000 	.word	0x20000000

08002574 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 8002578:	480c      	ldr	r0, [pc, #48]	@ (80025ac <DMA2_Stream6_IRQHandler+0x38>)
 800257a:	f7ff fc9e 	bl	8001eba <LL_DMA_IsActiveFlag_TC6>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d111      	bne.n	80025a8 <DMA2_Stream6_IRQHandler+0x34>
		printf("DMA TX Complete\r\n");
 8002584:	480a      	ldr	r0, [pc, #40]	@ (80025b0 <DMA2_Stream6_IRQHandler+0x3c>)
 8002586:	f002 fded 	bl	8005164 <puts>
		LL_DMA_ClearFlag_TC6(DMA2);
 800258a:	4808      	ldr	r0, [pc, #32]	@ (80025ac <DMA2_Stream6_IRQHandler+0x38>)
 800258c:	f7ff fcfc 	bl	8001f88 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8002590:	2106      	movs	r1, #6
 8002592:	4806      	ldr	r0, [pc, #24]	@ (80025ac <DMA2_Stream6_IRQHandler+0x38>)
 8002594:	f7ff fbb2 	bl	8001cfc <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(USART6);
 8002598:	4806      	ldr	r0, [pc, #24]	@ (80025b4 <DMA2_Stream6_IRQHandler+0x40>)
 800259a:	f7ff fded 	bl	8002178 <LL_USART_DisableDMAReq_TX>
		usart6_dma_rx_start();
 800259e:	f000 f87d 	bl	800269c <usart6_dma_rx_start>
		dynamixel_Ready = 1;
 80025a2:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <DMA2_Stream6_IRQHandler+0x44>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40026400 	.word	0x40026400
 80025b0:	080070ac 	.word	0x080070ac
 80025b4:	40011400 	.word	0x40011400
 80025b8:	20000000 	.word	0x20000000

080025bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	printf("usart6 it\r\n");
 80025c0:	480d      	ldr	r0, [pc, #52]	@ (80025f8 <USART6_IRQHandler+0x3c>)
 80025c2:	f002 fdcf 	bl	8005164 <puts>
//		LL_mDelay(100);
		if(LL_USART_IsActiveFlag_TC(USART6) == 1) {
 80025c6:	480d      	ldr	r0, [pc, #52]	@ (80025fc <USART6_IRQHandler+0x40>)
 80025c8:	f7ff fd5c 	bl	8002084 <LL_USART_IsActiveFlag_TC>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d111      	bne.n	80025f6 <USART6_IRQHandler+0x3a>
			    printf("TX complete, switching to RX mode\r\n");
 80025d2:	480b      	ldr	r0, [pc, #44]	@ (8002600 <USART6_IRQHandler+0x44>)
 80025d4:	f002 fdc6 	bl	8005164 <puts>
			    LL_USART_ClearFlag_TC(USART6);
 80025d8:	4808      	ldr	r0, [pc, #32]	@ (80025fc <USART6_IRQHandler+0x40>)
 80025da:	f7ff fd66 	bl	80020aa <LL_USART_ClearFlag_TC>
		#if USE_THREE_STATE_GATE == 1
				LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80025de:	2101      	movs	r1, #1
 80025e0:	4808      	ldr	r0, [pc, #32]	@ (8002604 <USART6_IRQHandler+0x48>)
 80025e2:	f7ff fe05 	bl	80021f0 <LL_GPIO_ResetOutputPin>
		#else
				LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_RX); //change UART direction
		#endif
					if(Packet_Return == 0) {
 80025e6:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <USART6_IRQHandler+0x4c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <USART6_IRQHandler+0x3a>
						dynamixel_Ready = 1;
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <USART6_IRQHandler+0x50>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
						return;
 80025f4:	bf00      	nop
		}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	080070fc 	.word	0x080070fc
 80025fc:	40011400 	.word	0x40011400
 8002600:	080070cc 	.word	0x080070cc
 8002604:	40020400 	.word	0x40020400
 8002608:	20000001 	.word	0x20000001
 800260c:	20000000 	.word	0x20000000

08002610 <uart4_dma_rx_start>:
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
    LL_USART_EnableDMAReq_TX(UART4);
}
void uart4_dma_rx_start(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8002614:	2102      	movs	r1, #2
 8002616:	481c      	ldr	r0, [pc, #112]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002618:	f7ff fb70 	bl	8001cfc <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_2));
 800261c:	bf00      	nop
 800261e:	2102      	movs	r1, #2
 8002620:	4819      	ldr	r0, [pc, #100]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002622:	f7ff fb8b 	bl	8001d3c <LL_DMA_IsEnabledStream>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f8      	bne.n	800261e <uart4_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC2(DMA1);
 800262c:	4816      	ldr	r0, [pc, #88]	@ (8002688 <uart4_dma_rx_start+0x78>)
 800262e:	f7ff fc82 	bl	8001f36 <LL_DMA_ClearFlag_TC2>
    LL_DMA_ClearFlag_TE2(DMA1);
 8002632:	4815      	ldr	r0, [pc, #84]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002634:	f7ff fcc4 	bl	8001fc0 <LL_DMA_ClearFlag_TE2>
    LL_DMA_ClearFlag_HT2(DMA2);
 8002638:	4814      	ldr	r0, [pc, #80]	@ (800268c <uart4_dma_rx_start+0x7c>)
 800263a:	f7ff fc60 	bl	8001efe <LL_DMA_ClearFlag_HT2>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <uart4_dma_rx_start+0x80>)
 8002640:	461a      	mov	r2, r3
 8002642:	2102      	movs	r1, #2
 8002644:	4810      	ldr	r0, [pc, #64]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002646:	f7ff fbb9 	bl	8001dbc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 800264a:	4812      	ldr	r0, [pc, #72]	@ (8002694 <uart4_dma_rx_start+0x84>)
 800264c:	f7ff fdb7 	bl	80021be <LL_USART_DMA_GetRegAddr>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	2102      	movs	r1, #2
 8002656:	480c      	ldr	r0, [pc, #48]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002658:	f7ff fbc8 	bl	8001dec <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 800265c:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <uart4_dma_rx_start+0x88>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3304      	adds	r3, #4
 8002662:	461a      	mov	r2, r3
 8002664:	2102      	movs	r1, #2
 8002666:	4808      	ldr	r0, [pc, #32]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002668:	f7ff fb84 	bl	8001d74 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 800266c:	2102      	movs	r1, #2
 800266e:	4806      	ldr	r0, [pc, #24]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002670:	f7ff fcb4 	bl	8001fdc <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8002674:	2102      	movs	r1, #2
 8002676:	4804      	ldr	r0, [pc, #16]	@ (8002688 <uart4_dma_rx_start+0x78>)
 8002678:	f7ff fb20 	bl	8001cbc <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(UART4);
 800267c:	4805      	ldr	r0, [pc, #20]	@ (8002694 <uart4_dma_rx_start+0x84>)
 800267e:	f7ff fd58 	bl	8002132 <LL_USART_EnableDMAReq_RX>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40026000 	.word	0x40026000
 800268c:	40026400 	.word	0x40026400
 8002690:	20000240 	.word	0x20000240
 8002694:	40004c00 	.word	0x40004c00
 8002698:	2000023c 	.word	0x2000023c

0800269c <usart6_dma_rx_start>:
    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
    LL_USART_EnableDMAReq_TX(USART6);
}
void usart6_dma_rx_start(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 80026a0:	2101      	movs	r1, #1
 80026a2:	481c      	ldr	r0, [pc, #112]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026a4:	f7ff fb2a 	bl	8001cfc <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_1));
 80026a8:	bf00      	nop
 80026aa:	2101      	movs	r1, #1
 80026ac:	4819      	ldr	r0, [pc, #100]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026ae:	f7ff fb45 	bl	8001d3c <LL_DMA_IsEnabledStream>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f8      	bne.n	80026aa <usart6_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC1(DMA2);
 80026b8:	4816      	ldr	r0, [pc, #88]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026ba:	f7ff fc2e 	bl	8001f1a <LL_DMA_ClearFlag_TC1>
    LL_DMA_ClearFlag_TE1(DMA2);
 80026be:	4815      	ldr	r0, [pc, #84]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026c0:	f7ff fc70 	bl	8001fa4 <LL_DMA_ClearFlag_TE1>
    LL_DMA_ClearFlag_HT1(DMA2);
 80026c4:	4813      	ldr	r0, [pc, #76]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026c6:	f7ff fc0c 	bl	8001ee2 <LL_DMA_ClearFlag_HT1>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 80026ca:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <usart6_dma_rx_start+0x7c>)
 80026cc:	461a      	mov	r2, r3
 80026ce:	2101      	movs	r1, #1
 80026d0:	4810      	ldr	r0, [pc, #64]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026d2:	f7ff fb73 	bl	8001dbc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 80026d6:	4811      	ldr	r0, [pc, #68]	@ (800271c <usart6_dma_rx_start+0x80>)
 80026d8:	f7ff fd71 	bl	80021be <LL_USART_DMA_GetRegAddr>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	2101      	movs	r1, #1
 80026e2:	480c      	ldr	r0, [pc, #48]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026e4:	f7ff fb82 	bl	8001dec <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 80026e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <usart6_dma_rx_start+0x84>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3304      	adds	r3, #4
 80026ee:	461a      	mov	r2, r3
 80026f0:	2101      	movs	r1, #1
 80026f2:	4808      	ldr	r0, [pc, #32]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026f4:	f7ff fb3e 	bl	8001d74 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 80026f8:	2101      	movs	r1, #1
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <usart6_dma_rx_start+0x78>)
 80026fc:	f7ff fc6e 	bl	8001fdc <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8002700:	2101      	movs	r1, #1
 8002702:	4804      	ldr	r0, [pc, #16]	@ (8002714 <usart6_dma_rx_start+0x78>)
 8002704:	f7ff fada 	bl	8001cbc <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(USART6);
 8002708:	4804      	ldr	r0, [pc, #16]	@ (800271c <usart6_dma_rx_start+0x80>)
 800270a:	f7ff fd12 	bl	8002132 <LL_USART_EnableDMAReq_RX>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40026400 	.word	0x40026400
 8002718:	20000240 	.word	0x20000240
 800271c:	40011400 	.word	0x40011400
 8002720:	2000023c 	.word	0x2000023c

08002724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_kill>:

int _kill(int pid, int sig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800273e:	f002 fe43 	bl	80053c8 <__errno>
 8002742:	4603      	mov	r3, r0
 8002744:	2216      	movs	r2, #22
 8002746:	601a      	str	r2, [r3, #0]
  return -1;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_exit>:

void _exit (int status)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffe7 	bl	8002734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <_exit+0x12>

0800276a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e00a      	b.n	8002792 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277c:	f3af 8000 	nop.w
 8002780:	4601      	mov	r1, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	60ba      	str	r2, [r7, #8]
 8002788:	b2ca      	uxtb	r2, r1
 800278a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbf0      	blt.n	800277c <_read+0x12>
  }

  return len;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027cc:	605a      	str	r2, [r3, #4]
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <_sbrk+0x5c>)
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <_sbrk+0x60>)
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <_sbrk+0x64>)
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <_sbrk+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800283c:	f002 fdc4 	bl	80053c8 <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	220c      	movs	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <_sbrk+0x64>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <_sbrk+0x64>)
 800285c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20020000 	.word	0x20020000
 800286c:	00000400 	.word	0x00000400
 8002870:	2000084c 	.word	0x2000084c
 8002874:	200009a0 	.word	0x200009a0

08002878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <SystemInit+0x20>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <SystemInit+0x20>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	@ (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	@ (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	@ 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <LL_APB2_GRP1_EnableClock>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80029ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029bc:	4907      	ldr	r1, [pc, #28]	@ (80029dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80029c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40023800 	.word	0x40023800

080029e0 <LL_TIM_DisableARRPreload>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_TIM_SetClockSource>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a12:	f023 0307 	bic.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_TIM_SetTriggerOutput>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	605a      	str	r2, [r3, #4]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_TIM_DisableMasterSlaveMode>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002a84:	2001      	movs	r0, #1
 8002a86:	f7ff ff93 	bl	80029b0 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a8a:	f7ff ff07 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff57 	bl	8002948 <NVIC_EncodePriority>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2019      	movs	r0, #25
 8002aa0:	f7ff ff28 	bl	80028f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002aa4:	2019      	movs	r0, #25
 8002aa6:	f7ff ff07 	bl	80028b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 8002aaa:	231d      	movs	r3, #29
 8002aac:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 8002ab2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002ab6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <MX_TIM1_Init+0x80>)
 8002ac6:	f001 f9ed 	bl	8003ea4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002aca:	4809      	ldr	r0, [pc, #36]	@ (8002af0 <MX_TIM1_Init+0x80>)
 8002acc:	f7ff ff88 	bl	80029e0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4807      	ldr	r0, [pc, #28]	@ (8002af0 <MX_TIM1_Init+0x80>)
 8002ad4:	f7ff ff94 	bl	8002a00 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <MX_TIM1_Init+0x80>)
 8002adc:	f7ff ffa5 	bl	8002a2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002ae0:	4803      	ldr	r0, [pc, #12]	@ (8002af0 <MX_TIM1_Init+0x80>)
 8002ae2:	f7ff ffb5 	bl	8002a50 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000

08002af4 <__NVIC_GetPriorityGrouping>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <LL_DMA_SetDataTransferDirection>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <LL_DMA_SetDataTransferDirection+0x44>)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c28:	4908      	ldr	r1, [pc, #32]	@ (8002c4c <LL_DMA_SetDataTransferDirection+0x44>)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	440b      	add	r3, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	440b      	add	r3, r1
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	08007148 	.word	0x08007148

08002c50 <LL_DMA_SetMode>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <LL_DMA_SetMode+0x44>)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002c70:	4908      	ldr	r1, [pc, #32]	@ (8002c94 <LL_DMA_SetMode+0x44>)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	440b      	add	r3, r1
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	440b      	add	r3, r1
 8002c7e:	4619      	mov	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	08007148 	.word	0x08007148

08002c98 <LL_DMA_SetPeriphIncMode>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <LL_DMA_SetPeriphIncMode+0x44>)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002cb8:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <LL_DMA_SetPeriphIncMode+0x44>)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	440b      	add	r3, r1
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	08007148 	.word	0x08007148

08002ce0 <LL_DMA_SetMemoryIncMode>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <LL_DMA_SetMemoryIncMode+0x44>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d00:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <LL_DMA_SetMemoryIncMode+0x44>)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	440b      	add	r3, r1
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	440b      	add	r3, r1
 8002d0e:	4619      	mov	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	08007148 	.word	0x08007148

08002d28 <LL_DMA_SetPeriphSize>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <LL_DMA_SetPeriphSize+0x44>)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4413      	add	r3, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002d48:	4908      	ldr	r1, [pc, #32]	@ (8002d6c <LL_DMA_SetPeriphSize+0x44>)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	440b      	add	r3, r1
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	440b      	add	r3, r1
 8002d56:	4619      	mov	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	08007148 	.word	0x08007148

08002d70 <LL_DMA_SetMemorySize>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <LL_DMA_SetMemorySize+0x44>)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002d90:	4908      	ldr	r1, [pc, #32]	@ (8002db4 <LL_DMA_SetMemorySize+0x44>)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	440b      	add	r3, r1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	440b      	add	r3, r1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	08007148 	.word	0x08007148

08002db8 <LL_DMA_SetStreamPriorityLevel>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4413      	add	r3, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd8:	4908      	ldr	r1, [pc, #32]	@ (8002dfc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	440b      	add	r3, r1
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	440b      	add	r3, r1
 8002de6:	4619      	mov	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	08007148 	.word	0x08007148

08002e00 <LL_DMA_SetChannelSelection>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <LL_DMA_SetChannelSelection+0x44>)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002e20:	4908      	ldr	r1, [pc, #32]	@ (8002e44 <LL_DMA_SetChannelSelection+0x44>)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	440b      	add	r3, r1
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	440b      	add	r3, r1
 8002e2e:	4619      	mov	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	08007148 	.word	0x08007148

08002e48 <LL_DMA_DisableFifoMode>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002e52:	4a0c      	ldr	r2, [pc, #48]	@ (8002e84 <LL_DMA_DisableFifoMode+0x3c>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <LL_DMA_DisableFifoMode+0x3c>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	440a      	add	r2, r1
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	6153      	str	r3, [r2, #20]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	08007148 	.word	0x08007148

08002e88 <LL_AHB1_GRP1_EnableClock>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002e90:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e94:	4907      	ldr	r1, [pc, #28]	@ (8002eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <LL_APB1_GRP1_EnableClock>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ec0:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ec4:	4907      	ldr	r1, [pc, #28]	@ (8002ee4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <LL_APB2_GRP1_EnableClock>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef4:	4907      	ldr	r1, [pc, #28]	@ (8002f14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4013      	ands	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40023800 	.word	0x40023800

08002f18 <LL_USART_Enable>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_USART_ConfigAsyncMode>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	615a      	str	r2, [r3, #20]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	@ 0x38
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	615a      	str	r2, [r3, #20]
 8002f7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002f8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f92:	f7ff ff91 	bl	8002eb8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f96:	2001      	movs	r0, #1
 8002f98:	f7ff ff76 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4846      	ldr	r0, [pc, #280]	@ (80030d4 <MX_UART4_Init+0x170>)
 8002fba:	f000 fd40 	bl	8003a3e <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8002fbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4844      	ldr	r0, [pc, #272]	@ (80030d8 <MX_UART4_Init+0x174>)
 8002fc6:	f7ff ff1b 	bl	8002e00 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4842      	ldr	r0, [pc, #264]	@ (80030d8 <MX_UART4_Init+0x174>)
 8002fd0:	f7ff fe1a 	bl	8002c08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	483f      	ldr	r0, [pc, #252]	@ (80030d8 <MX_UART4_Init+0x174>)
 8002fda:	f7ff feed 	bl	8002db8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	483d      	ldr	r0, [pc, #244]	@ (80030d8 <MX_UART4_Init+0x174>)
 8002fe4:	f7ff fe34 	bl	8002c50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2102      	movs	r1, #2
 8002fec:	483a      	ldr	r0, [pc, #232]	@ (80030d8 <MX_UART4_Init+0x174>)
 8002fee:	f7ff fe53 	bl	8002c98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4837      	ldr	r0, [pc, #220]	@ (80030d8 <MX_UART4_Init+0x174>)
 8002ffa:	f7ff fe71 	bl	8002ce0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2102      	movs	r1, #2
 8003002:	4835      	ldr	r0, [pc, #212]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003004:	f7ff fe90 	bl	8002d28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8003008:	2200      	movs	r2, #0
 800300a:	2102      	movs	r1, #2
 800300c:	4832      	ldr	r0, [pc, #200]	@ (80030d8 <MX_UART4_Init+0x174>)
 800300e:	f7ff feaf 	bl	8002d70 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 8003012:	2102      	movs	r1, #2
 8003014:	4830      	ldr	r0, [pc, #192]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003016:	f7ff ff17 	bl	8002e48 <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 800301a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800301e:	2104      	movs	r1, #4
 8003020:	482d      	ldr	r0, [pc, #180]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003022:	f7ff feed 	bl	8002e00 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	2104      	movs	r1, #4
 800302a:	482b      	ldr	r0, [pc, #172]	@ (80030d8 <MX_UART4_Init+0x174>)
 800302c:	f7ff fdec 	bl	8002c08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8003030:	2200      	movs	r2, #0
 8003032:	2104      	movs	r1, #4
 8003034:	4828      	ldr	r0, [pc, #160]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003036:	f7ff febf 	bl	8002db8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800303a:	2200      	movs	r2, #0
 800303c:	2104      	movs	r1, #4
 800303e:	4826      	ldr	r0, [pc, #152]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003040:	f7ff fe06 	bl	8002c50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8003044:	2200      	movs	r2, #0
 8003046:	2104      	movs	r1, #4
 8003048:	4823      	ldr	r0, [pc, #140]	@ (80030d8 <MX_UART4_Init+0x174>)
 800304a:	f7ff fe25 	bl	8002c98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800304e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003052:	2104      	movs	r1, #4
 8003054:	4820      	ldr	r0, [pc, #128]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003056:	f7ff fe43 	bl	8002ce0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800305a:	2200      	movs	r2, #0
 800305c:	2104      	movs	r1, #4
 800305e:	481e      	ldr	r0, [pc, #120]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003060:	f7ff fe62 	bl	8002d28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8003064:	2200      	movs	r2, #0
 8003066:	2104      	movs	r1, #4
 8003068:	481b      	ldr	r0, [pc, #108]	@ (80030d8 <MX_UART4_Init+0x174>)
 800306a:	f7ff fe81 	bl	8002d70 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 800306e:	2104      	movs	r1, #4
 8003070:	4819      	ldr	r0, [pc, #100]	@ (80030d8 <MX_UART4_Init+0x174>)
 8003072:	f7ff fee9 	bl	8002e48 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003076:	f7ff fd3d 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 800307a:	4603      	mov	r3, r0
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fd8d 	bl	8002ba0 <NVIC_EncodePriority>
 8003086:	4603      	mov	r3, r0
 8003088:	4619      	mov	r1, r3
 800308a:	2034      	movs	r0, #52	@ 0x34
 800308c:	f7ff fd5e 	bl	8002b4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8003090:	2034      	movs	r0, #52	@ 0x34
 8003092:	f7ff fd3d 	bl	8002b10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <MX_UART4_Init+0x178>)
 8003098:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80030a6:	230c      	movs	r3, #12
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	4809      	ldr	r0, [pc, #36]	@ (80030e0 <MX_UART4_Init+0x17c>)
 80030ba:	f001 f9f5 	bl	80044a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80030be:	4808      	ldr	r0, [pc, #32]	@ (80030e0 <MX_UART4_Init+0x17c>)
 80030c0:	f7ff ff3a 	bl	8002f38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80030c4:	4806      	ldr	r0, [pc, #24]	@ (80030e0 <MX_UART4_Init+0x17c>)
 80030c6:	f7ff ff27 	bl	8002f18 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	3738      	adds	r7, #56	@ 0x38
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40020000 	.word	0x40020000
 80030d8:	40026000 	.word	0x40026000
 80030dc:	000f4240 	.word	0x000f4240
 80030e0:	40004c00 	.word	0x40004c00

080030e4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	@ 0x38
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	615a      	str	r2, [r3, #20]
 80030fc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
 800310c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800310e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003112:	f7ff fed1 	bl	8002eb8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003116:	2004      	movs	r0, #4
 8003118:	f7ff feb6 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800311c:	2008      	movs	r0, #8
 800311e:	f7ff feb3 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8003122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003128:	2302      	movs	r3, #2
 800312a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003138:	2308      	movs	r3, #8
 800313a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4821      	ldr	r0, [pc, #132]	@ (80031c8 <MX_UART5_Init+0xe4>)
 8003142:	f000 fc7c 	bl	8003a3e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003146:	2304      	movs	r3, #4
 8003148:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800314a:	2302      	movs	r3, #2
 800314c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800315a:	2308      	movs	r3, #8
 800315c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4619      	mov	r1, r3
 8003162:	481a      	ldr	r0, [pc, #104]	@ (80031cc <MX_UART5_Init+0xe8>)
 8003164:	f000 fc6b 	bl	8003a3e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003168:	f7ff fcc4 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 800316c:	4603      	mov	r3, r0
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fd14 	bl	8002ba0 <NVIC_EncodePriority>
 8003178:	4603      	mov	r3, r0
 800317a:	4619      	mov	r1, r3
 800317c:	2035      	movs	r0, #53	@ 0x35
 800317e:	f7ff fce5 	bl	8002b4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003182:	2035      	movs	r0, #53	@ 0x35
 8003184:	f7ff fcc4 	bl	8002b10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003188:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800318c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003196:	2300      	movs	r3, #0
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800319a:	230c      	movs	r3, #12
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800319e:	2300      	movs	r3, #0
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	4808      	ldr	r0, [pc, #32]	@ (80031d0 <MX_UART5_Init+0xec>)
 80031ae:	f001 f97b 	bl	80044a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80031b2:	4807      	ldr	r0, [pc, #28]	@ (80031d0 <MX_UART5_Init+0xec>)
 80031b4:	f7ff fec0 	bl	8002f38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80031b8:	4805      	ldr	r0, [pc, #20]	@ (80031d0 <MX_UART5_Init+0xec>)
 80031ba:	f7ff fead 	bl	8002f18 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	3738      	adds	r7, #56	@ 0x38
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	40005000 	.word	0x40005000

080031d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08e      	sub	sp, #56	@ 0x38
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80031da:	f107 031c 	add.w	r3, r7, #28
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	615a      	str	r2, [r3, #20]
 80031ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
 80031fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80031fe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003202:	f7ff fe59 	bl	8002eb8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003206:	2001      	movs	r0, #1
 8003208:	f7ff fe3e 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800320c:	230c      	movs	r3, #12
 800320e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003210:	2302      	movs	r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003220:	2307      	movs	r3, #7
 8003222:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	4619      	mov	r1, r3
 8003228:	483e      	ldr	r0, [pc, #248]	@ (8003324 <MX_USART2_UART_Init+0x150>)
 800322a:	f000 fc08 	bl	8003a3e <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 800322e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003232:	2105      	movs	r1, #5
 8003234:	483c      	ldr	r0, [pc, #240]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 8003236:	f7ff fde3 	bl	8002e00 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800323a:	2200      	movs	r2, #0
 800323c:	2105      	movs	r1, #5
 800323e:	483a      	ldr	r0, [pc, #232]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 8003240:	f7ff fce2 	bl	8002c08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8003244:	2200      	movs	r2, #0
 8003246:	2105      	movs	r1, #5
 8003248:	4837      	ldr	r0, [pc, #220]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 800324a:	f7ff fdb5 	bl	8002db8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 800324e:	2200      	movs	r2, #0
 8003250:	2105      	movs	r1, #5
 8003252:	4835      	ldr	r0, [pc, #212]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 8003254:	f7ff fcfc 	bl	8002c50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8003258:	2200      	movs	r2, #0
 800325a:	2105      	movs	r1, #5
 800325c:	4832      	ldr	r0, [pc, #200]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 800325e:	f7ff fd1b 	bl	8002c98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8003262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003266:	2105      	movs	r1, #5
 8003268:	482f      	ldr	r0, [pc, #188]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 800326a:	f7ff fd39 	bl	8002ce0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 800326e:	2200      	movs	r2, #0
 8003270:	2105      	movs	r1, #5
 8003272:	482d      	ldr	r0, [pc, #180]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 8003274:	f7ff fd58 	bl	8002d28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8003278:	2200      	movs	r2, #0
 800327a:	2105      	movs	r1, #5
 800327c:	482a      	ldr	r0, [pc, #168]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 800327e:	f7ff fd77 	bl	8002d70 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8003282:	2105      	movs	r1, #5
 8003284:	4828      	ldr	r0, [pc, #160]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 8003286:	f7ff fddf 	bl	8002e48 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800328a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800328e:	2106      	movs	r1, #6
 8003290:	4825      	ldr	r0, [pc, #148]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 8003292:	f7ff fdb5 	bl	8002e00 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	2106      	movs	r1, #6
 800329a:	4823      	ldr	r0, [pc, #140]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 800329c:	f7ff fcb4 	bl	8002c08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2106      	movs	r1, #6
 80032a4:	4820      	ldr	r0, [pc, #128]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032a6:	f7ff fd87 	bl	8002db8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2106      	movs	r1, #6
 80032ae:	481e      	ldr	r0, [pc, #120]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032b0:	f7ff fcce 	bl	8002c50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80032b4:	2200      	movs	r2, #0
 80032b6:	2106      	movs	r1, #6
 80032b8:	481b      	ldr	r0, [pc, #108]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032ba:	f7ff fced 	bl	8002c98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80032be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032c2:	2106      	movs	r1, #6
 80032c4:	4818      	ldr	r0, [pc, #96]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032c6:	f7ff fd0b 	bl	8002ce0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2106      	movs	r1, #6
 80032ce:	4816      	ldr	r0, [pc, #88]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032d0:	f7ff fd2a 	bl	8002d28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2106      	movs	r1, #6
 80032d8:	4813      	ldr	r0, [pc, #76]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032da:	f7ff fd49 	bl	8002d70 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80032de:	2106      	movs	r1, #6
 80032e0:	4811      	ldr	r0, [pc, #68]	@ (8003328 <MX_USART2_UART_Init+0x154>)
 80032e2:	f7ff fdb1 	bl	8002e48 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80032e6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80032ea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80032ec:	2300      	movs	r3, #0
 80032ee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80032f8:	230c      	movs	r3, #12
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003300:	2300      	movs	r3, #0
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	4808      	ldr	r0, [pc, #32]	@ (800332c <MX_USART2_UART_Init+0x158>)
 800330c:	f001 f8cc 	bl	80044a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003310:	4806      	ldr	r0, [pc, #24]	@ (800332c <MX_USART2_UART_Init+0x158>)
 8003312:	f7ff fe11 	bl	8002f38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003316:	4805      	ldr	r0, [pc, #20]	@ (800332c <MX_USART2_UART_Init+0x158>)
 8003318:	f7ff fdfe 	bl	8002f18 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800331c:	bf00      	nop
 800331e:	3738      	adds	r7, #56	@ 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40020000 	.word	0x40020000
 8003328:	40026000 	.word	0x40026000
 800332c:	40004400 	.word	0x40004400

08003330 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	@ 0x38
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003336:	f107 031c 	add.w	r3, r7, #28
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	615a      	str	r2, [r3, #20]
 8003348:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
 8003358:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800335a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800335e:	f7ff fdab 	bl	8002eb8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003362:	2004      	movs	r0, #4
 8003364:	f7ff fd90 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003368:	2002      	movs	r0, #2
 800336a:	f7ff fd8d 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800336e:	2320      	movs	r3, #32
 8003370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003372:	2302      	movs	r3, #2
 8003374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003376:	2303      	movs	r3, #3
 8003378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003382:	2307      	movs	r3, #7
 8003384:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4822      	ldr	r0, [pc, #136]	@ (8003414 <MX_USART3_UART_Init+0xe4>)
 800338c:	f000 fb57 	bl	8003a3e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003394:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003396:	2302      	movs	r3, #2
 8003398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80033a6:	2307      	movs	r3, #7
 80033a8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	481a      	ldr	r0, [pc, #104]	@ (8003418 <MX_USART3_UART_Init+0xe8>)
 80033b0:	f000 fb45 	bl	8003a3e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033b4:	f7ff fb9e 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fbee 	bl	8002ba0 <NVIC_EncodePriority>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4619      	mov	r1, r3
 80033c8:	2027      	movs	r0, #39	@ 0x27
 80033ca:	f7ff fbbf 	bl	8002b4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80033ce:	2027      	movs	r0, #39	@ 0x27
 80033d0:	f7ff fb9e 	bl	8002b10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80033d4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80033d8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033e6:	230c      	movs	r3, #12
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4619      	mov	r1, r3
 80033f8:	4808      	ldr	r0, [pc, #32]	@ (800341c <MX_USART3_UART_Init+0xec>)
 80033fa:	f001 f855 	bl	80044a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80033fe:	4807      	ldr	r0, [pc, #28]	@ (800341c <MX_USART3_UART_Init+0xec>)
 8003400:	f7ff fd9a 	bl	8002f38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003404:	4805      	ldr	r0, [pc, #20]	@ (800341c <MX_USART3_UART_Init+0xec>)
 8003406:	f7ff fd87 	bl	8002f18 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800340a:	bf00      	nop
 800340c:	3738      	adds	r7, #56	@ 0x38
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40020800 	.word	0x40020800
 8003418:	40020400 	.word	0x40020400
 800341c:	40004800 	.word	0x40004800

08003420 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08e      	sub	sp, #56	@ 0x38
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003426:	f107 031c 	add.w	r3, r7, #28
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	615a      	str	r2, [r3, #20]
 8003438:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
 8003448:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800344a:	2020      	movs	r0, #32
 800344c:	f7ff fd4c 	bl	8002ee8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003450:	2004      	movs	r0, #4
 8003452:	f7ff fd19 	bl	8002e88 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003456:	23c0      	movs	r3, #192	@ 0xc0
 8003458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800345a:	2302      	movs	r3, #2
 800345c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800346a:	2308      	movs	r3, #8
 800346c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4846      	ldr	r0, [pc, #280]	@ (800358c <MX_USART6_UART_Init+0x16c>)
 8003474:	f000 fae3 	bl	8003a3e <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8003478:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800347c:	2106      	movs	r1, #6
 800347e:	4844      	ldr	r0, [pc, #272]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 8003480:	f7ff fcbe 	bl	8002e00 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003484:	2240      	movs	r2, #64	@ 0x40
 8003486:	2106      	movs	r1, #6
 8003488:	4841      	ldr	r0, [pc, #260]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 800348a:	f7ff fbbd 	bl	8002c08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 800348e:	2200      	movs	r2, #0
 8003490:	2106      	movs	r1, #6
 8003492:	483f      	ldr	r0, [pc, #252]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 8003494:	f7ff fc90 	bl	8002db8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003498:	2200      	movs	r2, #0
 800349a:	2106      	movs	r1, #6
 800349c:	483c      	ldr	r0, [pc, #240]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 800349e:	f7ff fbd7 	bl	8002c50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2106      	movs	r1, #6
 80034a6:	483a      	ldr	r0, [pc, #232]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034a8:	f7ff fbf6 	bl	8002c98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80034ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034b0:	2106      	movs	r1, #6
 80034b2:	4837      	ldr	r0, [pc, #220]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034b4:	f7ff fc14 	bl	8002ce0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80034b8:	2200      	movs	r2, #0
 80034ba:	2106      	movs	r1, #6
 80034bc:	4834      	ldr	r0, [pc, #208]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034be:	f7ff fc33 	bl	8002d28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2106      	movs	r1, #6
 80034c6:	4832      	ldr	r0, [pc, #200]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034c8:	f7ff fc52 	bl	8002d70 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 80034cc:	2106      	movs	r1, #6
 80034ce:	4830      	ldr	r0, [pc, #192]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034d0:	f7ff fcba 	bl	8002e48 <LL_DMA_DisableFifoMode>

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 80034d4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80034d8:	2101      	movs	r1, #1
 80034da:	482d      	ldr	r0, [pc, #180]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034dc:	f7ff fc90 	bl	8002e00 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2101      	movs	r1, #1
 80034e4:	482a      	ldr	r0, [pc, #168]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034e6:	f7ff fb8f 	bl	8002c08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80034ea:	2200      	movs	r2, #0
 80034ec:	2101      	movs	r1, #1
 80034ee:	4828      	ldr	r0, [pc, #160]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034f0:	f7ff fc62 	bl	8002db8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2101      	movs	r1, #1
 80034f8:	4825      	ldr	r0, [pc, #148]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 80034fa:	f7ff fba9 	bl	8002c50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80034fe:	2200      	movs	r2, #0
 8003500:	2101      	movs	r1, #1
 8003502:	4823      	ldr	r0, [pc, #140]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 8003504:	f7ff fbc8 	bl	8002c98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8003508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800350c:	2101      	movs	r1, #1
 800350e:	4820      	ldr	r0, [pc, #128]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 8003510:	f7ff fbe6 	bl	8002ce0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8003514:	2200      	movs	r2, #0
 8003516:	2101      	movs	r1, #1
 8003518:	481d      	ldr	r0, [pc, #116]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 800351a:	f7ff fc05 	bl	8002d28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 800351e:	2200      	movs	r2, #0
 8003520:	2101      	movs	r1, #1
 8003522:	481b      	ldr	r0, [pc, #108]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 8003524:	f7ff fc24 	bl	8002d70 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8003528:	2101      	movs	r1, #1
 800352a:	4819      	ldr	r0, [pc, #100]	@ (8003590 <MX_USART6_UART_Init+0x170>)
 800352c:	f7ff fc8c 	bl	8002e48 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003530:	f7ff fae0 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8003534:	4603      	mov	r3, r0
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fb30 	bl	8002ba0 <NVIC_EncodePriority>
 8003540:	4603      	mov	r3, r0
 8003542:	4619      	mov	r1, r3
 8003544:	2047      	movs	r0, #71	@ 0x47
 8003546:	f7ff fb01 	bl	8002b4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800354a:	2047      	movs	r0, #71	@ 0x47
 800354c:	f7ff fae0 	bl	8002b10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <MX_USART6_UART_Init+0x174>)
 8003552:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800355c:	2300      	movs	r3, #0
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003560:	230c      	movs	r3, #12
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	4619      	mov	r1, r3
 8003572:	4809      	ldr	r0, [pc, #36]	@ (8003598 <MX_USART6_UART_Init+0x178>)
 8003574:	f000 ff98 	bl	80044a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003578:	4807      	ldr	r0, [pc, #28]	@ (8003598 <MX_USART6_UART_Init+0x178>)
 800357a:	f7ff fcdd 	bl	8002f38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800357e:	4806      	ldr	r0, [pc, #24]	@ (8003598 <MX_USART6_UART_Init+0x178>)
 8003580:	f7ff fcca 	bl	8002f18 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3738      	adds	r7, #56	@ 0x38
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40020800 	.word	0x40020800
 8003590:	40026400 	.word	0x40026400
 8003594:	001e8480 	.word	0x001e8480
 8003598:	40011400 	.word	0x40011400

0800359c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800359c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035a0:	f7ff f96a 	bl	8002878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480c      	ldr	r0, [pc, #48]	@ (80035d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035a6:	490d      	ldr	r1, [pc, #52]	@ (80035dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035a8:	4a0d      	ldr	r2, [pc, #52]	@ (80035e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035bc:	4c0a      	ldr	r4, [pc, #40]	@ (80035e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035ca:	f001 ff03 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ce:	f7fe fa03 	bl	80019d8 <main>
  bx  lr    
 80035d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035dc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80035e0:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 80035e4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80035e8:	2000099c 	.word	0x2000099c

080035ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC_IRQHandler>

080035ee <LL_ADC_REG_SetSequencerLength>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_IsEnabled>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800364a:	481c      	ldr	r0, [pc, #112]	@ (80036bc <LL_ADC_CommonInit+0x80>)
 800364c:	f7ff ffe2 	bl	8003614 <LL_ADC_IsEnabled>
 8003650:	4604      	mov	r4, r0
 8003652:	481b      	ldr	r0, [pc, #108]	@ (80036c0 <LL_ADC_CommonInit+0x84>)
 8003654:	f7ff ffde 	bl	8003614 <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	431c      	orrs	r4, r3
 800365c:	4819      	ldr	r0, [pc, #100]	@ (80036c4 <LL_ADC_CommonInit+0x88>)
 800365e:	f7ff ffd9 	bl	8003614 <LL_ADC_IsEnabled>
 8003662:	4603      	mov	r3, r0
 8003664:	4323      	orrs	r3, r4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d120      	bne.n	80036ac <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <LL_ADC_CommonInit+0x8c>)
 8003678:	4013      	ands	r3, r2
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6811      	ldr	r1, [r2, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	6852      	ldr	r2, [r2, #4]
 8003682:	4311      	orrs	r1, r2
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	4311      	orrs	r1, r2
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	430a      	orrs	r2, r1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e00b      	b.n	80036b0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <LL_ADC_CommonInit+0x8c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e001      	b.n	80036b0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd90      	pop	{r4, r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40012000 	.word	0x40012000
 80036c0:	40012100 	.word	0x40012100
 80036c4:	40012200 	.word	0x40012200
 80036c8:	fffc10e0 	.word	0xfffc10e0

080036cc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ff9a 	bl	8003614 <LL_ADC_IsEnabled>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d117      	bne.n	8003716 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80036ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	6811      	ldr	r1, [r2, #0]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	6892      	ldr	r2, [r2, #8]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	e001      	b.n	800371a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ff6e 	bl	8003614 <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d12b      	bne.n	8003796 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	e005      	b.n	8003766 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <LL_ADC_REG_Init+0x80>)
 800376c:	4013      	ands	r3, r2
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	6912      	ldr	r2, [r2, #16]
 8003780:	430a      	orrs	r2, r1
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff2d 	bl	80035ee <LL_ADC_REG_SetSequencerLength>
 8003794:	e001      	b.n	800379a <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	c0fffcfd 	.word	0xc0fffcfd

080037a8 <LL_GPIO_SetPinMode>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b08b      	sub	sp, #44	@ 0x2c
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	613b      	str	r3, [r7, #16]
  return result;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80037ce:	2320      	movs	r3, #32
 80037d0:	e003      	b.n	80037da <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2103      	movs	r1, #3
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	401a      	ands	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	61fb      	str	r3, [r7, #28]
  return result;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	431a      	orrs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	372c      	adds	r7, #44	@ 0x2c
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_GPIO_SetPinOutputType>:
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_GPIO_SetPinSpeed>:
{
 8003852:	b480      	push	{r7}
 8003854:	b08b      	sub	sp, #44	@ 0x2c
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	613b      	str	r3, [r7, #16]
  return result;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003878:	2320      	movs	r3, #32
 800387a:	e003      	b.n	8003884 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2103      	movs	r1, #3
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	61fb      	str	r3, [r7, #28]
  return result;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	431a      	orrs	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	372c      	adds	r7, #44	@ 0x2c
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_GPIO_SetPinPull>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b08b      	sub	sp, #44	@ 0x2c
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	613b      	str	r3, [r7, #16]
  return result;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e003      	b.n	80038fe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2103      	movs	r1, #3
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	61fb      	str	r3, [r7, #28]
  return result;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003920:	2320      	movs	r3, #32
 8003922:	e003      	b.n	800392c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	60da      	str	r2, [r3, #12]
}
 800393a:	bf00      	nop
 800393c:	372c      	adds	r7, #44	@ 0x2c
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_GPIO_SetAFPin_0_7>:
{
 8003946:	b480      	push	{r7}
 8003948:	b08b      	sub	sp, #44	@ 0x2c
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	613b      	str	r3, [r7, #16]
  return result;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	210f      	movs	r1, #15
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	401a      	ands	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	61fb      	str	r3, [r7, #28]
  return result;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800399a:	2320      	movs	r3, #32
 800399c:	e003      	b.n	80039a6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	431a      	orrs	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	372c      	adds	r7, #44	@ 0x2c
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_GPIO_SetAFPin_8_15>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b08b      	sub	sp, #44	@ 0x2c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	613b      	str	r3, [r7, #16]
  return result;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	210f      	movs	r1, #15
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003a18:	2320      	movs	r3, #32
 8003a1a:	e003      	b.n	8003a24 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003a32:	bf00      	nop
 8003a34:	372c      	adds	r7, #44	@ 0x2c
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	@ 0x28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	617b      	str	r3, [r7, #20]
  return result;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <LL_GPIO_Init+0x2e>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a76:	e057      	b.n	8003b28 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	4013      	ands	r3, r2
 8003a86:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d049      	beq.n	8003b22 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d003      	beq.n	8003a9e <LL_GPIO_Init+0x60>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d10d      	bne.n	8003aba <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6a39      	ldr	r1, [r7, #32]
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fed3 	bl	8003852 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff feb4 	bl	8003822 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6a39      	ldr	r1, [r7, #32]
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff02 	bl	80038cc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d121      	bne.n	8003b14 <LL_GPIO_Init+0xd6>
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	60bb      	str	r3, [r7, #8]
  return result;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <LL_GPIO_Init+0xac>
    return 32U;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e003      	b.n	8003af2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003af2:	2b07      	cmp	r3, #7
 8003af4:	d807      	bhi.n	8003b06 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	461a      	mov	r2, r3
 8003afc:	6a39      	ldr	r1, [r7, #32]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff21 	bl	8003946 <LL_GPIO_SetAFPin_0_7>
 8003b04:	e006      	b.n	8003b14 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6a39      	ldr	r1, [r7, #32]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ff56 	bl	80039c0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6a39      	ldr	r1, [r7, #32]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fe43 	bl	80037a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1a0      	bne.n	8003a78 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3728      	adds	r7, #40	@ 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <LL_RCC_GetSysClkSource>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b44:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <LL_RCC_GetSysClkSource+0x18>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800

08003b5c <LL_RCC_GetAHBPrescaler>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b60:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <LL_RCC_GetAHBPrescaler+0x18>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <LL_RCC_GetAPB1Prescaler>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <LL_RCC_GetAPB2Prescaler>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b98:	4b04      	ldr	r3, [pc, #16]	@ (8003bac <LL_RCC_GetAPB2Prescaler+0x18>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800

08003bb0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800

08003bcc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <LL_RCC_PLL_GetN+0x18>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40023800 	.word	0x40023800

08003be8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <LL_RCC_PLL_GetP+0x18>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <LL_RCC_PLL_GetR+0x18>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800

08003c20 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c24:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <LL_RCC_PLL_GetDivider+0x18>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003c44:	f000 f820 	bl	8003c88 <RCC_GetSystemClockFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f85c 	bl	8003d10 <RCC_GetHCLKClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f86a 	bl	8003d3c <RCC_GetPCLK1ClockFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f876 	bl	8003d64 <RCC_GetPCLK2ClockFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003c92:	f7ff ff55 	bl	8003b40 <LL_RCC_GetSysClkSource>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d82d      	bhi.n	8003cf8 <RCC_GetSystemClockFreq+0x70>
 8003c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <RCC_GetSystemClockFreq+0x1c>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003cf9 	.word	0x08003cf9
 8003cac:	08003cf9 	.word	0x08003cf9
 8003cb0:	08003cf9 	.word	0x08003cf9
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cf9 	.word	0x08003cf9
 8003cbc:	08003cf9 	.word	0x08003cf9
 8003cc0:	08003cf9 	.word	0x08003cf9
 8003cc4:	08003ce5 	.word	0x08003ce5
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003cef 	.word	0x08003cef
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <RCC_GetSystemClockFreq+0x80>)
 8003cda:	607b      	str	r3, [r7, #4]
      break;
 8003cdc:	e00f      	b.n	8003cfe <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003cde:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <RCC_GetSystemClockFreq+0x84>)
 8003ce0:	607b      	str	r3, [r7, #4]
      break;
 8003ce2:	e00c      	b.n	8003cfe <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003ce4:	2008      	movs	r0, #8
 8003ce6:	f000 f851 	bl	8003d8c <RCC_PLL_GetFreqDomain_SYS>
 8003cea:	6078      	str	r0, [r7, #4]
      break;
 8003cec:	e007      	b.n	8003cfe <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8003cee:	200c      	movs	r0, #12
 8003cf0:	f000 f84c 	bl	8003d8c <RCC_PLL_GetFreqDomain_SYS>
 8003cf4:	6078      	str	r0, [r7, #4]
      break;
 8003cf6:	e002      	b.n	8003cfe <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <RCC_GetSystemClockFreq+0x80>)
 8003cfa:	607b      	str	r3, [r7, #4]
      break;
 8003cfc:	bf00      	nop
  }

  return frequency;
 8003cfe:	687b      	ldr	r3, [r7, #4]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	00f42400 	.word	0x00f42400
 8003d0c:	007a1200 	.word	0x007a1200

08003d10 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003d18:	f7ff ff20 	bl	8003b5c <LL_RCC_GetAHBPrescaler>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <RCC_GetHCLKClockFreq+0x28>)
 8003d26:	5cd3      	ldrb	r3, [r2, r3]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	40d3      	lsrs	r3, r2
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	08007130 	.word	0x08007130

08003d3c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003d44:	f7ff ff18 	bl	8003b78 <LL_RCC_GetAPB1Prescaler>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <RCC_GetPCLK1ClockFreq+0x24>)
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	461a      	mov	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	40d3      	lsrs	r3, r2
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	08007140 	.word	0x08007140

08003d64 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003d6c:	f7ff ff12 	bl	8003b94 <LL_RCC_GetAPB2Prescaler>
 8003d70:	4603      	mov	r3, r0
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <RCC_GetPCLK2ClockFreq+0x24>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	40d3      	lsrs	r3, r2
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	08007140 	.word	0x08007140

08003d8c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003da0:	f7ff ff06 	bl	8003bb0 <LL_RCC_PLL_GetMainSource>
 8003da4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db2:	d003      	beq.n	8003dbc <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003db4:	e005      	b.n	8003dc2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003db6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e28 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003db8:	617b      	str	r3, [r7, #20]
      break;
 8003dba:	e005      	b.n	8003dc8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003dbe:	617b      	str	r3, [r7, #20]
      break;
 8003dc0:	e002      	b.n	8003dc8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003dc2:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003dc4:	617b      	str	r3, [r7, #20]
      break;
 8003dc6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d114      	bne.n	8003df8 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003dce:	f7ff ff27 	bl	8003c20 <LL_RCC_PLL_GetDivider>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fbb3 f4f2 	udiv	r4, r3, r2
 8003dda:	f7ff fef7 	bl	8003bcc <LL_RCC_PLL_GetN>
 8003dde:	4603      	mov	r3, r0
 8003de0:	fb03 f404 	mul.w	r4, r3, r4
 8003de4:	f7ff ff00 	bl	8003be8 <LL_RCC_PLL_GetP>
 8003de8:	4603      	mov	r3, r0
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	3301      	adds	r3, #1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	e011      	b.n	8003e1c <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003df8:	f7ff ff12 	bl	8003c20 <LL_RCC_PLL_GetDivider>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fbb3 f4f2 	udiv	r4, r3, r2
 8003e04:	f7ff fee2 	bl	8003bcc <LL_RCC_PLL_GetN>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	fb03 f404 	mul.w	r4, r3, r4
 8003e0e:	f7ff fef9 	bl	8003c04 <LL_RCC_PLL_GetR>
 8003e12:	4603      	mov	r3, r0
 8003e14:	0f1b      	lsrs	r3, r3, #28
 8003e16:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e1a:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003e1c:	693b      	ldr	r3, [r7, #16]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd90      	pop	{r4, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	007a1200 	.word	0x007a1200

08003e30 <LL_TIM_SetPrescaler>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_TIM_SetAutoReload>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_TIM_SetRepetitionCounter>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	615a      	str	r2, [r3, #20]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8003fac <LL_TIM_Init+0x108>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <LL_TIM_Init+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec2:	d00f      	beq.n	8003ee4 <LL_TIM_Init+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8003fb0 <LL_TIM_Init+0x10c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <LL_TIM_Init+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a39      	ldr	r2, [pc, #228]	@ (8003fb4 <LL_TIM_Init+0x110>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <LL_TIM_Init+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	@ (8003fb8 <LL_TIM_Init+0x114>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <LL_TIM_Init+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a37      	ldr	r2, [pc, #220]	@ (8003fbc <LL_TIM_Init+0x118>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d106      	bne.n	8003ef2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8003fac <LL_TIM_Init+0x108>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02b      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f00:	d027      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <LL_TIM_Init+0x10c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d023      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	@ (8003fb4 <LL_TIM_Init+0x110>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01f      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a28      	ldr	r2, [pc, #160]	@ (8003fb8 <LL_TIM_Init+0x114>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01b      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <LL_TIM_Init+0x118>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d017      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a26      	ldr	r2, [pc, #152]	@ (8003fc0 <LL_TIM_Init+0x11c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	@ (8003fc4 <LL_TIM_Init+0x120>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a24      	ldr	r2, [pc, #144]	@ (8003fc8 <LL_TIM_Init+0x124>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	@ (8003fcc <LL_TIM_Init+0x128>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a22      	ldr	r2, [pc, #136]	@ (8003fd0 <LL_TIM_Init+0x12c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <LL_TIM_Init+0xae>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <LL_TIM_Init+0x130>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d106      	bne.n	8003f60 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff6d 	bl	8003e4c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff59 	bl	8003e30 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <LL_TIM_Init+0x108>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <LL_TIM_Init+0xea>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0c      	ldr	r2, [pc, #48]	@ (8003fbc <LL_TIM_Init+0x118>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d105      	bne.n	8003f9a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ff67 	bl	8003e68 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ff72 	bl	8003e84 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800
 8003fb8:	40000c00 	.word	0x40000c00
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800
 8003fcc:	40001800 	.word	0x40001800
 8003fd0:	40001c00 	.word	0x40001c00
 8003fd4:	40002000 	.word	0x40002000

08003fd8 <LL_USART_IsEnabled>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_USART_SetStopBitsLength>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_USART_SetHWFlowCtrl>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	615a      	str	r2, [r3, #20]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_USART_SetBaudRate>:
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b0c0      	sub	sp, #256	@ 0x100
 8004052:	af00      	add	r7, sp, #0
 8004054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004058:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800405c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004060:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406c:	f040 810c 	bne.w	8004288 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004070:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800407a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800407e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	1891      	adds	r1, r2, r2
 8004088:	6639      	str	r1, [r7, #96]	@ 0x60
 800408a:	415b      	adcs	r3, r3
 800408c:	667b      	str	r3, [r7, #100]	@ 0x64
 800408e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004092:	4621      	mov	r1, r4
 8004094:	eb12 0801 	adds.w	r8, r2, r1
 8004098:	4629      	mov	r1, r5
 800409a:	eb43 0901 	adc.w	r9, r3, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b2:	4690      	mov	r8, r2
 80040b4:	4699      	mov	r9, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	eb18 0303 	adds.w	r3, r8, r3
 80040bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040c0:	462b      	mov	r3, r5
 80040c2:	eb49 0303 	adc.w	r3, r9, r3
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80040ce:	2200      	movs	r2, #0
 80040d0:	469a      	mov	sl, r3
 80040d2:	4693      	mov	fp, r2
 80040d4:	eb1a 030a 	adds.w	r3, sl, sl
 80040d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040da:	eb4b 030b 	adc.w	r3, fp, fp
 80040de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040e8:	f7fc fd7e 	bl	8000be8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4b64      	ldr	r3, [pc, #400]	@ (8004284 <LL_USART_SetBaudRate+0x238>)
 80040f2:	fba3 2302 	umull	r2, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	b29c      	uxth	r4, r3
 80040fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004108:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800410c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	6539      	str	r1, [r7, #80]	@ 0x50
 8004118:	415b      	adcs	r3, r3
 800411a:	657b      	str	r3, [r7, #84]	@ 0x54
 800411c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800416a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800416e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004172:	460b      	mov	r3, r1
 8004174:	18db      	adds	r3, r3, r3
 8004176:	643b      	str	r3, [r7, #64]	@ 0x40
 8004178:	4613      	mov	r3, r2
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004180:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004184:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004188:	f7fc fd2e 	bl	8000be8 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4611      	mov	r1, r2
 8004192:	4b3c      	ldr	r3, [pc, #240]	@ (8004284 <LL_USART_SetBaudRate+0x238>)
 8004194:	fba3 2301 	umull	r2, r3, r3, r1
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	2264      	movs	r2, #100	@ 0x64
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	1acb      	subs	r3, r1, r3
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041a8:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <LL_USART_SetBaudRate+0x238>)
 80041aa:	fba3 2302 	umull	r2, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4423      	add	r3, r4
 80041be:	b29c      	uxth	r4, r3
 80041c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041ca:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041ce:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80041d2:	4642      	mov	r2, r8
 80041d4:	464b      	mov	r3, r9
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041da:	415b      	adcs	r3, r3
 80041dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041e2:	4641      	mov	r1, r8
 80041e4:	1851      	adds	r1, r2, r1
 80041e6:	6339      	str	r1, [r7, #48]	@ 0x30
 80041e8:	4649      	mov	r1, r9
 80041ea:	414b      	adcs	r3, r1
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041fa:	4659      	mov	r1, fp
 80041fc:	00cb      	lsls	r3, r1, #3
 80041fe:	4651      	mov	r1, sl
 8004200:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004204:	4651      	mov	r1, sl
 8004206:	00ca      	lsls	r2, r1, #3
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	4603      	mov	r3, r0
 800420e:	4642      	mov	r2, r8
 8004210:	189b      	adds	r3, r3, r2
 8004212:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004216:	464b      	mov	r3, r9
 8004218:	460a      	mov	r2, r1
 800421a:	eb42 0303 	adc.w	r3, r2, r3
 800421e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004222:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004230:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004234:	460b      	mov	r3, r1
 8004236:	18db      	adds	r3, r3, r3
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800423a:	4613      	mov	r3, r2
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004246:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800424a:	f7fc fccd 	bl	8000be8 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <LL_USART_SetBaudRate+0x238>)
 8004254:	fba3 1302 	umull	r1, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	2164      	movs	r1, #100	@ 0x64
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	3332      	adds	r3, #50	@ 0x32
 8004266:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <LL_USART_SetBaudRate+0x238>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	b29b      	uxth	r3, r3
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	b29b      	uxth	r3, r3
 8004276:	4423      	add	r3, r4
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004280:	609a      	str	r2, [r3, #8]
}
 8004282:	e108      	b.n	8004496 <LL_USART_SetBaudRate+0x44a>
 8004284:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004288:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004292:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004296:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800429a:	4642      	mov	r2, r8
 800429c:	464b      	mov	r3, r9
 800429e:	1891      	adds	r1, r2, r2
 80042a0:	6239      	str	r1, [r7, #32]
 80042a2:	415b      	adcs	r3, r3
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042aa:	4641      	mov	r1, r8
 80042ac:	1854      	adds	r4, r2, r1
 80042ae:	4649      	mov	r1, r9
 80042b0:	eb43 0501 	adc.w	r5, r3, r1
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	00eb      	lsls	r3, r5, #3
 80042be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c2:	00e2      	lsls	r2, r4, #3
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	4643      	mov	r3, r8
 80042ca:	18e3      	adds	r3, r4, r3
 80042cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042d0:	464b      	mov	r3, r9
 80042d2:	eb45 0303 	adc.w	r3, r5, r3
 80042d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80042f4:	4629      	mov	r1, r5
 80042f6:	008b      	lsls	r3, r1, #2
 80042f8:	4621      	mov	r1, r4
 80042fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042fe:	4621      	mov	r1, r4
 8004300:	008a      	lsls	r2, r1, #2
 8004302:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004306:	f7fc fc6f 	bl	8000be8 <__aeabi_uldivmod>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4b65      	ldr	r3, [pc, #404]	@ (80044a4 <LL_USART_SetBaudRate+0x458>)
 8004310:	fba3 2302 	umull	r2, r3, r3, r2
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	b29b      	uxth	r3, r3
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	b29c      	uxth	r4, r3
 800431c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800432a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	1891      	adds	r1, r2, r2
 8004334:	61b9      	str	r1, [r7, #24]
 8004336:	415b      	adcs	r3, r3
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433e:	4641      	mov	r1, r8
 8004340:	1851      	adds	r1, r2, r1
 8004342:	6139      	str	r1, [r7, #16]
 8004344:	4649      	mov	r1, r9
 8004346:	414b      	adcs	r3, r1
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004356:	4659      	mov	r1, fp
 8004358:	00cb      	lsls	r3, r1, #3
 800435a:	4651      	mov	r1, sl
 800435c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004360:	4651      	mov	r1, sl
 8004362:	00ca      	lsls	r2, r1, #3
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	4603      	mov	r3, r0
 800436a:	4642      	mov	r2, r8
 800436c:	189b      	adds	r3, r3, r2
 800436e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004372:	464b      	mov	r3, r9
 8004374:	460a      	mov	r2, r1
 8004376:	eb42 0303 	adc.w	r3, r2, r3
 800437a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800437e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004388:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004398:	4649      	mov	r1, r9
 800439a:	008b      	lsls	r3, r1, #2
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a2:	4641      	mov	r1, r8
 80043a4:	008a      	lsls	r2, r1, #2
 80043a6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80043aa:	f7fc fc1d 	bl	8000be8 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4b3b      	ldr	r3, [pc, #236]	@ (80044a4 <LL_USART_SetBaudRate+0x458>)
 80043b6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2264      	movs	r2, #100	@ 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	3332      	adds	r3, #50	@ 0x32
 80043c8:	4a36      	ldr	r2, [pc, #216]	@ (80044a4 <LL_USART_SetBaudRate+0x458>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	4423      	add	r3, r4
 80043da:	b29c      	uxth	r4, r3
 80043dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043e0:	2200      	movs	r2, #0
 80043e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043ea:	4642      	mov	r2, r8
 80043ec:	464b      	mov	r3, r9
 80043ee:	1891      	adds	r1, r2, r2
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	415b      	adcs	r3, r3
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043fa:	4641      	mov	r1, r8
 80043fc:	1851      	adds	r1, r2, r1
 80043fe:	6039      	str	r1, [r7, #0]
 8004400:	4649      	mov	r1, r9
 8004402:	414b      	adcs	r3, r1
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004412:	4659      	mov	r1, fp
 8004414:	00cb      	lsls	r3, r1, #3
 8004416:	4651      	mov	r1, sl
 8004418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441c:	4651      	mov	r1, sl
 800441e:	00ca      	lsls	r2, r1, #3
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	4603      	mov	r3, r0
 8004426:	4642      	mov	r2, r8
 8004428:	189b      	adds	r3, r3, r2
 800442a:	673b      	str	r3, [r7, #112]	@ 0x70
 800442c:	464b      	mov	r3, r9
 800442e:	460a      	mov	r2, r1
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	677b      	str	r3, [r7, #116]	@ 0x74
 8004436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800443a:	2200      	movs	r2, #0
 800443c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800444c:	4649      	mov	r1, r9
 800444e:	008b      	lsls	r3, r1, #2
 8004450:	4641      	mov	r1, r8
 8004452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004456:	4641      	mov	r1, r8
 8004458:	008a      	lsls	r2, r1, #2
 800445a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800445e:	f7fc fbc3 	bl	8000be8 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <LL_USART_SetBaudRate+0x458>)
 8004468:	fba3 1302 	umull	r1, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	2164      	movs	r1, #100	@ 0x64
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	3332      	adds	r3, #50	@ 0x32
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <LL_USART_SetBaudRate+0x458>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b29b      	uxth	r3, r3
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	b29b      	uxth	r3, r3
 800448a:	4423      	add	r3, r4
 800448c:	b29b      	uxth	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004494:	609a      	str	r2, [r3, #8]
}
 8004496:	bf00      	nop
 8004498:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800449c:	46bd      	mov	sp, r7
 800449e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a2:	bf00      	nop
 80044a4:	51eb851f 	.word	0x51eb851f

080044a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fd8c 	bl	8003fd8 <LL_USART_IsEnabled>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d15e      	bne.n	8004584 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80044ce:	f023 030c 	bic.w	r3, r3, #12
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	6851      	ldr	r1, [r2, #4]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68d2      	ldr	r2, [r2, #12]
 80044da:	4311      	orrs	r1, r2
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	6912      	ldr	r2, [r2, #16]
 80044e0:	4311      	orrs	r1, r2
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	6992      	ldr	r2, [r2, #24]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fd83 	bl	8004000 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fd90 	bl	8004026 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fb96 	bl	8003c3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1f      	ldr	r2, [pc, #124]	@ (8004590 <LL_USART_Init+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d102      	bne.n	800451e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e021      	b.n	8004562 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1c      	ldr	r2, [pc, #112]	@ (8004594 <LL_USART_Init+0xec>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d102      	bne.n	800452c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	e01a      	b.n	8004562 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <LL_USART_Init+0xf0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d102      	bne.n	800453a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	e013      	b.n	8004562 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a17      	ldr	r2, [pc, #92]	@ (800459c <LL_USART_Init+0xf4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d102      	bne.n	8004548 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e00c      	b.n	8004562 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <LL_USART_Init+0xf8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d102      	bne.n	8004556 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e005      	b.n	8004562 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a12      	ldr	r2, [pc, #72]	@ (80045a4 <LL_USART_Init+0xfc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004570:	2300      	movs	r3, #0
 8004572:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fd64 	bl	800404c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004584:	7ffb      	ldrb	r3, [r7, #31]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40011000 	.word	0x40011000
 8004594:	40004400 	.word	0x40004400
 8004598:	40004800 	.word	0x40004800
 800459c:	40011400 	.word	0x40011400
 80045a0:	40004c00 	.word	0x40004c00
 80045a4:	40005000 	.word	0x40005000

080045a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4a07      	ldr	r2, [pc, #28]	@ (80045d8 <LL_InitTick+0x30>)
 80045bc:	3b01      	subs	r3, #1
 80045be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <LL_InitTick+0x30>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c6:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <LL_InitTick+0x30>)
 80045c8:	2205      	movs	r2, #5
 80045ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000e010 	.word	0xe000e010

080045dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80045e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ffdd 	bl	80045a8 <LL_InitTick>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004600:	4b0f      	ldr	r3, [pc, #60]	@ (8004640 <LL_mDelay+0x48>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004606:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d00c      	beq.n	800462a <LL_mDelay+0x32>
  {
    Delay++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3301      	adds	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004616:	e008      	b.n	800462a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <LL_mDelay+0x48>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <LL_mDelay+0x32>
    {
      Delay--;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	607b      	str	r3, [r7, #4]
  while (Delay)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f3      	bne.n	8004618 <LL_mDelay+0x20>
    }
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010

08004644 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800464c:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <LL_SetSystemCoreClock+0x1c>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6013      	str	r3, [r2, #0]
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000004 	.word	0x20000004

08004664 <__cvt>:
 8004664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	ec57 6b10 	vmov	r6, r7, d0
 800466c:	2f00      	cmp	r7, #0
 800466e:	460c      	mov	r4, r1
 8004670:	4619      	mov	r1, r3
 8004672:	463b      	mov	r3, r7
 8004674:	bfbb      	ittet	lt
 8004676:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800467a:	461f      	movlt	r7, r3
 800467c:	2300      	movge	r3, #0
 800467e:	232d      	movlt	r3, #45	@ 0x2d
 8004680:	700b      	strb	r3, [r1, #0]
 8004682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004684:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004688:	4691      	mov	r9, r2
 800468a:	f023 0820 	bic.w	r8, r3, #32
 800468e:	bfbc      	itt	lt
 8004690:	4632      	movlt	r2, r6
 8004692:	4616      	movlt	r6, r2
 8004694:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004698:	d005      	beq.n	80046a6 <__cvt+0x42>
 800469a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800469e:	d100      	bne.n	80046a2 <__cvt+0x3e>
 80046a0:	3401      	adds	r4, #1
 80046a2:	2102      	movs	r1, #2
 80046a4:	e000      	b.n	80046a8 <__cvt+0x44>
 80046a6:	2103      	movs	r1, #3
 80046a8:	ab03      	add	r3, sp, #12
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	ab02      	add	r3, sp, #8
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	ec47 6b10 	vmov	d0, r6, r7
 80046b4:	4653      	mov	r3, sl
 80046b6:	4622      	mov	r2, r4
 80046b8:	f000 ff6a 	bl	8005590 <_dtoa_r>
 80046bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046c0:	4605      	mov	r5, r0
 80046c2:	d119      	bne.n	80046f8 <__cvt+0x94>
 80046c4:	f019 0f01 	tst.w	r9, #1
 80046c8:	d00e      	beq.n	80046e8 <__cvt+0x84>
 80046ca:	eb00 0904 	add.w	r9, r0, r4
 80046ce:	2200      	movs	r2, #0
 80046d0:	2300      	movs	r3, #0
 80046d2:	4630      	mov	r0, r6
 80046d4:	4639      	mov	r1, r7
 80046d6:	f7fc fa17 	bl	8000b08 <__aeabi_dcmpeq>
 80046da:	b108      	cbz	r0, 80046e0 <__cvt+0x7c>
 80046dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80046e0:	2230      	movs	r2, #48	@ 0x30
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	454b      	cmp	r3, r9
 80046e6:	d31e      	bcc.n	8004726 <__cvt+0xc2>
 80046e8:	9b03      	ldr	r3, [sp, #12]
 80046ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046ec:	1b5b      	subs	r3, r3, r5
 80046ee:	4628      	mov	r0, r5
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	b004      	add	sp, #16
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046fc:	eb00 0904 	add.w	r9, r0, r4
 8004700:	d1e5      	bne.n	80046ce <__cvt+0x6a>
 8004702:	7803      	ldrb	r3, [r0, #0]
 8004704:	2b30      	cmp	r3, #48	@ 0x30
 8004706:	d10a      	bne.n	800471e <__cvt+0xba>
 8004708:	2200      	movs	r2, #0
 800470a:	2300      	movs	r3, #0
 800470c:	4630      	mov	r0, r6
 800470e:	4639      	mov	r1, r7
 8004710:	f7fc f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 8004714:	b918      	cbnz	r0, 800471e <__cvt+0xba>
 8004716:	f1c4 0401 	rsb	r4, r4, #1
 800471a:	f8ca 4000 	str.w	r4, [sl]
 800471e:	f8da 3000 	ldr.w	r3, [sl]
 8004722:	4499      	add	r9, r3
 8004724:	e7d3      	b.n	80046ce <__cvt+0x6a>
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	9103      	str	r1, [sp, #12]
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e7d9      	b.n	80046e2 <__cvt+0x7e>

0800472e <__exponent>:
 800472e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004730:	2900      	cmp	r1, #0
 8004732:	bfba      	itte	lt
 8004734:	4249      	neglt	r1, r1
 8004736:	232d      	movlt	r3, #45	@ 0x2d
 8004738:	232b      	movge	r3, #43	@ 0x2b
 800473a:	2909      	cmp	r1, #9
 800473c:	7002      	strb	r2, [r0, #0]
 800473e:	7043      	strb	r3, [r0, #1]
 8004740:	dd29      	ble.n	8004796 <__exponent+0x68>
 8004742:	f10d 0307 	add.w	r3, sp, #7
 8004746:	461d      	mov	r5, r3
 8004748:	270a      	movs	r7, #10
 800474a:	461a      	mov	r2, r3
 800474c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004750:	fb07 1416 	mls	r4, r7, r6, r1
 8004754:	3430      	adds	r4, #48	@ 0x30
 8004756:	f802 4c01 	strb.w	r4, [r2, #-1]
 800475a:	460c      	mov	r4, r1
 800475c:	2c63      	cmp	r4, #99	@ 0x63
 800475e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004762:	4631      	mov	r1, r6
 8004764:	dcf1      	bgt.n	800474a <__exponent+0x1c>
 8004766:	3130      	adds	r1, #48	@ 0x30
 8004768:	1e94      	subs	r4, r2, #2
 800476a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800476e:	1c41      	adds	r1, r0, #1
 8004770:	4623      	mov	r3, r4
 8004772:	42ab      	cmp	r3, r5
 8004774:	d30a      	bcc.n	800478c <__exponent+0x5e>
 8004776:	f10d 0309 	add.w	r3, sp, #9
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	42ac      	cmp	r4, r5
 800477e:	bf88      	it	hi
 8004780:	2300      	movhi	r3, #0
 8004782:	3302      	adds	r3, #2
 8004784:	4403      	add	r3, r0
 8004786:	1a18      	subs	r0, r3, r0
 8004788:	b003      	add	sp, #12
 800478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004790:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004794:	e7ed      	b.n	8004772 <__exponent+0x44>
 8004796:	2330      	movs	r3, #48	@ 0x30
 8004798:	3130      	adds	r1, #48	@ 0x30
 800479a:	7083      	strb	r3, [r0, #2]
 800479c:	70c1      	strb	r1, [r0, #3]
 800479e:	1d03      	adds	r3, r0, #4
 80047a0:	e7f1      	b.n	8004786 <__exponent+0x58>
	...

080047a4 <_printf_float>:
 80047a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a8:	b08d      	sub	sp, #52	@ 0x34
 80047aa:	460c      	mov	r4, r1
 80047ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80047b0:	4616      	mov	r6, r2
 80047b2:	461f      	mov	r7, r3
 80047b4:	4605      	mov	r5, r0
 80047b6:	f000 fdbd 	bl	8005334 <_localeconv_r>
 80047ba:	6803      	ldr	r3, [r0, #0]
 80047bc:	9304      	str	r3, [sp, #16]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fb fd76 	bl	80002b0 <strlen>
 80047c4:	2300      	movs	r3, #0
 80047c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047c8:	f8d8 3000 	ldr.w	r3, [r8]
 80047cc:	9005      	str	r0, [sp, #20]
 80047ce:	3307      	adds	r3, #7
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	f103 0208 	add.w	r2, r3, #8
 80047d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047dc:	f8d4 b000 	ldr.w	fp, [r4]
 80047e0:	f8c8 2000 	str.w	r2, [r8]
 80047e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80047ec:	9307      	str	r3, [sp, #28]
 80047ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80047f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80047f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047fa:	4b9c      	ldr	r3, [pc, #624]	@ (8004a6c <_printf_float+0x2c8>)
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	f7fc f9b4 	bl	8000b6c <__aeabi_dcmpun>
 8004804:	bb70      	cbnz	r0, 8004864 <_printf_float+0xc0>
 8004806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480a:	4b98      	ldr	r3, [pc, #608]	@ (8004a6c <_printf_float+0x2c8>)
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	f7fc f98e 	bl	8000b30 <__aeabi_dcmple>
 8004814:	bb30      	cbnz	r0, 8004864 <_printf_float+0xc0>
 8004816:	2200      	movs	r2, #0
 8004818:	2300      	movs	r3, #0
 800481a:	4640      	mov	r0, r8
 800481c:	4649      	mov	r1, r9
 800481e:	f7fc f97d 	bl	8000b1c <__aeabi_dcmplt>
 8004822:	b110      	cbz	r0, 800482a <_printf_float+0x86>
 8004824:	232d      	movs	r3, #45	@ 0x2d
 8004826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800482a:	4a91      	ldr	r2, [pc, #580]	@ (8004a70 <_printf_float+0x2cc>)
 800482c:	4b91      	ldr	r3, [pc, #580]	@ (8004a74 <_printf_float+0x2d0>)
 800482e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004832:	bf8c      	ite	hi
 8004834:	4690      	movhi	r8, r2
 8004836:	4698      	movls	r8, r3
 8004838:	2303      	movs	r3, #3
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	f02b 0304 	bic.w	r3, fp, #4
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	f04f 0900 	mov.w	r9, #0
 8004846:	9700      	str	r7, [sp, #0]
 8004848:	4633      	mov	r3, r6
 800484a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800484c:	4621      	mov	r1, r4
 800484e:	4628      	mov	r0, r5
 8004850:	f000 f9d2 	bl	8004bf8 <_printf_common>
 8004854:	3001      	adds	r0, #1
 8004856:	f040 808d 	bne.w	8004974 <_printf_float+0x1d0>
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	b00d      	add	sp, #52	@ 0x34
 8004860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	4640      	mov	r0, r8
 800486a:	4649      	mov	r1, r9
 800486c:	f7fc f97e 	bl	8000b6c <__aeabi_dcmpun>
 8004870:	b140      	cbz	r0, 8004884 <_printf_float+0xe0>
 8004872:	464b      	mov	r3, r9
 8004874:	2b00      	cmp	r3, #0
 8004876:	bfbc      	itt	lt
 8004878:	232d      	movlt	r3, #45	@ 0x2d
 800487a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800487e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a78 <_printf_float+0x2d4>)
 8004880:	4b7e      	ldr	r3, [pc, #504]	@ (8004a7c <_printf_float+0x2d8>)
 8004882:	e7d4      	b.n	800482e <_printf_float+0x8a>
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800488a:	9206      	str	r2, [sp, #24]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	d13b      	bne.n	8004908 <_printf_float+0x164>
 8004890:	2306      	movs	r3, #6
 8004892:	6063      	str	r3, [r4, #4]
 8004894:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004898:	2300      	movs	r3, #0
 800489a:	6022      	str	r2, [r4, #0]
 800489c:	9303      	str	r3, [sp, #12]
 800489e:	ab0a      	add	r3, sp, #40	@ 0x28
 80048a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80048a4:	ab09      	add	r3, sp, #36	@ 0x24
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	6861      	ldr	r1, [r4, #4]
 80048aa:	ec49 8b10 	vmov	d0, r8, r9
 80048ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7ff fed6 	bl	8004664 <__cvt>
 80048b8:	9b06      	ldr	r3, [sp, #24]
 80048ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048bc:	2b47      	cmp	r3, #71	@ 0x47
 80048be:	4680      	mov	r8, r0
 80048c0:	d129      	bne.n	8004916 <_printf_float+0x172>
 80048c2:	1cc8      	adds	r0, r1, #3
 80048c4:	db02      	blt.n	80048cc <_printf_float+0x128>
 80048c6:	6863      	ldr	r3, [r4, #4]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	dd41      	ble.n	8004950 <_printf_float+0x1ac>
 80048cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80048d0:	fa5f fa8a 	uxtb.w	sl, sl
 80048d4:	3901      	subs	r1, #1
 80048d6:	4652      	mov	r2, sl
 80048d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80048dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80048de:	f7ff ff26 	bl	800472e <__exponent>
 80048e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048e4:	1813      	adds	r3, r2, r0
 80048e6:	2a01      	cmp	r2, #1
 80048e8:	4681      	mov	r9, r0
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	dc02      	bgt.n	80048f4 <_printf_float+0x150>
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	07d2      	lsls	r2, r2, #31
 80048f2:	d501      	bpl.n	80048f8 <_printf_float+0x154>
 80048f4:	3301      	adds	r3, #1
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0a2      	beq.n	8004846 <_printf_float+0xa2>
 8004900:	232d      	movs	r3, #45	@ 0x2d
 8004902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004906:	e79e      	b.n	8004846 <_printf_float+0xa2>
 8004908:	9a06      	ldr	r2, [sp, #24]
 800490a:	2a47      	cmp	r2, #71	@ 0x47
 800490c:	d1c2      	bne.n	8004894 <_printf_float+0xf0>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1c0      	bne.n	8004894 <_printf_float+0xf0>
 8004912:	2301      	movs	r3, #1
 8004914:	e7bd      	b.n	8004892 <_printf_float+0xee>
 8004916:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800491a:	d9db      	bls.n	80048d4 <_printf_float+0x130>
 800491c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004920:	d118      	bne.n	8004954 <_printf_float+0x1b0>
 8004922:	2900      	cmp	r1, #0
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	dd0b      	ble.n	8004940 <_printf_float+0x19c>
 8004928:	6121      	str	r1, [r4, #16]
 800492a:	b913      	cbnz	r3, 8004932 <_printf_float+0x18e>
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	07d0      	lsls	r0, r2, #31
 8004930:	d502      	bpl.n	8004938 <_printf_float+0x194>
 8004932:	3301      	adds	r3, #1
 8004934:	440b      	add	r3, r1
 8004936:	6123      	str	r3, [r4, #16]
 8004938:	65a1      	str	r1, [r4, #88]	@ 0x58
 800493a:	f04f 0900 	mov.w	r9, #0
 800493e:	e7db      	b.n	80048f8 <_printf_float+0x154>
 8004940:	b913      	cbnz	r3, 8004948 <_printf_float+0x1a4>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	07d2      	lsls	r2, r2, #31
 8004946:	d501      	bpl.n	800494c <_printf_float+0x1a8>
 8004948:	3302      	adds	r3, #2
 800494a:	e7f4      	b.n	8004936 <_printf_float+0x192>
 800494c:	2301      	movs	r3, #1
 800494e:	e7f2      	b.n	8004936 <_printf_float+0x192>
 8004950:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004956:	4299      	cmp	r1, r3
 8004958:	db05      	blt.n	8004966 <_printf_float+0x1c2>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	6121      	str	r1, [r4, #16]
 800495e:	07d8      	lsls	r0, r3, #31
 8004960:	d5ea      	bpl.n	8004938 <_printf_float+0x194>
 8004962:	1c4b      	adds	r3, r1, #1
 8004964:	e7e7      	b.n	8004936 <_printf_float+0x192>
 8004966:	2900      	cmp	r1, #0
 8004968:	bfd4      	ite	le
 800496a:	f1c1 0202 	rsble	r2, r1, #2
 800496e:	2201      	movgt	r2, #1
 8004970:	4413      	add	r3, r2
 8004972:	e7e0      	b.n	8004936 <_printf_float+0x192>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	055a      	lsls	r2, r3, #21
 8004978:	d407      	bmi.n	800498a <_printf_float+0x1e6>
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	4642      	mov	r2, r8
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	47b8      	blx	r7
 8004984:	3001      	adds	r0, #1
 8004986:	d12b      	bne.n	80049e0 <_printf_float+0x23c>
 8004988:	e767      	b.n	800485a <_printf_float+0xb6>
 800498a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800498e:	f240 80dd 	bls.w	8004b4c <_printf_float+0x3a8>
 8004992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004996:	2200      	movs	r2, #0
 8004998:	2300      	movs	r3, #0
 800499a:	f7fc f8b5 	bl	8000b08 <__aeabi_dcmpeq>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d033      	beq.n	8004a0a <_printf_float+0x266>
 80049a2:	4a37      	ldr	r2, [pc, #220]	@ (8004a80 <_printf_float+0x2dc>)
 80049a4:	2301      	movs	r3, #1
 80049a6:	4631      	mov	r1, r6
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b8      	blx	r7
 80049ac:	3001      	adds	r0, #1
 80049ae:	f43f af54 	beq.w	800485a <_printf_float+0xb6>
 80049b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049b6:	4543      	cmp	r3, r8
 80049b8:	db02      	blt.n	80049c0 <_printf_float+0x21c>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	07d8      	lsls	r0, r3, #31
 80049be:	d50f      	bpl.n	80049e0 <_printf_float+0x23c>
 80049c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049c4:	4631      	mov	r1, r6
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b8      	blx	r7
 80049ca:	3001      	adds	r0, #1
 80049cc:	f43f af45 	beq.w	800485a <_printf_float+0xb6>
 80049d0:	f04f 0900 	mov.w	r9, #0
 80049d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80049d8:	f104 0a1a 	add.w	sl, r4, #26
 80049dc:	45c8      	cmp	r8, r9
 80049de:	dc09      	bgt.n	80049f4 <_printf_float+0x250>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	079b      	lsls	r3, r3, #30
 80049e4:	f100 8103 	bmi.w	8004bee <_printf_float+0x44a>
 80049e8:	68e0      	ldr	r0, [r4, #12]
 80049ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049ec:	4298      	cmp	r0, r3
 80049ee:	bfb8      	it	lt
 80049f0:	4618      	movlt	r0, r3
 80049f2:	e734      	b.n	800485e <_printf_float+0xba>
 80049f4:	2301      	movs	r3, #1
 80049f6:	4652      	mov	r2, sl
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f af2b 	beq.w	800485a <_printf_float+0xb6>
 8004a04:	f109 0901 	add.w	r9, r9, #1
 8004a08:	e7e8      	b.n	80049dc <_printf_float+0x238>
 8004a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dc39      	bgt.n	8004a84 <_printf_float+0x2e0>
 8004a10:	4a1b      	ldr	r2, [pc, #108]	@ (8004a80 <_printf_float+0x2dc>)
 8004a12:	2301      	movs	r3, #1
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f af1d 	beq.w	800485a <_printf_float+0xb6>
 8004a20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a24:	ea59 0303 	orrs.w	r3, r9, r3
 8004a28:	d102      	bne.n	8004a30 <_printf_float+0x28c>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	07d9      	lsls	r1, r3, #31
 8004a2e:	d5d7      	bpl.n	80049e0 <_printf_float+0x23c>
 8004a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f af0d 	beq.w	800485a <_printf_float+0xb6>
 8004a40:	f04f 0a00 	mov.w	sl, #0
 8004a44:	f104 0b1a 	add.w	fp, r4, #26
 8004a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a4a:	425b      	negs	r3, r3
 8004a4c:	4553      	cmp	r3, sl
 8004a4e:	dc01      	bgt.n	8004a54 <_printf_float+0x2b0>
 8004a50:	464b      	mov	r3, r9
 8004a52:	e793      	b.n	800497c <_printf_float+0x1d8>
 8004a54:	2301      	movs	r3, #1
 8004a56:	465a      	mov	r2, fp
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f aefb 	beq.w	800485a <_printf_float+0xb6>
 8004a64:	f10a 0a01 	add.w	sl, sl, #1
 8004a68:	e7ee      	b.n	8004a48 <_printf_float+0x2a4>
 8004a6a:	bf00      	nop
 8004a6c:	7fefffff 	.word	0x7fefffff
 8004a70:	08007154 	.word	0x08007154
 8004a74:	08007150 	.word	0x08007150
 8004a78:	0800715c 	.word	0x0800715c
 8004a7c:	08007158 	.word	0x08007158
 8004a80:	08007160 	.word	0x08007160
 8004a84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a8a:	4553      	cmp	r3, sl
 8004a8c:	bfa8      	it	ge
 8004a8e:	4653      	movge	r3, sl
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	4699      	mov	r9, r3
 8004a94:	dc36      	bgt.n	8004b04 <_printf_float+0x360>
 8004a96:	f04f 0b00 	mov.w	fp, #0
 8004a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a9e:	f104 021a 	add.w	r2, r4, #26
 8004aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004aa4:	9306      	str	r3, [sp, #24]
 8004aa6:	eba3 0309 	sub.w	r3, r3, r9
 8004aaa:	455b      	cmp	r3, fp
 8004aac:	dc31      	bgt.n	8004b12 <_printf_float+0x36e>
 8004aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab0:	459a      	cmp	sl, r3
 8004ab2:	dc3a      	bgt.n	8004b2a <_printf_float+0x386>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	07da      	lsls	r2, r3, #31
 8004ab8:	d437      	bmi.n	8004b2a <_printf_float+0x386>
 8004aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004abc:	ebaa 0903 	sub.w	r9, sl, r3
 8004ac0:	9b06      	ldr	r3, [sp, #24]
 8004ac2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ac6:	4599      	cmp	r9, r3
 8004ac8:	bfa8      	it	ge
 8004aca:	4699      	movge	r9, r3
 8004acc:	f1b9 0f00 	cmp.w	r9, #0
 8004ad0:	dc33      	bgt.n	8004b3a <_printf_float+0x396>
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ada:	f104 0b1a 	add.w	fp, r4, #26
 8004ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ae4:	eba3 0309 	sub.w	r3, r3, r9
 8004ae8:	4543      	cmp	r3, r8
 8004aea:	f77f af79 	ble.w	80049e0 <_printf_float+0x23c>
 8004aee:	2301      	movs	r3, #1
 8004af0:	465a      	mov	r2, fp
 8004af2:	4631      	mov	r1, r6
 8004af4:	4628      	mov	r0, r5
 8004af6:	47b8      	blx	r7
 8004af8:	3001      	adds	r0, #1
 8004afa:	f43f aeae 	beq.w	800485a <_printf_float+0xb6>
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	e7ec      	b.n	8004ade <_printf_float+0x33a>
 8004b04:	4642      	mov	r2, r8
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d1c2      	bne.n	8004a96 <_printf_float+0x2f2>
 8004b10:	e6a3      	b.n	800485a <_printf_float+0xb6>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	9206      	str	r2, [sp, #24]
 8004b1a:	47b8      	blx	r7
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f43f ae9c 	beq.w	800485a <_printf_float+0xb6>
 8004b22:	9a06      	ldr	r2, [sp, #24]
 8004b24:	f10b 0b01 	add.w	fp, fp, #1
 8004b28:	e7bb      	b.n	8004aa2 <_printf_float+0x2fe>
 8004b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b8      	blx	r7
 8004b34:	3001      	adds	r0, #1
 8004b36:	d1c0      	bne.n	8004aba <_printf_float+0x316>
 8004b38:	e68f      	b.n	800485a <_printf_float+0xb6>
 8004b3a:	9a06      	ldr	r2, [sp, #24]
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	4442      	add	r2, r8
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	d1c3      	bne.n	8004ad2 <_printf_float+0x32e>
 8004b4a:	e686      	b.n	800485a <_printf_float+0xb6>
 8004b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b50:	f1ba 0f01 	cmp.w	sl, #1
 8004b54:	dc01      	bgt.n	8004b5a <_printf_float+0x3b6>
 8004b56:	07db      	lsls	r3, r3, #31
 8004b58:	d536      	bpl.n	8004bc8 <_printf_float+0x424>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae78 	beq.w	800485a <_printf_float+0xb6>
 8004b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b8      	blx	r7
 8004b74:	3001      	adds	r0, #1
 8004b76:	f43f ae70 	beq.w	800485a <_printf_float+0xb6>
 8004b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2300      	movs	r3, #0
 8004b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b86:	f7fb ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 8004b8a:	b9c0      	cbnz	r0, 8004bbe <_printf_float+0x41a>
 8004b8c:	4653      	mov	r3, sl
 8004b8e:	f108 0201 	add.w	r2, r8, #1
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d10c      	bne.n	8004bb6 <_printf_float+0x412>
 8004b9c:	e65d      	b.n	800485a <_printf_float+0xb6>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	465a      	mov	r2, fp
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f ae56 	beq.w	800485a <_printf_float+0xb6>
 8004bae:	f108 0801 	add.w	r8, r8, #1
 8004bb2:	45d0      	cmp	r8, sl
 8004bb4:	dbf3      	blt.n	8004b9e <_printf_float+0x3fa>
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bbc:	e6df      	b.n	800497e <_printf_float+0x1da>
 8004bbe:	f04f 0800 	mov.w	r8, #0
 8004bc2:	f104 0b1a 	add.w	fp, r4, #26
 8004bc6:	e7f4      	b.n	8004bb2 <_printf_float+0x40e>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4642      	mov	r2, r8
 8004bcc:	e7e1      	b.n	8004b92 <_printf_float+0x3ee>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	464a      	mov	r2, r9
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	f43f ae3e 	beq.w	800485a <_printf_float+0xb6>
 8004bde:	f108 0801 	add.w	r8, r8, #1
 8004be2:	68e3      	ldr	r3, [r4, #12]
 8004be4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004be6:	1a5b      	subs	r3, r3, r1
 8004be8:	4543      	cmp	r3, r8
 8004bea:	dcf0      	bgt.n	8004bce <_printf_float+0x42a>
 8004bec:	e6fc      	b.n	80049e8 <_printf_float+0x244>
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	f104 0919 	add.w	r9, r4, #25
 8004bf6:	e7f4      	b.n	8004be2 <_printf_float+0x43e>

08004bf8 <_printf_common>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	4698      	mov	r8, r3
 8004c00:	688a      	ldr	r2, [r1, #8]
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bfb8      	it	lt
 8004c0c:	4613      	movlt	r3, r2
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c14:	4607      	mov	r7, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b10a      	cbz	r2, 8004c1e <_printf_common+0x26>
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	6033      	str	r3, [r6, #0]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	0699      	lsls	r1, r3, #26
 8004c22:	bf42      	ittt	mi
 8004c24:	6833      	ldrmi	r3, [r6, #0]
 8004c26:	3302      	addmi	r3, #2
 8004c28:	6033      	strmi	r3, [r6, #0]
 8004c2a:	6825      	ldr	r5, [r4, #0]
 8004c2c:	f015 0506 	ands.w	r5, r5, #6
 8004c30:	d106      	bne.n	8004c40 <_printf_common+0x48>
 8004c32:	f104 0a19 	add.w	sl, r4, #25
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	6832      	ldr	r2, [r6, #0]
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	42ab      	cmp	r3, r5
 8004c3e:	dc26      	bgt.n	8004c8e <_printf_common+0x96>
 8004c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	3b00      	subs	r3, #0
 8004c48:	bf18      	it	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	0692      	lsls	r2, r2, #26
 8004c4e:	d42b      	bmi.n	8004ca8 <_printf_common+0xb0>
 8004c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c54:	4641      	mov	r1, r8
 8004c56:	4638      	mov	r0, r7
 8004c58:	47c8      	blx	r9
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d01e      	beq.n	8004c9c <_printf_common+0xa4>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	6922      	ldr	r2, [r4, #16]
 8004c62:	f003 0306 	and.w	r3, r3, #6
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf02      	ittt	eq
 8004c6a:	68e5      	ldreq	r5, [r4, #12]
 8004c6c:	6833      	ldreq	r3, [r6, #0]
 8004c6e:	1aed      	subeq	r5, r5, r3
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	bf0c      	ite	eq
 8004c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c78:	2500      	movne	r5, #0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bfc4      	itt	gt
 8004c7e:	1a9b      	subgt	r3, r3, r2
 8004c80:	18ed      	addgt	r5, r5, r3
 8004c82:	2600      	movs	r6, #0
 8004c84:	341a      	adds	r4, #26
 8004c86:	42b5      	cmp	r5, r6
 8004c88:	d11a      	bne.n	8004cc0 <_printf_common+0xc8>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e008      	b.n	8004ca0 <_printf_common+0xa8>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4652      	mov	r2, sl
 8004c92:	4641      	mov	r1, r8
 8004c94:	4638      	mov	r0, r7
 8004c96:	47c8      	blx	r9
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d103      	bne.n	8004ca4 <_printf_common+0xac>
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	e7c6      	b.n	8004c36 <_printf_common+0x3e>
 8004ca8:	18e1      	adds	r1, r4, r3
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	2030      	movs	r0, #48	@ 0x30
 8004cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cb2:	4422      	add	r2, r4
 8004cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	e7c7      	b.n	8004c50 <_printf_common+0x58>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c8      	blx	r9
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d0e6      	beq.n	8004c9c <_printf_common+0xa4>
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7d9      	b.n	8004c86 <_printf_common+0x8e>
	...

08004cd4 <_printf_i>:
 8004cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	7e0f      	ldrb	r7, [r1, #24]
 8004cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cdc:	2f78      	cmp	r7, #120	@ 0x78
 8004cde:	4691      	mov	r9, r2
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	469a      	mov	sl, r3
 8004ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cea:	d807      	bhi.n	8004cfc <_printf_i+0x28>
 8004cec:	2f62      	cmp	r7, #98	@ 0x62
 8004cee:	d80a      	bhi.n	8004d06 <_printf_i+0x32>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f000 80d1 	beq.w	8004e98 <_printf_i+0x1c4>
 8004cf6:	2f58      	cmp	r7, #88	@ 0x58
 8004cf8:	f000 80b8 	beq.w	8004e6c <_printf_i+0x198>
 8004cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d04:	e03a      	b.n	8004d7c <_printf_i+0xa8>
 8004d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d0a:	2b15      	cmp	r3, #21
 8004d0c:	d8f6      	bhi.n	8004cfc <_printf_i+0x28>
 8004d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d14 <_printf_i+0x40>)
 8004d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	08004cfd 	.word	0x08004cfd
 8004d20:	08004cfd 	.word	0x08004cfd
 8004d24:	08004cfd 	.word	0x08004cfd
 8004d28:	08004cfd 	.word	0x08004cfd
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004cfd 	.word	0x08004cfd
 8004d34:	08004cfd 	.word	0x08004cfd
 8004d38:	08004cfd 	.word	0x08004cfd
 8004d3c:	08004cfd 	.word	0x08004cfd
 8004d40:	08004e7f 	.word	0x08004e7f
 8004d44:	08004dab 	.word	0x08004dab
 8004d48:	08004e39 	.word	0x08004e39
 8004d4c:	08004cfd 	.word	0x08004cfd
 8004d50:	08004cfd 	.word	0x08004cfd
 8004d54:	08004ea1 	.word	0x08004ea1
 8004d58:	08004cfd 	.word	0x08004cfd
 8004d5c:	08004dab 	.word	0x08004dab
 8004d60:	08004cfd 	.word	0x08004cfd
 8004d64:	08004cfd 	.word	0x08004cfd
 8004d68:	08004e41 	.word	0x08004e41
 8004d6c:	6833      	ldr	r3, [r6, #0]
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6032      	str	r2, [r6, #0]
 8004d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e09c      	b.n	8004eba <_printf_i+0x1e6>
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	1d19      	adds	r1, r3, #4
 8004d86:	6031      	str	r1, [r6, #0]
 8004d88:	0606      	lsls	r6, r0, #24
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0xbc>
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	e003      	b.n	8004d98 <_printf_i+0xc4>
 8004d90:	0645      	lsls	r5, r0, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0xb8>
 8004d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	da03      	bge.n	8004da4 <_printf_i+0xd0>
 8004d9c:	232d      	movs	r3, #45	@ 0x2d
 8004d9e:	426d      	negs	r5, r5
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da4:	4858      	ldr	r0, [pc, #352]	@ (8004f08 <_printf_i+0x234>)
 8004da6:	230a      	movs	r3, #10
 8004da8:	e011      	b.n	8004dce <_printf_i+0xfa>
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	0608      	lsls	r0, r1, #24
 8004db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004db4:	d402      	bmi.n	8004dbc <_printf_i+0xe8>
 8004db6:	0649      	lsls	r1, r1, #25
 8004db8:	bf48      	it	mi
 8004dba:	b2ad      	uxthmi	r5, r5
 8004dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dbe:	4852      	ldr	r0, [pc, #328]	@ (8004f08 <_printf_i+0x234>)
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	bf14      	ite	ne
 8004dc4:	230a      	movne	r3, #10
 8004dc6:	2308      	moveq	r3, #8
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dce:	6866      	ldr	r6, [r4, #4]
 8004dd0:	60a6      	str	r6, [r4, #8]
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	db05      	blt.n	8004de2 <_printf_i+0x10e>
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	432e      	orrs	r6, r5
 8004dda:	f021 0104 	bic.w	r1, r1, #4
 8004dde:	6021      	str	r1, [r4, #0]
 8004de0:	d04b      	beq.n	8004e7a <_printf_i+0x1a6>
 8004de2:	4616      	mov	r6, r2
 8004de4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004de8:	fb03 5711 	mls	r7, r3, r1, r5
 8004dec:	5dc7      	ldrb	r7, [r0, r7]
 8004dee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004df2:	462f      	mov	r7, r5
 8004df4:	42bb      	cmp	r3, r7
 8004df6:	460d      	mov	r5, r1
 8004df8:	d9f4      	bls.n	8004de4 <_printf_i+0x110>
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d10b      	bne.n	8004e16 <_printf_i+0x142>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	07df      	lsls	r7, r3, #31
 8004e02:	d508      	bpl.n	8004e16 <_printf_i+0x142>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6861      	ldr	r1, [r4, #4]
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	bfde      	ittt	le
 8004e0c:	2330      	movle	r3, #48	@ 0x30
 8004e0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e16:	1b92      	subs	r2, r2, r6
 8004e18:	6122      	str	r2, [r4, #16]
 8004e1a:	f8cd a000 	str.w	sl, [sp]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	aa03      	add	r2, sp, #12
 8004e22:	4621      	mov	r1, r4
 8004e24:	4640      	mov	r0, r8
 8004e26:	f7ff fee7 	bl	8004bf8 <_printf_common>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d14a      	bne.n	8004ec4 <_printf_i+0x1f0>
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e32:	b004      	add	sp, #16
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	f043 0320 	orr.w	r3, r3, #32
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	4832      	ldr	r0, [pc, #200]	@ (8004f0c <_printf_i+0x238>)
 8004e42:	2778      	movs	r7, #120	@ 0x78
 8004e44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	6831      	ldr	r1, [r6, #0]
 8004e4c:	061f      	lsls	r7, r3, #24
 8004e4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e52:	d402      	bmi.n	8004e5a <_printf_i+0x186>
 8004e54:	065f      	lsls	r7, r3, #25
 8004e56:	bf48      	it	mi
 8004e58:	b2ad      	uxthmi	r5, r5
 8004e5a:	6031      	str	r1, [r6, #0]
 8004e5c:	07d9      	lsls	r1, r3, #31
 8004e5e:	bf44      	itt	mi
 8004e60:	f043 0320 	orrmi.w	r3, r3, #32
 8004e64:	6023      	strmi	r3, [r4, #0]
 8004e66:	b11d      	cbz	r5, 8004e70 <_printf_i+0x19c>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	e7ad      	b.n	8004dc8 <_printf_i+0xf4>
 8004e6c:	4826      	ldr	r0, [pc, #152]	@ (8004f08 <_printf_i+0x234>)
 8004e6e:	e7e9      	b.n	8004e44 <_printf_i+0x170>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	f023 0320 	bic.w	r3, r3, #32
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	e7f6      	b.n	8004e68 <_printf_i+0x194>
 8004e7a:	4616      	mov	r6, r2
 8004e7c:	e7bd      	b.n	8004dfa <_printf_i+0x126>
 8004e7e:	6833      	ldr	r3, [r6, #0]
 8004e80:	6825      	ldr	r5, [r4, #0]
 8004e82:	6961      	ldr	r1, [r4, #20]
 8004e84:	1d18      	adds	r0, r3, #4
 8004e86:	6030      	str	r0, [r6, #0]
 8004e88:	062e      	lsls	r6, r5, #24
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	d501      	bpl.n	8004e92 <_printf_i+0x1be>
 8004e8e:	6019      	str	r1, [r3, #0]
 8004e90:	e002      	b.n	8004e98 <_printf_i+0x1c4>
 8004e92:	0668      	lsls	r0, r5, #25
 8004e94:	d5fb      	bpl.n	8004e8e <_printf_i+0x1ba>
 8004e96:	8019      	strh	r1, [r3, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6123      	str	r3, [r4, #16]
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	e7bc      	b.n	8004e1a <_printf_i+0x146>
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	6032      	str	r2, [r6, #0]
 8004ea6:	681e      	ldr	r6, [r3, #0]
 8004ea8:	6862      	ldr	r2, [r4, #4]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7fb f9af 	bl	8000210 <memchr>
 8004eb2:	b108      	cbz	r0, 8004eb8 <_printf_i+0x1e4>
 8004eb4:	1b80      	subs	r0, r0, r6
 8004eb6:	6060      	str	r0, [r4, #4]
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	6123      	str	r3, [r4, #16]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec2:	e7aa      	b.n	8004e1a <_printf_i+0x146>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	4649      	mov	r1, r9
 8004eca:	4640      	mov	r0, r8
 8004ecc:	47d0      	blx	sl
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d0ad      	beq.n	8004e2e <_printf_i+0x15a>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	079b      	lsls	r3, r3, #30
 8004ed6:	d413      	bmi.n	8004f00 <_printf_i+0x22c>
 8004ed8:	68e0      	ldr	r0, [r4, #12]
 8004eda:	9b03      	ldr	r3, [sp, #12]
 8004edc:	4298      	cmp	r0, r3
 8004ede:	bfb8      	it	lt
 8004ee0:	4618      	movlt	r0, r3
 8004ee2:	e7a6      	b.n	8004e32 <_printf_i+0x15e>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	4649      	mov	r1, r9
 8004eea:	4640      	mov	r0, r8
 8004eec:	47d0      	blx	sl
 8004eee:	3001      	adds	r0, #1
 8004ef0:	d09d      	beq.n	8004e2e <_printf_i+0x15a>
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	68e3      	ldr	r3, [r4, #12]
 8004ef6:	9903      	ldr	r1, [sp, #12]
 8004ef8:	1a5b      	subs	r3, r3, r1
 8004efa:	42ab      	cmp	r3, r5
 8004efc:	dcf2      	bgt.n	8004ee4 <_printf_i+0x210>
 8004efe:	e7eb      	b.n	8004ed8 <_printf_i+0x204>
 8004f00:	2500      	movs	r5, #0
 8004f02:	f104 0619 	add.w	r6, r4, #25
 8004f06:	e7f5      	b.n	8004ef4 <_printf_i+0x220>
 8004f08:	08007162 	.word	0x08007162
 8004f0c:	08007173 	.word	0x08007173

08004f10 <std>:
 8004f10:	2300      	movs	r3, #0
 8004f12:	b510      	push	{r4, lr}
 8004f14:	4604      	mov	r4, r0
 8004f16:	e9c0 3300 	strd	r3, r3, [r0]
 8004f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1e:	6083      	str	r3, [r0, #8]
 8004f20:	8181      	strh	r1, [r0, #12]
 8004f22:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f24:	81c2      	strh	r2, [r0, #14]
 8004f26:	6183      	str	r3, [r0, #24]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	305c      	adds	r0, #92	@ 0x5c
 8004f2e:	f000 f9f9 	bl	8005324 <memset>
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <std+0x58>)
 8004f34:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <std+0x5c>)
 8004f38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x60>)
 8004f3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x64>)
 8004f40:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x68>)
 8004f44:	6224      	str	r4, [r4, #32]
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d006      	beq.n	8004f58 <std+0x48>
 8004f4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f4e:	4294      	cmp	r4, r2
 8004f50:	d002      	beq.n	8004f58 <std+0x48>
 8004f52:	33d0      	adds	r3, #208	@ 0xd0
 8004f54:	429c      	cmp	r4, r3
 8004f56:	d105      	bne.n	8004f64 <std+0x54>
 8004f58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f60:	f000 ba5c 	b.w	800541c <__retarget_lock_init_recursive>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	bf00      	nop
 8004f68:	08005175 	.word	0x08005175
 8004f6c:	08005197 	.word	0x08005197
 8004f70:	080051cf 	.word	0x080051cf
 8004f74:	080051f3 	.word	0x080051f3
 8004f78:	20000850 	.word	0x20000850

08004f7c <stdio_exit_handler>:
 8004f7c:	4a02      	ldr	r2, [pc, #8]	@ (8004f88 <stdio_exit_handler+0xc>)
 8004f7e:	4903      	ldr	r1, [pc, #12]	@ (8004f8c <stdio_exit_handler+0x10>)
 8004f80:	4803      	ldr	r0, [pc, #12]	@ (8004f90 <stdio_exit_handler+0x14>)
 8004f82:	f000 b869 	b.w	8005058 <_fwalk_sglue>
 8004f86:	bf00      	nop
 8004f88:	20000008 	.word	0x20000008
 8004f8c:	08006ded 	.word	0x08006ded
 8004f90:	20000184 	.word	0x20000184

08004f94 <cleanup_stdio>:
 8004f94:	6841      	ldr	r1, [r0, #4]
 8004f96:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <cleanup_stdio+0x34>)
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	d001      	beq.n	8004fa4 <cleanup_stdio+0x10>
 8004fa0:	f001 ff24 	bl	8006dec <_fflush_r>
 8004fa4:	68a1      	ldr	r1, [r4, #8]
 8004fa6:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <cleanup_stdio+0x38>)
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	d002      	beq.n	8004fb2 <cleanup_stdio+0x1e>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f001 ff1d 	bl	8006dec <_fflush_r>
 8004fb2:	68e1      	ldr	r1, [r4, #12]
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <cleanup_stdio+0x3c>)
 8004fb6:	4299      	cmp	r1, r3
 8004fb8:	d004      	beq.n	8004fc4 <cleanup_stdio+0x30>
 8004fba:	4620      	mov	r0, r4
 8004fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc0:	f001 bf14 	b.w	8006dec <_fflush_r>
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000850 	.word	0x20000850
 8004fcc:	200008b8 	.word	0x200008b8
 8004fd0:	20000920 	.word	0x20000920

08004fd4 <global_stdio_init.part.0>:
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <global_stdio_init.part.0+0x30>)
 8004fd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005008 <global_stdio_init.part.0+0x34>)
 8004fda:	4a0c      	ldr	r2, [pc, #48]	@ (800500c <global_stdio_init.part.0+0x38>)
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	f7ff ff94 	bl	8004f10 <std>
 8004fe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004fec:	2201      	movs	r2, #1
 8004fee:	2109      	movs	r1, #9
 8004ff0:	f7ff ff8e 	bl	8004f10 <std>
 8004ff4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffe:	2112      	movs	r1, #18
 8005000:	f7ff bf86 	b.w	8004f10 <std>
 8005004:	20000988 	.word	0x20000988
 8005008:	20000850 	.word	0x20000850
 800500c:	08004f7d 	.word	0x08004f7d

08005010 <__sfp_lock_acquire>:
 8005010:	4801      	ldr	r0, [pc, #4]	@ (8005018 <__sfp_lock_acquire+0x8>)
 8005012:	f000 ba04 	b.w	800541e <__retarget_lock_acquire_recursive>
 8005016:	bf00      	nop
 8005018:	20000991 	.word	0x20000991

0800501c <__sfp_lock_release>:
 800501c:	4801      	ldr	r0, [pc, #4]	@ (8005024 <__sfp_lock_release+0x8>)
 800501e:	f000 b9ff 	b.w	8005420 <__retarget_lock_release_recursive>
 8005022:	bf00      	nop
 8005024:	20000991 	.word	0x20000991

08005028 <__sinit>:
 8005028:	b510      	push	{r4, lr}
 800502a:	4604      	mov	r4, r0
 800502c:	f7ff fff0 	bl	8005010 <__sfp_lock_acquire>
 8005030:	6a23      	ldr	r3, [r4, #32]
 8005032:	b11b      	cbz	r3, 800503c <__sinit+0x14>
 8005034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005038:	f7ff bff0 	b.w	800501c <__sfp_lock_release>
 800503c:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <__sinit+0x28>)
 800503e:	6223      	str	r3, [r4, #32]
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <__sinit+0x2c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f5      	bne.n	8005034 <__sinit+0xc>
 8005048:	f7ff ffc4 	bl	8004fd4 <global_stdio_init.part.0>
 800504c:	e7f2      	b.n	8005034 <__sinit+0xc>
 800504e:	bf00      	nop
 8005050:	08004f95 	.word	0x08004f95
 8005054:	20000988 	.word	0x20000988

08005058 <_fwalk_sglue>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4607      	mov	r7, r0
 800505e:	4688      	mov	r8, r1
 8005060:	4614      	mov	r4, r2
 8005062:	2600      	movs	r6, #0
 8005064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005068:	f1b9 0901 	subs.w	r9, r9, #1
 800506c:	d505      	bpl.n	800507a <_fwalk_sglue+0x22>
 800506e:	6824      	ldr	r4, [r4, #0]
 8005070:	2c00      	cmp	r4, #0
 8005072:	d1f7      	bne.n	8005064 <_fwalk_sglue+0xc>
 8005074:	4630      	mov	r0, r6
 8005076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d907      	bls.n	8005090 <_fwalk_sglue+0x38>
 8005080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005084:	3301      	adds	r3, #1
 8005086:	d003      	beq.n	8005090 <_fwalk_sglue+0x38>
 8005088:	4629      	mov	r1, r5
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	4306      	orrs	r6, r0
 8005090:	3568      	adds	r5, #104	@ 0x68
 8005092:	e7e9      	b.n	8005068 <_fwalk_sglue+0x10>

08005094 <iprintf>:
 8005094:	b40f      	push	{r0, r1, r2, r3}
 8005096:	b507      	push	{r0, r1, r2, lr}
 8005098:	4906      	ldr	r1, [pc, #24]	@ (80050b4 <iprintf+0x20>)
 800509a:	ab04      	add	r3, sp, #16
 800509c:	6808      	ldr	r0, [r1, #0]
 800509e:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a2:	6881      	ldr	r1, [r0, #8]
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	f001 fd05 	bl	8006ab4 <_vfiprintf_r>
 80050aa:	b003      	add	sp, #12
 80050ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b0:	b004      	add	sp, #16
 80050b2:	4770      	bx	lr
 80050b4:	20000180 	.word	0x20000180

080050b8 <_puts_r>:
 80050b8:	6a03      	ldr	r3, [r0, #32]
 80050ba:	b570      	push	{r4, r5, r6, lr}
 80050bc:	6884      	ldr	r4, [r0, #8]
 80050be:	4605      	mov	r5, r0
 80050c0:	460e      	mov	r6, r1
 80050c2:	b90b      	cbnz	r3, 80050c8 <_puts_r+0x10>
 80050c4:	f7ff ffb0 	bl	8005028 <__sinit>
 80050c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050ca:	07db      	lsls	r3, r3, #31
 80050cc:	d405      	bmi.n	80050da <_puts_r+0x22>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	0598      	lsls	r0, r3, #22
 80050d2:	d402      	bmi.n	80050da <_puts_r+0x22>
 80050d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050d6:	f000 f9a2 	bl	800541e <__retarget_lock_acquire_recursive>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	0719      	lsls	r1, r3, #28
 80050de:	d502      	bpl.n	80050e6 <_puts_r+0x2e>
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d135      	bne.n	8005152 <_puts_r+0x9a>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 f8c5 	bl	8005278 <__swsetup_r>
 80050ee:	b380      	cbz	r0, 8005152 <_puts_r+0x9a>
 80050f0:	f04f 35ff 	mov.w	r5, #4294967295
 80050f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050f6:	07da      	lsls	r2, r3, #31
 80050f8:	d405      	bmi.n	8005106 <_puts_r+0x4e>
 80050fa:	89a3      	ldrh	r3, [r4, #12]
 80050fc:	059b      	lsls	r3, r3, #22
 80050fe:	d402      	bmi.n	8005106 <_puts_r+0x4e>
 8005100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005102:	f000 f98d 	bl	8005420 <__retarget_lock_release_recursive>
 8005106:	4628      	mov	r0, r5
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	2b00      	cmp	r3, #0
 800510c:	da04      	bge.n	8005118 <_puts_r+0x60>
 800510e:	69a2      	ldr	r2, [r4, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	dc17      	bgt.n	8005144 <_puts_r+0x8c>
 8005114:	290a      	cmp	r1, #10
 8005116:	d015      	beq.n	8005144 <_puts_r+0x8c>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	6022      	str	r2, [r4, #0]
 800511e:	7019      	strb	r1, [r3, #0]
 8005120:	68a3      	ldr	r3, [r4, #8]
 8005122:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005126:	3b01      	subs	r3, #1
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	2900      	cmp	r1, #0
 800512c:	d1ed      	bne.n	800510a <_puts_r+0x52>
 800512e:	2b00      	cmp	r3, #0
 8005130:	da11      	bge.n	8005156 <_puts_r+0x9e>
 8005132:	4622      	mov	r2, r4
 8005134:	210a      	movs	r1, #10
 8005136:	4628      	mov	r0, r5
 8005138:	f000 f85f 	bl	80051fa <__swbuf_r>
 800513c:	3001      	adds	r0, #1
 800513e:	d0d7      	beq.n	80050f0 <_puts_r+0x38>
 8005140:	250a      	movs	r5, #10
 8005142:	e7d7      	b.n	80050f4 <_puts_r+0x3c>
 8005144:	4622      	mov	r2, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f857 	bl	80051fa <__swbuf_r>
 800514c:	3001      	adds	r0, #1
 800514e:	d1e7      	bne.n	8005120 <_puts_r+0x68>
 8005150:	e7ce      	b.n	80050f0 <_puts_r+0x38>
 8005152:	3e01      	subs	r6, #1
 8005154:	e7e4      	b.n	8005120 <_puts_r+0x68>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	220a      	movs	r2, #10
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e7ee      	b.n	8005140 <_puts_r+0x88>
	...

08005164 <puts>:
 8005164:	4b02      	ldr	r3, [pc, #8]	@ (8005170 <puts+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f7ff bfa5 	b.w	80050b8 <_puts_r>
 800516e:	bf00      	nop
 8005170:	20000180 	.word	0x20000180

08005174 <__sread>:
 8005174:	b510      	push	{r4, lr}
 8005176:	460c      	mov	r4, r1
 8005178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517c:	f000 f900 	bl	8005380 <_read_r>
 8005180:	2800      	cmp	r0, #0
 8005182:	bfab      	itete	ge
 8005184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005186:	89a3      	ldrhlt	r3, [r4, #12]
 8005188:	181b      	addge	r3, r3, r0
 800518a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800518e:	bfac      	ite	ge
 8005190:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005192:	81a3      	strhlt	r3, [r4, #12]
 8005194:	bd10      	pop	{r4, pc}

08005196 <__swrite>:
 8005196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519a:	461f      	mov	r7, r3
 800519c:	898b      	ldrh	r3, [r1, #12]
 800519e:	05db      	lsls	r3, r3, #23
 80051a0:	4605      	mov	r5, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	4616      	mov	r6, r2
 80051a6:	d505      	bpl.n	80051b4 <__swrite+0x1e>
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	2302      	movs	r3, #2
 80051ae:	2200      	movs	r2, #0
 80051b0:	f000 f8d4 	bl	800535c <_lseek_r>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	4632      	mov	r2, r6
 80051c2:	463b      	mov	r3, r7
 80051c4:	4628      	mov	r0, r5
 80051c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ca:	f000 b8eb 	b.w	80053a4 <_write_r>

080051ce <__sseek>:
 80051ce:	b510      	push	{r4, lr}
 80051d0:	460c      	mov	r4, r1
 80051d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d6:	f000 f8c1 	bl	800535c <_lseek_r>
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	bf15      	itete	ne
 80051e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051ea:	81a3      	strheq	r3, [r4, #12]
 80051ec:	bf18      	it	ne
 80051ee:	81a3      	strhne	r3, [r4, #12]
 80051f0:	bd10      	pop	{r4, pc}

080051f2 <__sclose>:
 80051f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f6:	f000 b8a1 	b.w	800533c <_close_r>

080051fa <__swbuf_r>:
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fc:	460e      	mov	r6, r1
 80051fe:	4614      	mov	r4, r2
 8005200:	4605      	mov	r5, r0
 8005202:	b118      	cbz	r0, 800520c <__swbuf_r+0x12>
 8005204:	6a03      	ldr	r3, [r0, #32]
 8005206:	b90b      	cbnz	r3, 800520c <__swbuf_r+0x12>
 8005208:	f7ff ff0e 	bl	8005028 <__sinit>
 800520c:	69a3      	ldr	r3, [r4, #24]
 800520e:	60a3      	str	r3, [r4, #8]
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	071a      	lsls	r2, r3, #28
 8005214:	d501      	bpl.n	800521a <__swbuf_r+0x20>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	b943      	cbnz	r3, 800522c <__swbuf_r+0x32>
 800521a:	4621      	mov	r1, r4
 800521c:	4628      	mov	r0, r5
 800521e:	f000 f82b 	bl	8005278 <__swsetup_r>
 8005222:	b118      	cbz	r0, 800522c <__swbuf_r+0x32>
 8005224:	f04f 37ff 	mov.w	r7, #4294967295
 8005228:	4638      	mov	r0, r7
 800522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	6922      	ldr	r2, [r4, #16]
 8005230:	1a98      	subs	r0, r3, r2
 8005232:	6963      	ldr	r3, [r4, #20]
 8005234:	b2f6      	uxtb	r6, r6
 8005236:	4283      	cmp	r3, r0
 8005238:	4637      	mov	r7, r6
 800523a:	dc05      	bgt.n	8005248 <__swbuf_r+0x4e>
 800523c:	4621      	mov	r1, r4
 800523e:	4628      	mov	r0, r5
 8005240:	f001 fdd4 	bl	8006dec <_fflush_r>
 8005244:	2800      	cmp	r0, #0
 8005246:	d1ed      	bne.n	8005224 <__swbuf_r+0x2a>
 8005248:	68a3      	ldr	r3, [r4, #8]
 800524a:	3b01      	subs	r3, #1
 800524c:	60a3      	str	r3, [r4, #8]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	6022      	str	r2, [r4, #0]
 8005254:	701e      	strb	r6, [r3, #0]
 8005256:	6962      	ldr	r2, [r4, #20]
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	429a      	cmp	r2, r3
 800525c:	d004      	beq.n	8005268 <__swbuf_r+0x6e>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	07db      	lsls	r3, r3, #31
 8005262:	d5e1      	bpl.n	8005228 <__swbuf_r+0x2e>
 8005264:	2e0a      	cmp	r6, #10
 8005266:	d1df      	bne.n	8005228 <__swbuf_r+0x2e>
 8005268:	4621      	mov	r1, r4
 800526a:	4628      	mov	r0, r5
 800526c:	f001 fdbe 	bl	8006dec <_fflush_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	d0d9      	beq.n	8005228 <__swbuf_r+0x2e>
 8005274:	e7d6      	b.n	8005224 <__swbuf_r+0x2a>
	...

08005278 <__swsetup_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <__swsetup_r+0xa8>)
 800527c:	4605      	mov	r5, r0
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	460c      	mov	r4, r1
 8005282:	b118      	cbz	r0, 800528c <__swsetup_r+0x14>
 8005284:	6a03      	ldr	r3, [r0, #32]
 8005286:	b90b      	cbnz	r3, 800528c <__swsetup_r+0x14>
 8005288:	f7ff fece 	bl	8005028 <__sinit>
 800528c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005290:	0719      	lsls	r1, r3, #28
 8005292:	d422      	bmi.n	80052da <__swsetup_r+0x62>
 8005294:	06da      	lsls	r2, r3, #27
 8005296:	d407      	bmi.n	80052a8 <__swsetup_r+0x30>
 8005298:	2209      	movs	r2, #9
 800529a:	602a      	str	r2, [r5, #0]
 800529c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	f04f 30ff 	mov.w	r0, #4294967295
 80052a6:	e033      	b.n	8005310 <__swsetup_r+0x98>
 80052a8:	0758      	lsls	r0, r3, #29
 80052aa:	d512      	bpl.n	80052d2 <__swsetup_r+0x5a>
 80052ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052ae:	b141      	cbz	r1, 80052c2 <__swsetup_r+0x4a>
 80052b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052b4:	4299      	cmp	r1, r3
 80052b6:	d002      	beq.n	80052be <__swsetup_r+0x46>
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 ff39 	bl	8006130 <_free_r>
 80052be:	2300      	movs	r3, #0
 80052c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f043 0308 	orr.w	r3, r3, #8
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	b94b      	cbnz	r3, 80052f2 <__swsetup_r+0x7a>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e8:	d003      	beq.n	80052f2 <__swsetup_r+0x7a>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f001 fddd 	bl	8006eac <__smakebuf_r>
 80052f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f6:	f013 0201 	ands.w	r2, r3, #1
 80052fa:	d00a      	beq.n	8005312 <__swsetup_r+0x9a>
 80052fc:	2200      	movs	r2, #0
 80052fe:	60a2      	str	r2, [r4, #8]
 8005300:	6962      	ldr	r2, [r4, #20]
 8005302:	4252      	negs	r2, r2
 8005304:	61a2      	str	r2, [r4, #24]
 8005306:	6922      	ldr	r2, [r4, #16]
 8005308:	b942      	cbnz	r2, 800531c <__swsetup_r+0xa4>
 800530a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800530e:	d1c5      	bne.n	800529c <__swsetup_r+0x24>
 8005310:	bd38      	pop	{r3, r4, r5, pc}
 8005312:	0799      	lsls	r1, r3, #30
 8005314:	bf58      	it	pl
 8005316:	6962      	ldrpl	r2, [r4, #20]
 8005318:	60a2      	str	r2, [r4, #8]
 800531a:	e7f4      	b.n	8005306 <__swsetup_r+0x8e>
 800531c:	2000      	movs	r0, #0
 800531e:	e7f7      	b.n	8005310 <__swsetup_r+0x98>
 8005320:	20000180 	.word	0x20000180

08005324 <memset>:
 8005324:	4402      	add	r2, r0
 8005326:	4603      	mov	r3, r0
 8005328:	4293      	cmp	r3, r2
 800532a:	d100      	bne.n	800532e <memset+0xa>
 800532c:	4770      	bx	lr
 800532e:	f803 1b01 	strb.w	r1, [r3], #1
 8005332:	e7f9      	b.n	8005328 <memset+0x4>

08005334 <_localeconv_r>:
 8005334:	4800      	ldr	r0, [pc, #0]	@ (8005338 <_localeconv_r+0x4>)
 8005336:	4770      	bx	lr
 8005338:	20000104 	.word	0x20000104

0800533c <_close_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d06      	ldr	r5, [pc, #24]	@ (8005358 <_close_r+0x1c>)
 8005340:	2300      	movs	r3, #0
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	602b      	str	r3, [r5, #0]
 8005348:	f7fd fa2c 	bl	80027a4 <_close>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_close_r+0x1a>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	b103      	cbz	r3, 8005356 <_close_r+0x1a>
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	2000098c 	.word	0x2000098c

0800535c <_lseek_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d07      	ldr	r5, [pc, #28]	@ (800537c <_lseek_r+0x20>)
 8005360:	4604      	mov	r4, r0
 8005362:	4608      	mov	r0, r1
 8005364:	4611      	mov	r1, r2
 8005366:	2200      	movs	r2, #0
 8005368:	602a      	str	r2, [r5, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	f7fd fa41 	bl	80027f2 <_lseek>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_lseek_r+0x1e>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_lseek_r+0x1e>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	2000098c 	.word	0x2000098c

08005380 <_read_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	@ (80053a0 <_read_r+0x20>)
 8005384:	4604      	mov	r4, r0
 8005386:	4608      	mov	r0, r1
 8005388:	4611      	mov	r1, r2
 800538a:	2200      	movs	r2, #0
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fd f9eb 	bl	800276a <_read>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_read_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_read_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	2000098c 	.word	0x2000098c

080053a4 <_write_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	@ (80053c4 <_write_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fc fbf8 	bl	8001ba8 <_write>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_write_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_write_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000098c 	.word	0x2000098c

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	@ (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000180 	.word	0x20000180

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	@ (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005418 <__libc_init_array+0x44>)
 80053e8:	f001 fe2e 	bl	8007048 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	080074cc 	.word	0x080074cc
 8005410:	080074cc 	.word	0x080074cc
 8005414:	080074cc 	.word	0x080074cc
 8005418:	080074d0 	.word	0x080074d0

0800541c <__retarget_lock_init_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_acquire_recursive>:
 800541e:	4770      	bx	lr

08005420 <__retarget_lock_release_recursive>:
 8005420:	4770      	bx	lr

08005422 <memcpy>:
 8005422:	440a      	add	r2, r1
 8005424:	4291      	cmp	r1, r2
 8005426:	f100 33ff 	add.w	r3, r0, #4294967295
 800542a:	d100      	bne.n	800542e <memcpy+0xc>
 800542c:	4770      	bx	lr
 800542e:	b510      	push	{r4, lr}
 8005430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005438:	4291      	cmp	r1, r2
 800543a:	d1f9      	bne.n	8005430 <memcpy+0xe>
 800543c:	bd10      	pop	{r4, pc}
	...

08005440 <__assert_func>:
 8005440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005442:	4614      	mov	r4, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <__assert_func+0x2c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4605      	mov	r5, r0
 800544c:	68d8      	ldr	r0, [r3, #12]
 800544e:	b14c      	cbz	r4, 8005464 <__assert_func+0x24>
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <__assert_func+0x30>)
 8005452:	9100      	str	r1, [sp, #0]
 8005454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005458:	4906      	ldr	r1, [pc, #24]	@ (8005474 <__assert_func+0x34>)
 800545a:	462b      	mov	r3, r5
 800545c:	f001 fcee 	bl	8006e3c <fiprintf>
 8005460:	f001 fd92 	bl	8006f88 <abort>
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <__assert_func+0x38>)
 8005466:	461c      	mov	r4, r3
 8005468:	e7f3      	b.n	8005452 <__assert_func+0x12>
 800546a:	bf00      	nop
 800546c:	20000180 	.word	0x20000180
 8005470:	0800718e 	.word	0x0800718e
 8005474:	0800719b 	.word	0x0800719b
 8005478:	080071c9 	.word	0x080071c9

0800547c <quorem>:
 800547c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	6903      	ldr	r3, [r0, #16]
 8005482:	690c      	ldr	r4, [r1, #16]
 8005484:	42a3      	cmp	r3, r4
 8005486:	4607      	mov	r7, r0
 8005488:	db7e      	blt.n	8005588 <quorem+0x10c>
 800548a:	3c01      	subs	r4, #1
 800548c:	f101 0814 	add.w	r8, r1, #20
 8005490:	00a3      	lsls	r3, r4, #2
 8005492:	f100 0514 	add.w	r5, r0, #20
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054a6:	3301      	adds	r3, #1
 80054a8:	429a      	cmp	r2, r3
 80054aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80054b2:	d32e      	bcc.n	8005512 <quorem+0x96>
 80054b4:	f04f 0a00 	mov.w	sl, #0
 80054b8:	46c4      	mov	ip, r8
 80054ba:	46ae      	mov	lr, r5
 80054bc:	46d3      	mov	fp, sl
 80054be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054c2:	b298      	uxth	r0, r3
 80054c4:	fb06 a000 	mla	r0, r6, r0, sl
 80054c8:	0c02      	lsrs	r2, r0, #16
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	fb06 2303 	mla	r3, r6, r3, r2
 80054d0:	f8de 2000 	ldr.w	r2, [lr]
 80054d4:	b280      	uxth	r0, r0
 80054d6:	b292      	uxth	r2, r2
 80054d8:	1a12      	subs	r2, r2, r0
 80054da:	445a      	add	r2, fp
 80054dc:	f8de 0000 	ldr.w	r0, [lr]
 80054e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80054ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80054ee:	b292      	uxth	r2, r2
 80054f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80054f4:	45e1      	cmp	r9, ip
 80054f6:	f84e 2b04 	str.w	r2, [lr], #4
 80054fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80054fe:	d2de      	bcs.n	80054be <quorem+0x42>
 8005500:	9b00      	ldr	r3, [sp, #0]
 8005502:	58eb      	ldr	r3, [r5, r3]
 8005504:	b92b      	cbnz	r3, 8005512 <quorem+0x96>
 8005506:	9b01      	ldr	r3, [sp, #4]
 8005508:	3b04      	subs	r3, #4
 800550a:	429d      	cmp	r5, r3
 800550c:	461a      	mov	r2, r3
 800550e:	d32f      	bcc.n	8005570 <quorem+0xf4>
 8005510:	613c      	str	r4, [r7, #16]
 8005512:	4638      	mov	r0, r7
 8005514:	f001 f990 	bl	8006838 <__mcmp>
 8005518:	2800      	cmp	r0, #0
 800551a:	db25      	blt.n	8005568 <quorem+0xec>
 800551c:	4629      	mov	r1, r5
 800551e:	2000      	movs	r0, #0
 8005520:	f858 2b04 	ldr.w	r2, [r8], #4
 8005524:	f8d1 c000 	ldr.w	ip, [r1]
 8005528:	fa1f fe82 	uxth.w	lr, r2
 800552c:	fa1f f38c 	uxth.w	r3, ip
 8005530:	eba3 030e 	sub.w	r3, r3, lr
 8005534:	4403      	add	r3, r0
 8005536:	0c12      	lsrs	r2, r2, #16
 8005538:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800553c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005540:	b29b      	uxth	r3, r3
 8005542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005546:	45c1      	cmp	r9, r8
 8005548:	f841 3b04 	str.w	r3, [r1], #4
 800554c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005550:	d2e6      	bcs.n	8005520 <quorem+0xa4>
 8005552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800555a:	b922      	cbnz	r2, 8005566 <quorem+0xea>
 800555c:	3b04      	subs	r3, #4
 800555e:	429d      	cmp	r5, r3
 8005560:	461a      	mov	r2, r3
 8005562:	d30b      	bcc.n	800557c <quorem+0x100>
 8005564:	613c      	str	r4, [r7, #16]
 8005566:	3601      	adds	r6, #1
 8005568:	4630      	mov	r0, r6
 800556a:	b003      	add	sp, #12
 800556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	3b04      	subs	r3, #4
 8005574:	2a00      	cmp	r2, #0
 8005576:	d1cb      	bne.n	8005510 <quorem+0x94>
 8005578:	3c01      	subs	r4, #1
 800557a:	e7c6      	b.n	800550a <quorem+0x8e>
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	3b04      	subs	r3, #4
 8005580:	2a00      	cmp	r2, #0
 8005582:	d1ef      	bne.n	8005564 <quorem+0xe8>
 8005584:	3c01      	subs	r4, #1
 8005586:	e7ea      	b.n	800555e <quorem+0xe2>
 8005588:	2000      	movs	r0, #0
 800558a:	e7ee      	b.n	800556a <quorem+0xee>
 800558c:	0000      	movs	r0, r0
	...

08005590 <_dtoa_r>:
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	69c7      	ldr	r7, [r0, #28]
 8005596:	b097      	sub	sp, #92	@ 0x5c
 8005598:	ed8d 0b04 	vstr	d0, [sp, #16]
 800559c:	ec55 4b10 	vmov	r4, r5, d0
 80055a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80055a2:	9107      	str	r1, [sp, #28]
 80055a4:	4681      	mov	r9, r0
 80055a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80055a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80055aa:	b97f      	cbnz	r7, 80055cc <_dtoa_r+0x3c>
 80055ac:	2010      	movs	r0, #16
 80055ae:	f000 fe09 	bl	80061c4 <malloc>
 80055b2:	4602      	mov	r2, r0
 80055b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80055b8:	b920      	cbnz	r0, 80055c4 <_dtoa_r+0x34>
 80055ba:	4ba9      	ldr	r3, [pc, #676]	@ (8005860 <_dtoa_r+0x2d0>)
 80055bc:	21ef      	movs	r1, #239	@ 0xef
 80055be:	48a9      	ldr	r0, [pc, #676]	@ (8005864 <_dtoa_r+0x2d4>)
 80055c0:	f7ff ff3e 	bl	8005440 <__assert_func>
 80055c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80055c8:	6007      	str	r7, [r0, #0]
 80055ca:	60c7      	str	r7, [r0, #12]
 80055cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	b159      	cbz	r1, 80055ec <_dtoa_r+0x5c>
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	604a      	str	r2, [r1, #4]
 80055d8:	2301      	movs	r3, #1
 80055da:	4093      	lsls	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
 80055de:	4648      	mov	r0, r9
 80055e0:	f000 fef8 	bl	80063d4 <_Bfree>
 80055e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	1e2b      	subs	r3, r5, #0
 80055ee:	bfb9      	ittee	lt
 80055f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80055f4:	9305      	strlt	r3, [sp, #20]
 80055f6:	2300      	movge	r3, #0
 80055f8:	6033      	strge	r3, [r6, #0]
 80055fa:	9f05      	ldr	r7, [sp, #20]
 80055fc:	4b9a      	ldr	r3, [pc, #616]	@ (8005868 <_dtoa_r+0x2d8>)
 80055fe:	bfbc      	itt	lt
 8005600:	2201      	movlt	r2, #1
 8005602:	6032      	strlt	r2, [r6, #0]
 8005604:	43bb      	bics	r3, r7
 8005606:	d112      	bne.n	800562e <_dtoa_r+0x9e>
 8005608:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800560a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005614:	4323      	orrs	r3, r4
 8005616:	f000 855a 	beq.w	80060ce <_dtoa_r+0xb3e>
 800561a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800561c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800587c <_dtoa_r+0x2ec>
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 855c 	beq.w	80060de <_dtoa_r+0xb4e>
 8005626:	f10a 0303 	add.w	r3, sl, #3
 800562a:	f000 bd56 	b.w	80060da <_dtoa_r+0xb4a>
 800562e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005632:	2200      	movs	r2, #0
 8005634:	ec51 0b17 	vmov	r0, r1, d7
 8005638:	2300      	movs	r3, #0
 800563a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800563e:	f7fb fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8005642:	4680      	mov	r8, r0
 8005644:	b158      	cbz	r0, 800565e <_dtoa_r+0xce>
 8005646:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005648:	2301      	movs	r3, #1
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800564e:	b113      	cbz	r3, 8005656 <_dtoa_r+0xc6>
 8005650:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005652:	4b86      	ldr	r3, [pc, #536]	@ (800586c <_dtoa_r+0x2dc>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005880 <_dtoa_r+0x2f0>
 800565a:	f000 bd40 	b.w	80060de <_dtoa_r+0xb4e>
 800565e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005662:	aa14      	add	r2, sp, #80	@ 0x50
 8005664:	a915      	add	r1, sp, #84	@ 0x54
 8005666:	4648      	mov	r0, r9
 8005668:	f001 f996 	bl	8006998 <__d2b>
 800566c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005670:	9002      	str	r0, [sp, #8]
 8005672:	2e00      	cmp	r6, #0
 8005674:	d078      	beq.n	8005768 <_dtoa_r+0x1d8>
 8005676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005678:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800567c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005684:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005688:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800568c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005690:	4619      	mov	r1, r3
 8005692:	2200      	movs	r2, #0
 8005694:	4b76      	ldr	r3, [pc, #472]	@ (8005870 <_dtoa_r+0x2e0>)
 8005696:	f7fa fe17 	bl	80002c8 <__aeabi_dsub>
 800569a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005848 <_dtoa_r+0x2b8>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ffca 	bl	8000638 <__aeabi_dmul>
 80056a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8005850 <_dtoa_r+0x2c0>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa fe0f 	bl	80002cc <__adddf3>
 80056ae:	4604      	mov	r4, r0
 80056b0:	4630      	mov	r0, r6
 80056b2:	460d      	mov	r5, r1
 80056b4:	f7fa ff56 	bl	8000564 <__aeabi_i2d>
 80056b8:	a367      	add	r3, pc, #412	@ (adr r3, 8005858 <_dtoa_r+0x2c8>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ffbb 	bl	8000638 <__aeabi_dmul>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa fdff 	bl	80002cc <__adddf3>
 80056ce:	4604      	mov	r4, r0
 80056d0:	460d      	mov	r5, r1
 80056d2:	f7fb fa61 	bl	8000b98 <__aeabi_d2iz>
 80056d6:	2200      	movs	r2, #0
 80056d8:	4607      	mov	r7, r0
 80056da:	2300      	movs	r3, #0
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fb fa1c 	bl	8000b1c <__aeabi_dcmplt>
 80056e4:	b140      	cbz	r0, 80056f8 <_dtoa_r+0x168>
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7fa ff3c 	bl	8000564 <__aeabi_i2d>
 80056ec:	4622      	mov	r2, r4
 80056ee:	462b      	mov	r3, r5
 80056f0:	f7fb fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80056f4:	b900      	cbnz	r0, 80056f8 <_dtoa_r+0x168>
 80056f6:	3f01      	subs	r7, #1
 80056f8:	2f16      	cmp	r7, #22
 80056fa:	d852      	bhi.n	80057a2 <_dtoa_r+0x212>
 80056fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005874 <_dtoa_r+0x2e4>)
 80056fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800570a:	f7fb fa07 	bl	8000b1c <__aeabi_dcmplt>
 800570e:	2800      	cmp	r0, #0
 8005710:	d049      	beq.n	80057a6 <_dtoa_r+0x216>
 8005712:	3f01      	subs	r7, #1
 8005714:	2300      	movs	r3, #0
 8005716:	9310      	str	r3, [sp, #64]	@ 0x40
 8005718:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800571a:	1b9b      	subs	r3, r3, r6
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	bf45      	ittet	mi
 8005720:	f1c3 0301 	rsbmi	r3, r3, #1
 8005724:	9300      	strmi	r3, [sp, #0]
 8005726:	2300      	movpl	r3, #0
 8005728:	2300      	movmi	r3, #0
 800572a:	9206      	str	r2, [sp, #24]
 800572c:	bf54      	ite	pl
 800572e:	9300      	strpl	r3, [sp, #0]
 8005730:	9306      	strmi	r3, [sp, #24]
 8005732:	2f00      	cmp	r7, #0
 8005734:	db39      	blt.n	80057aa <_dtoa_r+0x21a>
 8005736:	9b06      	ldr	r3, [sp, #24]
 8005738:	970d      	str	r7, [sp, #52]	@ 0x34
 800573a:	443b      	add	r3, r7
 800573c:	9306      	str	r3, [sp, #24]
 800573e:	2300      	movs	r3, #0
 8005740:	9308      	str	r3, [sp, #32]
 8005742:	9b07      	ldr	r3, [sp, #28]
 8005744:	2b09      	cmp	r3, #9
 8005746:	d863      	bhi.n	8005810 <_dtoa_r+0x280>
 8005748:	2b05      	cmp	r3, #5
 800574a:	bfc4      	itt	gt
 800574c:	3b04      	subgt	r3, #4
 800574e:	9307      	strgt	r3, [sp, #28]
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	f1a3 0302 	sub.w	r3, r3, #2
 8005756:	bfcc      	ite	gt
 8005758:	2400      	movgt	r4, #0
 800575a:	2401      	movle	r4, #1
 800575c:	2b03      	cmp	r3, #3
 800575e:	d863      	bhi.n	8005828 <_dtoa_r+0x298>
 8005760:	e8df f003 	tbb	[pc, r3]
 8005764:	2b375452 	.word	0x2b375452
 8005768:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800576c:	441e      	add	r6, r3
 800576e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005772:	2b20      	cmp	r3, #32
 8005774:	bfc1      	itttt	gt
 8005776:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800577a:	409f      	lslgt	r7, r3
 800577c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005780:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005784:	bfd6      	itet	le
 8005786:	f1c3 0320 	rsble	r3, r3, #32
 800578a:	ea47 0003 	orrgt.w	r0, r7, r3
 800578e:	fa04 f003 	lslle.w	r0, r4, r3
 8005792:	f7fa fed7 	bl	8000544 <__aeabi_ui2d>
 8005796:	2201      	movs	r2, #1
 8005798:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800579c:	3e01      	subs	r6, #1
 800579e:	9212      	str	r2, [sp, #72]	@ 0x48
 80057a0:	e776      	b.n	8005690 <_dtoa_r+0x100>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e7b7      	b.n	8005716 <_dtoa_r+0x186>
 80057a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80057a8:	e7b6      	b.n	8005718 <_dtoa_r+0x188>
 80057aa:	9b00      	ldr	r3, [sp, #0]
 80057ac:	1bdb      	subs	r3, r3, r7
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	427b      	negs	r3, r7
 80057b2:	9308      	str	r3, [sp, #32]
 80057b4:	2300      	movs	r3, #0
 80057b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80057b8:	e7c3      	b.n	8005742 <_dtoa_r+0x1b2>
 80057ba:	2301      	movs	r3, #1
 80057bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057c0:	eb07 0b03 	add.w	fp, r7, r3
 80057c4:	f10b 0301 	add.w	r3, fp, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	9303      	str	r3, [sp, #12]
 80057cc:	bfb8      	it	lt
 80057ce:	2301      	movlt	r3, #1
 80057d0:	e006      	b.n	80057e0 <_dtoa_r+0x250>
 80057d2:	2301      	movs	r3, #1
 80057d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dd28      	ble.n	800582e <_dtoa_r+0x29e>
 80057dc:	469b      	mov	fp, r3
 80057de:	9303      	str	r3, [sp, #12]
 80057e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80057e4:	2100      	movs	r1, #0
 80057e6:	2204      	movs	r2, #4
 80057e8:	f102 0514 	add.w	r5, r2, #20
 80057ec:	429d      	cmp	r5, r3
 80057ee:	d926      	bls.n	800583e <_dtoa_r+0x2ae>
 80057f0:	6041      	str	r1, [r0, #4]
 80057f2:	4648      	mov	r0, r9
 80057f4:	f000 fdae 	bl	8006354 <_Balloc>
 80057f8:	4682      	mov	sl, r0
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d142      	bne.n	8005884 <_dtoa_r+0x2f4>
 80057fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005878 <_dtoa_r+0x2e8>)
 8005800:	4602      	mov	r2, r0
 8005802:	f240 11af 	movw	r1, #431	@ 0x1af
 8005806:	e6da      	b.n	80055be <_dtoa_r+0x2e>
 8005808:	2300      	movs	r3, #0
 800580a:	e7e3      	b.n	80057d4 <_dtoa_r+0x244>
 800580c:	2300      	movs	r3, #0
 800580e:	e7d5      	b.n	80057bc <_dtoa_r+0x22c>
 8005810:	2401      	movs	r4, #1
 8005812:	2300      	movs	r3, #0
 8005814:	9307      	str	r3, [sp, #28]
 8005816:	9409      	str	r4, [sp, #36]	@ 0x24
 8005818:	f04f 3bff 	mov.w	fp, #4294967295
 800581c:	2200      	movs	r2, #0
 800581e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005822:	2312      	movs	r3, #18
 8005824:	920c      	str	r2, [sp, #48]	@ 0x30
 8005826:	e7db      	b.n	80057e0 <_dtoa_r+0x250>
 8005828:	2301      	movs	r3, #1
 800582a:	9309      	str	r3, [sp, #36]	@ 0x24
 800582c:	e7f4      	b.n	8005818 <_dtoa_r+0x288>
 800582e:	f04f 0b01 	mov.w	fp, #1
 8005832:	f8cd b00c 	str.w	fp, [sp, #12]
 8005836:	465b      	mov	r3, fp
 8005838:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800583c:	e7d0      	b.n	80057e0 <_dtoa_r+0x250>
 800583e:	3101      	adds	r1, #1
 8005840:	0052      	lsls	r2, r2, #1
 8005842:	e7d1      	b.n	80057e8 <_dtoa_r+0x258>
 8005844:	f3af 8000 	nop.w
 8005848:	636f4361 	.word	0x636f4361
 800584c:	3fd287a7 	.word	0x3fd287a7
 8005850:	8b60c8b3 	.word	0x8b60c8b3
 8005854:	3fc68a28 	.word	0x3fc68a28
 8005858:	509f79fb 	.word	0x509f79fb
 800585c:	3fd34413 	.word	0x3fd34413
 8005860:	080071d7 	.word	0x080071d7
 8005864:	080071ee 	.word	0x080071ee
 8005868:	7ff00000 	.word	0x7ff00000
 800586c:	08007161 	.word	0x08007161
 8005870:	3ff80000 	.word	0x3ff80000
 8005874:	080072f8 	.word	0x080072f8
 8005878:	08007246 	.word	0x08007246
 800587c:	080071d3 	.word	0x080071d3
 8005880:	08007160 	.word	0x08007160
 8005884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005888:	6018      	str	r0, [r3, #0]
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	2b0e      	cmp	r3, #14
 800588e:	f200 80a1 	bhi.w	80059d4 <_dtoa_r+0x444>
 8005892:	2c00      	cmp	r4, #0
 8005894:	f000 809e 	beq.w	80059d4 <_dtoa_r+0x444>
 8005898:	2f00      	cmp	r7, #0
 800589a:	dd33      	ble.n	8005904 <_dtoa_r+0x374>
 800589c:	4b9c      	ldr	r3, [pc, #624]	@ (8005b10 <_dtoa_r+0x580>)
 800589e:	f007 020f 	and.w	r2, r7, #15
 80058a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058a6:	ed93 7b00 	vldr	d7, [r3]
 80058aa:	05f8      	lsls	r0, r7, #23
 80058ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80058b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80058b4:	d516      	bpl.n	80058e4 <_dtoa_r+0x354>
 80058b6:	4b97      	ldr	r3, [pc, #604]	@ (8005b14 <_dtoa_r+0x584>)
 80058b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058c0:	f7fa ffe4 	bl	800088c <__aeabi_ddiv>
 80058c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058c8:	f004 040f 	and.w	r4, r4, #15
 80058cc:	2603      	movs	r6, #3
 80058ce:	4d91      	ldr	r5, [pc, #580]	@ (8005b14 <_dtoa_r+0x584>)
 80058d0:	b954      	cbnz	r4, 80058e8 <_dtoa_r+0x358>
 80058d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80058d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058da:	f7fa ffd7 	bl	800088c <__aeabi_ddiv>
 80058de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058e2:	e028      	b.n	8005936 <_dtoa_r+0x3a6>
 80058e4:	2602      	movs	r6, #2
 80058e6:	e7f2      	b.n	80058ce <_dtoa_r+0x33e>
 80058e8:	07e1      	lsls	r1, r4, #31
 80058ea:	d508      	bpl.n	80058fe <_dtoa_r+0x36e>
 80058ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80058f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058f4:	f7fa fea0 	bl	8000638 <__aeabi_dmul>
 80058f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80058fc:	3601      	adds	r6, #1
 80058fe:	1064      	asrs	r4, r4, #1
 8005900:	3508      	adds	r5, #8
 8005902:	e7e5      	b.n	80058d0 <_dtoa_r+0x340>
 8005904:	f000 80af 	beq.w	8005a66 <_dtoa_r+0x4d6>
 8005908:	427c      	negs	r4, r7
 800590a:	4b81      	ldr	r3, [pc, #516]	@ (8005b10 <_dtoa_r+0x580>)
 800590c:	4d81      	ldr	r5, [pc, #516]	@ (8005b14 <_dtoa_r+0x584>)
 800590e:	f004 020f 	and.w	r2, r4, #15
 8005912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800591e:	f7fa fe8b 	bl	8000638 <__aeabi_dmul>
 8005922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005926:	1124      	asrs	r4, r4, #4
 8005928:	2300      	movs	r3, #0
 800592a:	2602      	movs	r6, #2
 800592c:	2c00      	cmp	r4, #0
 800592e:	f040 808f 	bne.w	8005a50 <_dtoa_r+0x4c0>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1d3      	bne.n	80058de <_dtoa_r+0x34e>
 8005936:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005938:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8094 	beq.w	8005a6a <_dtoa_r+0x4da>
 8005942:	4b75      	ldr	r3, [pc, #468]	@ (8005b18 <_dtoa_r+0x588>)
 8005944:	2200      	movs	r2, #0
 8005946:	4620      	mov	r0, r4
 8005948:	4629      	mov	r1, r5
 800594a:	f7fb f8e7 	bl	8000b1c <__aeabi_dcmplt>
 800594e:	2800      	cmp	r0, #0
 8005950:	f000 808b 	beq.w	8005a6a <_dtoa_r+0x4da>
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8087 	beq.w	8005a6a <_dtoa_r+0x4da>
 800595c:	f1bb 0f00 	cmp.w	fp, #0
 8005960:	dd34      	ble.n	80059cc <_dtoa_r+0x43c>
 8005962:	4620      	mov	r0, r4
 8005964:	4b6d      	ldr	r3, [pc, #436]	@ (8005b1c <_dtoa_r+0x58c>)
 8005966:	2200      	movs	r2, #0
 8005968:	4629      	mov	r1, r5
 800596a:	f7fa fe65 	bl	8000638 <__aeabi_dmul>
 800596e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005972:	f107 38ff 	add.w	r8, r7, #4294967295
 8005976:	3601      	adds	r6, #1
 8005978:	465c      	mov	r4, fp
 800597a:	4630      	mov	r0, r6
 800597c:	f7fa fdf2 	bl	8000564 <__aeabi_i2d>
 8005980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005984:	f7fa fe58 	bl	8000638 <__aeabi_dmul>
 8005988:	4b65      	ldr	r3, [pc, #404]	@ (8005b20 <_dtoa_r+0x590>)
 800598a:	2200      	movs	r2, #0
 800598c:	f7fa fc9e 	bl	80002cc <__adddf3>
 8005990:	4605      	mov	r5, r0
 8005992:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005996:	2c00      	cmp	r4, #0
 8005998:	d16a      	bne.n	8005a70 <_dtoa_r+0x4e0>
 800599a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800599e:	4b61      	ldr	r3, [pc, #388]	@ (8005b24 <_dtoa_r+0x594>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	f7fa fc91 	bl	80002c8 <__aeabi_dsub>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059ae:	462a      	mov	r2, r5
 80059b0:	4633      	mov	r3, r6
 80059b2:	f7fb f8d1 	bl	8000b58 <__aeabi_dcmpgt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f040 8298 	bne.w	8005eec <_dtoa_r+0x95c>
 80059bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c0:	462a      	mov	r2, r5
 80059c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80059c6:	f7fb f8a9 	bl	8000b1c <__aeabi_dcmplt>
 80059ca:	bb38      	cbnz	r0, 8005a1c <_dtoa_r+0x48c>
 80059cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80059d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f2c0 8157 	blt.w	8005c8a <_dtoa_r+0x6fa>
 80059dc:	2f0e      	cmp	r7, #14
 80059de:	f300 8154 	bgt.w	8005c8a <_dtoa_r+0x6fa>
 80059e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005b10 <_dtoa_r+0x580>)
 80059e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059e8:	ed93 7b00 	vldr	d7, [r3]
 80059ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	ed8d 7b00 	vstr	d7, [sp]
 80059f4:	f280 80e5 	bge.w	8005bc2 <_dtoa_r+0x632>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f300 80e1 	bgt.w	8005bc2 <_dtoa_r+0x632>
 8005a00:	d10c      	bne.n	8005a1c <_dtoa_r+0x48c>
 8005a02:	4b48      	ldr	r3, [pc, #288]	@ (8005b24 <_dtoa_r+0x594>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	ec51 0b17 	vmov	r0, r1, d7
 8005a0a:	f7fa fe15 	bl	8000638 <__aeabi_dmul>
 8005a0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a12:	f7fb f897 	bl	8000b44 <__aeabi_dcmpge>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f000 8266 	beq.w	8005ee8 <_dtoa_r+0x958>
 8005a1c:	2400      	movs	r4, #0
 8005a1e:	4625      	mov	r5, r4
 8005a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a22:	4656      	mov	r6, sl
 8005a24:	ea6f 0803 	mvn.w	r8, r3
 8005a28:	2700      	movs	r7, #0
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4648      	mov	r0, r9
 8005a2e:	f000 fcd1 	bl	80063d4 <_Bfree>
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	f000 80bd 	beq.w	8005bb2 <_dtoa_r+0x622>
 8005a38:	b12f      	cbz	r7, 8005a46 <_dtoa_r+0x4b6>
 8005a3a:	42af      	cmp	r7, r5
 8005a3c:	d003      	beq.n	8005a46 <_dtoa_r+0x4b6>
 8005a3e:	4639      	mov	r1, r7
 8005a40:	4648      	mov	r0, r9
 8005a42:	f000 fcc7 	bl	80063d4 <_Bfree>
 8005a46:	4629      	mov	r1, r5
 8005a48:	4648      	mov	r0, r9
 8005a4a:	f000 fcc3 	bl	80063d4 <_Bfree>
 8005a4e:	e0b0      	b.n	8005bb2 <_dtoa_r+0x622>
 8005a50:	07e2      	lsls	r2, r4, #31
 8005a52:	d505      	bpl.n	8005a60 <_dtoa_r+0x4d0>
 8005a54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a58:	f7fa fdee 	bl	8000638 <__aeabi_dmul>
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	2301      	movs	r3, #1
 8005a60:	1064      	asrs	r4, r4, #1
 8005a62:	3508      	adds	r5, #8
 8005a64:	e762      	b.n	800592c <_dtoa_r+0x39c>
 8005a66:	2602      	movs	r6, #2
 8005a68:	e765      	b.n	8005936 <_dtoa_r+0x3a6>
 8005a6a:	9c03      	ldr	r4, [sp, #12]
 8005a6c:	46b8      	mov	r8, r7
 8005a6e:	e784      	b.n	800597a <_dtoa_r+0x3ea>
 8005a70:	4b27      	ldr	r3, [pc, #156]	@ (8005b10 <_dtoa_r+0x580>)
 8005a72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a7c:	4454      	add	r4, sl
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	d054      	beq.n	8005b2c <_dtoa_r+0x59c>
 8005a82:	4929      	ldr	r1, [pc, #164]	@ (8005b28 <_dtoa_r+0x598>)
 8005a84:	2000      	movs	r0, #0
 8005a86:	f7fa ff01 	bl	800088c <__aeabi_ddiv>
 8005a8a:	4633      	mov	r3, r6
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	f7fa fc1b 	bl	80002c8 <__aeabi_dsub>
 8005a92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a96:	4656      	mov	r6, sl
 8005a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a9c:	f7fb f87c 	bl	8000b98 <__aeabi_d2iz>
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f7fa fd5f 	bl	8000564 <__aeabi_i2d>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aae:	f7fa fc0b 	bl	80002c8 <__aeabi_dsub>
 8005ab2:	3530      	adds	r5, #48	@ 0x30
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005abc:	f806 5b01 	strb.w	r5, [r6], #1
 8005ac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005ac4:	f7fb f82a 	bl	8000b1c <__aeabi_dcmplt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d172      	bne.n	8005bb2 <_dtoa_r+0x622>
 8005acc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ad0:	4911      	ldr	r1, [pc, #68]	@ (8005b18 <_dtoa_r+0x588>)
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fa fbf8 	bl	80002c8 <__aeabi_dsub>
 8005ad8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005adc:	f7fb f81e 	bl	8000b1c <__aeabi_dcmplt>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	f040 80b4 	bne.w	8005c4e <_dtoa_r+0x6be>
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	f43f af70 	beq.w	80059cc <_dtoa_r+0x43c>
 8005aec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <_dtoa_r+0x58c>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7fa fda0 	bl	8000638 <__aeabi_dmul>
 8005af8:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <_dtoa_r+0x58c>)
 8005afa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005afe:	2200      	movs	r2, #0
 8005b00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b04:	f7fa fd98 	bl	8000638 <__aeabi_dmul>
 8005b08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b0c:	e7c4      	b.n	8005a98 <_dtoa_r+0x508>
 8005b0e:	bf00      	nop
 8005b10:	080072f8 	.word	0x080072f8
 8005b14:	080072d0 	.word	0x080072d0
 8005b18:	3ff00000 	.word	0x3ff00000
 8005b1c:	40240000 	.word	0x40240000
 8005b20:	401c0000 	.word	0x401c0000
 8005b24:	40140000 	.word	0x40140000
 8005b28:	3fe00000 	.word	0x3fe00000
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f7fa fd82 	bl	8000638 <__aeabi_dmul>
 8005b34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b38:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b3a:	4656      	mov	r6, sl
 8005b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b40:	f7fb f82a 	bl	8000b98 <__aeabi_d2iz>
 8005b44:	4605      	mov	r5, r0
 8005b46:	f7fa fd0d 	bl	8000564 <__aeabi_i2d>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b52:	f7fa fbb9 	bl	80002c8 <__aeabi_dsub>
 8005b56:	3530      	adds	r5, #48	@ 0x30
 8005b58:	f806 5b01 	strb.w	r5, [r6], #1
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	d124      	bne.n	8005bb6 <_dtoa_r+0x626>
 8005b6c:	4baf      	ldr	r3, [pc, #700]	@ (8005e2c <_dtoa_r+0x89c>)
 8005b6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b72:	f7fa fbab 	bl	80002cc <__adddf3>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b7e:	f7fa ffeb 	bl	8000b58 <__aeabi_dcmpgt>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d163      	bne.n	8005c4e <_dtoa_r+0x6be>
 8005b86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b8a:	49a8      	ldr	r1, [pc, #672]	@ (8005e2c <_dtoa_r+0x89c>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f7fa fb9b 	bl	80002c8 <__aeabi_dsub>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b9a:	f7fa ffbf 	bl	8000b1c <__aeabi_dcmplt>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f43f af14 	beq.w	80059cc <_dtoa_r+0x43c>
 8005ba4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005ba6:	1e73      	subs	r3, r6, #1
 8005ba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005baa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005bae:	2b30      	cmp	r3, #48	@ 0x30
 8005bb0:	d0f8      	beq.n	8005ba4 <_dtoa_r+0x614>
 8005bb2:	4647      	mov	r7, r8
 8005bb4:	e03b      	b.n	8005c2e <_dtoa_r+0x69e>
 8005bb6:	4b9e      	ldr	r3, [pc, #632]	@ (8005e30 <_dtoa_r+0x8a0>)
 8005bb8:	f7fa fd3e 	bl	8000638 <__aeabi_dmul>
 8005bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bc0:	e7bc      	b.n	8005b3c <_dtoa_r+0x5ac>
 8005bc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005bc6:	4656      	mov	r6, sl
 8005bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa fe5c 	bl	800088c <__aeabi_ddiv>
 8005bd4:	f7fa ffe0 	bl	8000b98 <__aeabi_d2iz>
 8005bd8:	4680      	mov	r8, r0
 8005bda:	f7fa fcc3 	bl	8000564 <__aeabi_i2d>
 8005bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005be2:	f7fa fd29 	bl	8000638 <__aeabi_dmul>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bf2:	f7fa fb69 	bl	80002c8 <__aeabi_dsub>
 8005bf6:	f806 4b01 	strb.w	r4, [r6], #1
 8005bfa:	9d03      	ldr	r5, [sp, #12]
 8005bfc:	eba6 040a 	sub.w	r4, r6, sl
 8005c00:	42a5      	cmp	r5, r4
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	d133      	bne.n	8005c70 <_dtoa_r+0x6e0>
 8005c08:	f7fa fb60 	bl	80002cc <__adddf3>
 8005c0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	f7fa ffa0 	bl	8000b58 <__aeabi_dcmpgt>
 8005c18:	b9c0      	cbnz	r0, 8005c4c <_dtoa_r+0x6bc>
 8005c1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa ff71 	bl	8000b08 <__aeabi_dcmpeq>
 8005c26:	b110      	cbz	r0, 8005c2e <_dtoa_r+0x69e>
 8005c28:	f018 0f01 	tst.w	r8, #1
 8005c2c:	d10e      	bne.n	8005c4c <_dtoa_r+0x6bc>
 8005c2e:	9902      	ldr	r1, [sp, #8]
 8005c30:	4648      	mov	r0, r9
 8005c32:	f000 fbcf 	bl	80063d4 <_Bfree>
 8005c36:	2300      	movs	r3, #0
 8005c38:	7033      	strb	r3, [r6, #0]
 8005c3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c3c:	3701      	adds	r7, #1
 8005c3e:	601f      	str	r7, [r3, #0]
 8005c40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 824b 	beq.w	80060de <_dtoa_r+0xb4e>
 8005c48:	601e      	str	r6, [r3, #0]
 8005c4a:	e248      	b.n	80060de <_dtoa_r+0xb4e>
 8005c4c:	46b8      	mov	r8, r7
 8005c4e:	4633      	mov	r3, r6
 8005c50:	461e      	mov	r6, r3
 8005c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c56:	2a39      	cmp	r2, #57	@ 0x39
 8005c58:	d106      	bne.n	8005c68 <_dtoa_r+0x6d8>
 8005c5a:	459a      	cmp	sl, r3
 8005c5c:	d1f8      	bne.n	8005c50 <_dtoa_r+0x6c0>
 8005c5e:	2230      	movs	r2, #48	@ 0x30
 8005c60:	f108 0801 	add.w	r8, r8, #1
 8005c64:	f88a 2000 	strb.w	r2, [sl]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	3201      	adds	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	e7a0      	b.n	8005bb2 <_dtoa_r+0x622>
 8005c70:	4b6f      	ldr	r3, [pc, #444]	@ (8005e30 <_dtoa_r+0x8a0>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	f7fa fce0 	bl	8000638 <__aeabi_dmul>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	f7fa ff42 	bl	8000b08 <__aeabi_dcmpeq>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d09f      	beq.n	8005bc8 <_dtoa_r+0x638>
 8005c88:	e7d1      	b.n	8005c2e <_dtoa_r+0x69e>
 8005c8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	f000 80ea 	beq.w	8005e66 <_dtoa_r+0x8d6>
 8005c92:	9a07      	ldr	r2, [sp, #28]
 8005c94:	2a01      	cmp	r2, #1
 8005c96:	f300 80cd 	bgt.w	8005e34 <_dtoa_r+0x8a4>
 8005c9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c9c:	2a00      	cmp	r2, #0
 8005c9e:	f000 80c1 	beq.w	8005e24 <_dtoa_r+0x894>
 8005ca2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ca6:	9c08      	ldr	r4, [sp, #32]
 8005ca8:	9e00      	ldr	r6, [sp, #0]
 8005caa:	9a00      	ldr	r2, [sp, #0]
 8005cac:	441a      	add	r2, r3
 8005cae:	9200      	str	r2, [sp, #0]
 8005cb0:	9a06      	ldr	r2, [sp, #24]
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	441a      	add	r2, r3
 8005cb6:	4648      	mov	r0, r9
 8005cb8:	9206      	str	r2, [sp, #24]
 8005cba:	f000 fc3f 	bl	800653c <__i2b>
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	b166      	cbz	r6, 8005cdc <_dtoa_r+0x74c>
 8005cc2:	9b06      	ldr	r3, [sp, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	dd09      	ble.n	8005cdc <_dtoa_r+0x74c>
 8005cc8:	42b3      	cmp	r3, r6
 8005cca:	9a00      	ldr	r2, [sp, #0]
 8005ccc:	bfa8      	it	ge
 8005cce:	4633      	movge	r3, r6
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	9200      	str	r2, [sp, #0]
 8005cd4:	9a06      	ldr	r2, [sp, #24]
 8005cd6:	1af6      	subs	r6, r6, r3
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	9306      	str	r3, [sp, #24]
 8005cdc:	9b08      	ldr	r3, [sp, #32]
 8005cde:	b30b      	cbz	r3, 8005d24 <_dtoa_r+0x794>
 8005ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80c6 	beq.w	8005e74 <_dtoa_r+0x8e4>
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	f000 80c0 	beq.w	8005e6e <_dtoa_r+0x8de>
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	4648      	mov	r0, r9
 8005cf4:	f000 fcda 	bl	80066ac <__pow5mult>
 8005cf8:	9a02      	ldr	r2, [sp, #8]
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	4648      	mov	r0, r9
 8005d00:	f000 fc32 	bl	8006568 <__multiply>
 8005d04:	9902      	ldr	r1, [sp, #8]
 8005d06:	4680      	mov	r8, r0
 8005d08:	4648      	mov	r0, r9
 8005d0a:	f000 fb63 	bl	80063d4 <_Bfree>
 8005d0e:	9b08      	ldr	r3, [sp, #32]
 8005d10:	1b1b      	subs	r3, r3, r4
 8005d12:	9308      	str	r3, [sp, #32]
 8005d14:	f000 80b1 	beq.w	8005e7a <_dtoa_r+0x8ea>
 8005d18:	9a08      	ldr	r2, [sp, #32]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	4648      	mov	r0, r9
 8005d1e:	f000 fcc5 	bl	80066ac <__pow5mult>
 8005d22:	9002      	str	r0, [sp, #8]
 8005d24:	2101      	movs	r1, #1
 8005d26:	4648      	mov	r0, r9
 8005d28:	f000 fc08 	bl	800653c <__i2b>
 8005d2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d2e:	4604      	mov	r4, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 81d8 	beq.w	80060e6 <_dtoa_r+0xb56>
 8005d36:	461a      	mov	r2, r3
 8005d38:	4601      	mov	r1, r0
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	f000 fcb6 	bl	80066ac <__pow5mult>
 8005d40:	9b07      	ldr	r3, [sp, #28]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	4604      	mov	r4, r0
 8005d46:	f300 809f 	bgt.w	8005e88 <_dtoa_r+0x8f8>
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8097 	bne.w	8005e80 <_dtoa_r+0x8f0>
 8005d52:	9b05      	ldr	r3, [sp, #20]
 8005d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f040 8093 	bne.w	8005e84 <_dtoa_r+0x8f4>
 8005d5e:	9b05      	ldr	r3, [sp, #20]
 8005d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d64:	0d1b      	lsrs	r3, r3, #20
 8005d66:	051b      	lsls	r3, r3, #20
 8005d68:	b133      	cbz	r3, 8005d78 <_dtoa_r+0x7e8>
 8005d6a:	9b00      	ldr	r3, [sp, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	9b06      	ldr	r3, [sp, #24]
 8005d72:	3301      	adds	r3, #1
 8005d74:	9306      	str	r3, [sp, #24]
 8005d76:	2301      	movs	r3, #1
 8005d78:	9308      	str	r3, [sp, #32]
 8005d7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 81b8 	beq.w	80060f2 <_dtoa_r+0xb62>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d88:	6918      	ldr	r0, [r3, #16]
 8005d8a:	f000 fb8b 	bl	80064a4 <__hi0bits>
 8005d8e:	f1c0 0020 	rsb	r0, r0, #32
 8005d92:	9b06      	ldr	r3, [sp, #24]
 8005d94:	4418      	add	r0, r3
 8005d96:	f010 001f 	ands.w	r0, r0, #31
 8005d9a:	f000 8082 	beq.w	8005ea2 <_dtoa_r+0x912>
 8005d9e:	f1c0 0320 	rsb	r3, r0, #32
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	dd73      	ble.n	8005e8e <_dtoa_r+0x8fe>
 8005da6:	9b00      	ldr	r3, [sp, #0]
 8005da8:	f1c0 001c 	rsb	r0, r0, #28
 8005dac:	4403      	add	r3, r0
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	9b06      	ldr	r3, [sp, #24]
 8005db2:	4403      	add	r3, r0
 8005db4:	4406      	add	r6, r0
 8005db6:	9306      	str	r3, [sp, #24]
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dd05      	ble.n	8005dca <_dtoa_r+0x83a>
 8005dbe:	9902      	ldr	r1, [sp, #8]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4648      	mov	r0, r9
 8005dc4:	f000 fccc 	bl	8006760 <__lshift>
 8005dc8:	9002      	str	r0, [sp, #8]
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dd05      	ble.n	8005ddc <_dtoa_r+0x84c>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4648      	mov	r0, r9
 8005dd6:	f000 fcc3 	bl	8006760 <__lshift>
 8005dda:	4604      	mov	r4, r0
 8005ddc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d061      	beq.n	8005ea6 <_dtoa_r+0x916>
 8005de2:	9802      	ldr	r0, [sp, #8]
 8005de4:	4621      	mov	r1, r4
 8005de6:	f000 fd27 	bl	8006838 <__mcmp>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	da5b      	bge.n	8005ea6 <_dtoa_r+0x916>
 8005dee:	2300      	movs	r3, #0
 8005df0:	9902      	ldr	r1, [sp, #8]
 8005df2:	220a      	movs	r2, #10
 8005df4:	4648      	mov	r0, r9
 8005df6:	f000 fb0f 	bl	8006418 <__multadd>
 8005dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfc:	9002      	str	r0, [sp, #8]
 8005dfe:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8177 	beq.w	80060f6 <_dtoa_r+0xb66>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	220a      	movs	r2, #10
 8005e0e:	4648      	mov	r0, r9
 8005e10:	f000 fb02 	bl	8006418 <__multadd>
 8005e14:	f1bb 0f00 	cmp.w	fp, #0
 8005e18:	4605      	mov	r5, r0
 8005e1a:	dc6f      	bgt.n	8005efc <_dtoa_r+0x96c>
 8005e1c:	9b07      	ldr	r3, [sp, #28]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	dc49      	bgt.n	8005eb6 <_dtoa_r+0x926>
 8005e22:	e06b      	b.n	8005efc <_dtoa_r+0x96c>
 8005e24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e2a:	e73c      	b.n	8005ca6 <_dtoa_r+0x716>
 8005e2c:	3fe00000 	.word	0x3fe00000
 8005e30:	40240000 	.word	0x40240000
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	1e5c      	subs	r4, r3, #1
 8005e38:	9b08      	ldr	r3, [sp, #32]
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	db09      	blt.n	8005e52 <_dtoa_r+0x8c2>
 8005e3e:	1b1c      	subs	r4, r3, r4
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f6bf af30 	bge.w	8005ca8 <_dtoa_r+0x718>
 8005e48:	9b00      	ldr	r3, [sp, #0]
 8005e4a:	9a03      	ldr	r2, [sp, #12]
 8005e4c:	1a9e      	subs	r6, r3, r2
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e72b      	b.n	8005caa <_dtoa_r+0x71a>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e56:	9408      	str	r4, [sp, #32]
 8005e58:	1ae3      	subs	r3, r4, r3
 8005e5a:	441a      	add	r2, r3
 8005e5c:	9e00      	ldr	r6, [sp, #0]
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	920d      	str	r2, [sp, #52]	@ 0x34
 8005e62:	2400      	movs	r4, #0
 8005e64:	e721      	b.n	8005caa <_dtoa_r+0x71a>
 8005e66:	9c08      	ldr	r4, [sp, #32]
 8005e68:	9e00      	ldr	r6, [sp, #0]
 8005e6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005e6c:	e728      	b.n	8005cc0 <_dtoa_r+0x730>
 8005e6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005e72:	e751      	b.n	8005d18 <_dtoa_r+0x788>
 8005e74:	9a08      	ldr	r2, [sp, #32]
 8005e76:	9902      	ldr	r1, [sp, #8]
 8005e78:	e750      	b.n	8005d1c <_dtoa_r+0x78c>
 8005e7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8005e7e:	e751      	b.n	8005d24 <_dtoa_r+0x794>
 8005e80:	2300      	movs	r3, #0
 8005e82:	e779      	b.n	8005d78 <_dtoa_r+0x7e8>
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	e777      	b.n	8005d78 <_dtoa_r+0x7e8>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9308      	str	r3, [sp, #32]
 8005e8c:	e779      	b.n	8005d82 <_dtoa_r+0x7f2>
 8005e8e:	d093      	beq.n	8005db8 <_dtoa_r+0x828>
 8005e90:	9a00      	ldr	r2, [sp, #0]
 8005e92:	331c      	adds	r3, #28
 8005e94:	441a      	add	r2, r3
 8005e96:	9200      	str	r2, [sp, #0]
 8005e98:	9a06      	ldr	r2, [sp, #24]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	441e      	add	r6, r3
 8005e9e:	9206      	str	r2, [sp, #24]
 8005ea0:	e78a      	b.n	8005db8 <_dtoa_r+0x828>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	e7f4      	b.n	8005e90 <_dtoa_r+0x900>
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	46b8      	mov	r8, r7
 8005eac:	dc20      	bgt.n	8005ef0 <_dtoa_r+0x960>
 8005eae:	469b      	mov	fp, r3
 8005eb0:	9b07      	ldr	r3, [sp, #28]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	dd1e      	ble.n	8005ef4 <_dtoa_r+0x964>
 8005eb6:	f1bb 0f00 	cmp.w	fp, #0
 8005eba:	f47f adb1 	bne.w	8005a20 <_dtoa_r+0x490>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	2205      	movs	r2, #5
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	f000 faa7 	bl	8006418 <__multadd>
 8005eca:	4601      	mov	r1, r0
 8005ecc:	4604      	mov	r4, r0
 8005ece:	9802      	ldr	r0, [sp, #8]
 8005ed0:	f000 fcb2 	bl	8006838 <__mcmp>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f77f ada3 	ble.w	8005a20 <_dtoa_r+0x490>
 8005eda:	4656      	mov	r6, sl
 8005edc:	2331      	movs	r3, #49	@ 0x31
 8005ede:	f806 3b01 	strb.w	r3, [r6], #1
 8005ee2:	f108 0801 	add.w	r8, r8, #1
 8005ee6:	e59f      	b.n	8005a28 <_dtoa_r+0x498>
 8005ee8:	9c03      	ldr	r4, [sp, #12]
 8005eea:	46b8      	mov	r8, r7
 8005eec:	4625      	mov	r5, r4
 8005eee:	e7f4      	b.n	8005eda <_dtoa_r+0x94a>
 8005ef0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8101 	beq.w	80060fe <_dtoa_r+0xb6e>
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	dd05      	ble.n	8005f0c <_dtoa_r+0x97c>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4632      	mov	r2, r6
 8005f04:	4648      	mov	r0, r9
 8005f06:	f000 fc2b 	bl	8006760 <__lshift>
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	9b08      	ldr	r3, [sp, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d05c      	beq.n	8005fcc <_dtoa_r+0xa3c>
 8005f12:	6869      	ldr	r1, [r5, #4]
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 fa1d 	bl	8006354 <_Balloc>
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	b928      	cbnz	r0, 8005f2a <_dtoa_r+0x99a>
 8005f1e:	4b82      	ldr	r3, [pc, #520]	@ (8006128 <_dtoa_r+0xb98>)
 8005f20:	4602      	mov	r2, r0
 8005f22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f26:	f7ff bb4a 	b.w	80055be <_dtoa_r+0x2e>
 8005f2a:	692a      	ldr	r2, [r5, #16]
 8005f2c:	3202      	adds	r2, #2
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	f105 010c 	add.w	r1, r5, #12
 8005f34:	300c      	adds	r0, #12
 8005f36:	f7ff fa74 	bl	8005422 <memcpy>
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4648      	mov	r0, r9
 8005f40:	f000 fc0e 	bl	8006760 <__lshift>
 8005f44:	f10a 0301 	add.w	r3, sl, #1
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	eb0a 030b 	add.w	r3, sl, fp
 8005f4e:	9308      	str	r3, [sp, #32]
 8005f50:	9b04      	ldr	r3, [sp, #16]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	462f      	mov	r7, r5
 8005f58:	9306      	str	r3, [sp, #24]
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	9802      	ldr	r0, [sp, #8]
 8005f60:	4621      	mov	r1, r4
 8005f62:	f103 3bff 	add.w	fp, r3, #4294967295
 8005f66:	f7ff fa89 	bl	800547c <quorem>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	3330      	adds	r3, #48	@ 0x30
 8005f6e:	9003      	str	r0, [sp, #12]
 8005f70:	4639      	mov	r1, r7
 8005f72:	9802      	ldr	r0, [sp, #8]
 8005f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f76:	f000 fc5f 	bl	8006838 <__mcmp>
 8005f7a:	462a      	mov	r2, r5
 8005f7c:	9004      	str	r0, [sp, #16]
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4648      	mov	r0, r9
 8005f82:	f000 fc75 	bl	8006870 <__mdiff>
 8005f86:	68c2      	ldr	r2, [r0, #12]
 8005f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	bb02      	cbnz	r2, 8005fd0 <_dtoa_r+0xa40>
 8005f8e:	4601      	mov	r1, r0
 8005f90:	9802      	ldr	r0, [sp, #8]
 8005f92:	f000 fc51 	bl	8006838 <__mcmp>
 8005f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f98:	4602      	mov	r2, r0
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4648      	mov	r0, r9
 8005f9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa2:	f000 fa17 	bl	80063d4 <_Bfree>
 8005fa6:	9b07      	ldr	r3, [sp, #28]
 8005fa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005faa:	9e00      	ldr	r6, [sp, #0]
 8005fac:	ea42 0103 	orr.w	r1, r2, r3
 8005fb0:	9b06      	ldr	r3, [sp, #24]
 8005fb2:	4319      	orrs	r1, r3
 8005fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb6:	d10d      	bne.n	8005fd4 <_dtoa_r+0xa44>
 8005fb8:	2b39      	cmp	r3, #57	@ 0x39
 8005fba:	d027      	beq.n	800600c <_dtoa_r+0xa7c>
 8005fbc:	9a04      	ldr	r2, [sp, #16]
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	dd01      	ble.n	8005fc6 <_dtoa_r+0xa36>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	3331      	adds	r3, #49	@ 0x31
 8005fc6:	f88b 3000 	strb.w	r3, [fp]
 8005fca:	e52e      	b.n	8005a2a <_dtoa_r+0x49a>
 8005fcc:	4628      	mov	r0, r5
 8005fce:	e7b9      	b.n	8005f44 <_dtoa_r+0x9b4>
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	e7e2      	b.n	8005f9a <_dtoa_r+0xa0a>
 8005fd4:	9904      	ldr	r1, [sp, #16]
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	db04      	blt.n	8005fe4 <_dtoa_r+0xa54>
 8005fda:	9807      	ldr	r0, [sp, #28]
 8005fdc:	4301      	orrs	r1, r0
 8005fde:	9806      	ldr	r0, [sp, #24]
 8005fe0:	4301      	orrs	r1, r0
 8005fe2:	d120      	bne.n	8006026 <_dtoa_r+0xa96>
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	ddee      	ble.n	8005fc6 <_dtoa_r+0xa36>
 8005fe8:	9902      	ldr	r1, [sp, #8]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	2201      	movs	r2, #1
 8005fee:	4648      	mov	r0, r9
 8005ff0:	f000 fbb6 	bl	8006760 <__lshift>
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	9002      	str	r0, [sp, #8]
 8005ff8:	f000 fc1e 	bl	8006838 <__mcmp>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	9b00      	ldr	r3, [sp, #0]
 8006000:	dc02      	bgt.n	8006008 <_dtoa_r+0xa78>
 8006002:	d1e0      	bne.n	8005fc6 <_dtoa_r+0xa36>
 8006004:	07da      	lsls	r2, r3, #31
 8006006:	d5de      	bpl.n	8005fc6 <_dtoa_r+0xa36>
 8006008:	2b39      	cmp	r3, #57	@ 0x39
 800600a:	d1da      	bne.n	8005fc2 <_dtoa_r+0xa32>
 800600c:	2339      	movs	r3, #57	@ 0x39
 800600e:	f88b 3000 	strb.w	r3, [fp]
 8006012:	4633      	mov	r3, r6
 8006014:	461e      	mov	r6, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800601c:	2a39      	cmp	r2, #57	@ 0x39
 800601e:	d04e      	beq.n	80060be <_dtoa_r+0xb2e>
 8006020:	3201      	adds	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e501      	b.n	8005a2a <_dtoa_r+0x49a>
 8006026:	2a00      	cmp	r2, #0
 8006028:	dd03      	ble.n	8006032 <_dtoa_r+0xaa2>
 800602a:	2b39      	cmp	r3, #57	@ 0x39
 800602c:	d0ee      	beq.n	800600c <_dtoa_r+0xa7c>
 800602e:	3301      	adds	r3, #1
 8006030:	e7c9      	b.n	8005fc6 <_dtoa_r+0xa36>
 8006032:	9a00      	ldr	r2, [sp, #0]
 8006034:	9908      	ldr	r1, [sp, #32]
 8006036:	f802 3c01 	strb.w	r3, [r2, #-1]
 800603a:	428a      	cmp	r2, r1
 800603c:	d028      	beq.n	8006090 <_dtoa_r+0xb00>
 800603e:	9902      	ldr	r1, [sp, #8]
 8006040:	2300      	movs	r3, #0
 8006042:	220a      	movs	r2, #10
 8006044:	4648      	mov	r0, r9
 8006046:	f000 f9e7 	bl	8006418 <__multadd>
 800604a:	42af      	cmp	r7, r5
 800604c:	9002      	str	r0, [sp, #8]
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	f04f 020a 	mov.w	r2, #10
 8006056:	4639      	mov	r1, r7
 8006058:	4648      	mov	r0, r9
 800605a:	d107      	bne.n	800606c <_dtoa_r+0xadc>
 800605c:	f000 f9dc 	bl	8006418 <__multadd>
 8006060:	4607      	mov	r7, r0
 8006062:	4605      	mov	r5, r0
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	e777      	b.n	8005f5c <_dtoa_r+0x9cc>
 800606c:	f000 f9d4 	bl	8006418 <__multadd>
 8006070:	4629      	mov	r1, r5
 8006072:	4607      	mov	r7, r0
 8006074:	2300      	movs	r3, #0
 8006076:	220a      	movs	r2, #10
 8006078:	4648      	mov	r0, r9
 800607a:	f000 f9cd 	bl	8006418 <__multadd>
 800607e:	4605      	mov	r5, r0
 8006080:	e7f0      	b.n	8006064 <_dtoa_r+0xad4>
 8006082:	f1bb 0f00 	cmp.w	fp, #0
 8006086:	bfcc      	ite	gt
 8006088:	465e      	movgt	r6, fp
 800608a:	2601      	movle	r6, #1
 800608c:	4456      	add	r6, sl
 800608e:	2700      	movs	r7, #0
 8006090:	9902      	ldr	r1, [sp, #8]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	4648      	mov	r0, r9
 8006098:	f000 fb62 	bl	8006760 <__lshift>
 800609c:	4621      	mov	r1, r4
 800609e:	9002      	str	r0, [sp, #8]
 80060a0:	f000 fbca 	bl	8006838 <__mcmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	dcb4      	bgt.n	8006012 <_dtoa_r+0xa82>
 80060a8:	d102      	bne.n	80060b0 <_dtoa_r+0xb20>
 80060aa:	9b00      	ldr	r3, [sp, #0]
 80060ac:	07db      	lsls	r3, r3, #31
 80060ae:	d4b0      	bmi.n	8006012 <_dtoa_r+0xa82>
 80060b0:	4633      	mov	r3, r6
 80060b2:	461e      	mov	r6, r3
 80060b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060b8:	2a30      	cmp	r2, #48	@ 0x30
 80060ba:	d0fa      	beq.n	80060b2 <_dtoa_r+0xb22>
 80060bc:	e4b5      	b.n	8005a2a <_dtoa_r+0x49a>
 80060be:	459a      	cmp	sl, r3
 80060c0:	d1a8      	bne.n	8006014 <_dtoa_r+0xa84>
 80060c2:	2331      	movs	r3, #49	@ 0x31
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	f88a 3000 	strb.w	r3, [sl]
 80060cc:	e4ad      	b.n	8005a2a <_dtoa_r+0x49a>
 80060ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800612c <_dtoa_r+0xb9c>
 80060d4:	b11b      	cbz	r3, 80060de <_dtoa_r+0xb4e>
 80060d6:	f10a 0308 	add.w	r3, sl, #8
 80060da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4650      	mov	r0, sl
 80060e0:	b017      	add	sp, #92	@ 0x5c
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f77f ae2e 	ble.w	8005d4a <_dtoa_r+0x7ba>
 80060ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060f0:	9308      	str	r3, [sp, #32]
 80060f2:	2001      	movs	r0, #1
 80060f4:	e64d      	b.n	8005d92 <_dtoa_r+0x802>
 80060f6:	f1bb 0f00 	cmp.w	fp, #0
 80060fa:	f77f aed9 	ble.w	8005eb0 <_dtoa_r+0x920>
 80060fe:	4656      	mov	r6, sl
 8006100:	9802      	ldr	r0, [sp, #8]
 8006102:	4621      	mov	r1, r4
 8006104:	f7ff f9ba 	bl	800547c <quorem>
 8006108:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800610c:	f806 3b01 	strb.w	r3, [r6], #1
 8006110:	eba6 020a 	sub.w	r2, r6, sl
 8006114:	4593      	cmp	fp, r2
 8006116:	ddb4      	ble.n	8006082 <_dtoa_r+0xaf2>
 8006118:	9902      	ldr	r1, [sp, #8]
 800611a:	2300      	movs	r3, #0
 800611c:	220a      	movs	r2, #10
 800611e:	4648      	mov	r0, r9
 8006120:	f000 f97a 	bl	8006418 <__multadd>
 8006124:	9002      	str	r0, [sp, #8]
 8006126:	e7eb      	b.n	8006100 <_dtoa_r+0xb70>
 8006128:	08007246 	.word	0x08007246
 800612c:	080071ca 	.word	0x080071ca

08006130 <_free_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4605      	mov	r5, r0
 8006134:	2900      	cmp	r1, #0
 8006136:	d041      	beq.n	80061bc <_free_r+0x8c>
 8006138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613c:	1f0c      	subs	r4, r1, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfb8      	it	lt
 8006142:	18e4      	addlt	r4, r4, r3
 8006144:	f000 f8fa 	bl	800633c <__malloc_lock>
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <_free_r+0x90>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	b933      	cbnz	r3, 800615c <_free_r+0x2c>
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	6014      	str	r4, [r2, #0]
 8006152:	4628      	mov	r0, r5
 8006154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006158:	f000 b8f6 	b.w	8006348 <__malloc_unlock>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d908      	bls.n	8006172 <_free_r+0x42>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	1821      	adds	r1, r4, r0
 8006164:	428b      	cmp	r3, r1
 8006166:	bf01      	itttt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	1809      	addeq	r1, r1, r0
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	e7ed      	b.n	800614e <_free_r+0x1e>
 8006172:	461a      	mov	r2, r3
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b10b      	cbz	r3, 800617c <_free_r+0x4c>
 8006178:	42a3      	cmp	r3, r4
 800617a:	d9fa      	bls.n	8006172 <_free_r+0x42>
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	1850      	adds	r0, r2, r1
 8006180:	42a0      	cmp	r0, r4
 8006182:	d10b      	bne.n	800619c <_free_r+0x6c>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	4401      	add	r1, r0
 8006188:	1850      	adds	r0, r2, r1
 800618a:	4283      	cmp	r3, r0
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	d1e0      	bne.n	8006152 <_free_r+0x22>
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	6053      	str	r3, [r2, #4]
 8006196:	4408      	add	r0, r1
 8006198:	6010      	str	r0, [r2, #0]
 800619a:	e7da      	b.n	8006152 <_free_r+0x22>
 800619c:	d902      	bls.n	80061a4 <_free_r+0x74>
 800619e:	230c      	movs	r3, #12
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	e7d6      	b.n	8006152 <_free_r+0x22>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	1821      	adds	r1, r4, r0
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf04      	itt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	bf04      	itt	eq
 80061b4:	1809      	addeq	r1, r1, r0
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	6054      	str	r4, [r2, #4]
 80061ba:	e7ca      	b.n	8006152 <_free_r+0x22>
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	bf00      	nop
 80061c0:	20000998 	.word	0x20000998

080061c4 <malloc>:
 80061c4:	4b02      	ldr	r3, [pc, #8]	@ (80061d0 <malloc+0xc>)
 80061c6:	4601      	mov	r1, r0
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f000 b825 	b.w	8006218 <_malloc_r>
 80061ce:	bf00      	nop
 80061d0:	20000180 	.word	0x20000180

080061d4 <sbrk_aligned>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006214 <sbrk_aligned+0x40>)
 80061d8:	460c      	mov	r4, r1
 80061da:	6831      	ldr	r1, [r6, #0]
 80061dc:	4605      	mov	r5, r0
 80061de:	b911      	cbnz	r1, 80061e6 <sbrk_aligned+0x12>
 80061e0:	f000 fec2 	bl	8006f68 <_sbrk_r>
 80061e4:	6030      	str	r0, [r6, #0]
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 febd 	bl	8006f68 <_sbrk_r>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	d103      	bne.n	80061fa <sbrk_aligned+0x26>
 80061f2:	f04f 34ff 	mov.w	r4, #4294967295
 80061f6:	4620      	mov	r0, r4
 80061f8:	bd70      	pop	{r4, r5, r6, pc}
 80061fa:	1cc4      	adds	r4, r0, #3
 80061fc:	f024 0403 	bic.w	r4, r4, #3
 8006200:	42a0      	cmp	r0, r4
 8006202:	d0f8      	beq.n	80061f6 <sbrk_aligned+0x22>
 8006204:	1a21      	subs	r1, r4, r0
 8006206:	4628      	mov	r0, r5
 8006208:	f000 feae 	bl	8006f68 <_sbrk_r>
 800620c:	3001      	adds	r0, #1
 800620e:	d1f2      	bne.n	80061f6 <sbrk_aligned+0x22>
 8006210:	e7ef      	b.n	80061f2 <sbrk_aligned+0x1e>
 8006212:	bf00      	nop
 8006214:	20000994 	.word	0x20000994

08006218 <_malloc_r>:
 8006218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800621c:	1ccd      	adds	r5, r1, #3
 800621e:	f025 0503 	bic.w	r5, r5, #3
 8006222:	3508      	adds	r5, #8
 8006224:	2d0c      	cmp	r5, #12
 8006226:	bf38      	it	cc
 8006228:	250c      	movcc	r5, #12
 800622a:	2d00      	cmp	r5, #0
 800622c:	4606      	mov	r6, r0
 800622e:	db01      	blt.n	8006234 <_malloc_r+0x1c>
 8006230:	42a9      	cmp	r1, r5
 8006232:	d904      	bls.n	800623e <_malloc_r+0x26>
 8006234:	230c      	movs	r3, #12
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	2000      	movs	r0, #0
 800623a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006314 <_malloc_r+0xfc>
 8006242:	f000 f87b 	bl	800633c <__malloc_lock>
 8006246:	f8d8 3000 	ldr.w	r3, [r8]
 800624a:	461c      	mov	r4, r3
 800624c:	bb44      	cbnz	r4, 80062a0 <_malloc_r+0x88>
 800624e:	4629      	mov	r1, r5
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff ffbf 	bl	80061d4 <sbrk_aligned>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	4604      	mov	r4, r0
 800625a:	d158      	bne.n	800630e <_malloc_r+0xf6>
 800625c:	f8d8 4000 	ldr.w	r4, [r8]
 8006260:	4627      	mov	r7, r4
 8006262:	2f00      	cmp	r7, #0
 8006264:	d143      	bne.n	80062ee <_malloc_r+0xd6>
 8006266:	2c00      	cmp	r4, #0
 8006268:	d04b      	beq.n	8006302 <_malloc_r+0xea>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	4639      	mov	r1, r7
 800626e:	4630      	mov	r0, r6
 8006270:	eb04 0903 	add.w	r9, r4, r3
 8006274:	f000 fe78 	bl	8006f68 <_sbrk_r>
 8006278:	4581      	cmp	r9, r0
 800627a:	d142      	bne.n	8006302 <_malloc_r+0xea>
 800627c:	6821      	ldr	r1, [r4, #0]
 800627e:	1a6d      	subs	r5, r5, r1
 8006280:	4629      	mov	r1, r5
 8006282:	4630      	mov	r0, r6
 8006284:	f7ff ffa6 	bl	80061d4 <sbrk_aligned>
 8006288:	3001      	adds	r0, #1
 800628a:	d03a      	beq.n	8006302 <_malloc_r+0xea>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	442b      	add	r3, r5
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	f8d8 3000 	ldr.w	r3, [r8]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	bb62      	cbnz	r2, 80062f4 <_malloc_r+0xdc>
 800629a:	f8c8 7000 	str.w	r7, [r8]
 800629e:	e00f      	b.n	80062c0 <_malloc_r+0xa8>
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	1b52      	subs	r2, r2, r5
 80062a4:	d420      	bmi.n	80062e8 <_malloc_r+0xd0>
 80062a6:	2a0b      	cmp	r2, #11
 80062a8:	d917      	bls.n	80062da <_malloc_r+0xc2>
 80062aa:	1961      	adds	r1, r4, r5
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	6025      	str	r5, [r4, #0]
 80062b0:	bf18      	it	ne
 80062b2:	6059      	strne	r1, [r3, #4]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	bf08      	it	eq
 80062b8:	f8c8 1000 	streq.w	r1, [r8]
 80062bc:	5162      	str	r2, [r4, r5]
 80062be:	604b      	str	r3, [r1, #4]
 80062c0:	4630      	mov	r0, r6
 80062c2:	f000 f841 	bl	8006348 <__malloc_unlock>
 80062c6:	f104 000b 	add.w	r0, r4, #11
 80062ca:	1d23      	adds	r3, r4, #4
 80062cc:	f020 0007 	bic.w	r0, r0, #7
 80062d0:	1ac2      	subs	r2, r0, r3
 80062d2:	bf1c      	itt	ne
 80062d4:	1a1b      	subne	r3, r3, r0
 80062d6:	50a3      	strne	r3, [r4, r2]
 80062d8:	e7af      	b.n	800623a <_malloc_r+0x22>
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	42a3      	cmp	r3, r4
 80062de:	bf0c      	ite	eq
 80062e0:	f8c8 2000 	streq.w	r2, [r8]
 80062e4:	605a      	strne	r2, [r3, #4]
 80062e6:	e7eb      	b.n	80062c0 <_malloc_r+0xa8>
 80062e8:	4623      	mov	r3, r4
 80062ea:	6864      	ldr	r4, [r4, #4]
 80062ec:	e7ae      	b.n	800624c <_malloc_r+0x34>
 80062ee:	463c      	mov	r4, r7
 80062f0:	687f      	ldr	r7, [r7, #4]
 80062f2:	e7b6      	b.n	8006262 <_malloc_r+0x4a>
 80062f4:	461a      	mov	r2, r3
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d1fb      	bne.n	80062f4 <_malloc_r+0xdc>
 80062fc:	2300      	movs	r3, #0
 80062fe:	6053      	str	r3, [r2, #4]
 8006300:	e7de      	b.n	80062c0 <_malloc_r+0xa8>
 8006302:	230c      	movs	r3, #12
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	4630      	mov	r0, r6
 8006308:	f000 f81e 	bl	8006348 <__malloc_unlock>
 800630c:	e794      	b.n	8006238 <_malloc_r+0x20>
 800630e:	6005      	str	r5, [r0, #0]
 8006310:	e7d6      	b.n	80062c0 <_malloc_r+0xa8>
 8006312:	bf00      	nop
 8006314:	20000998 	.word	0x20000998

08006318 <__ascii_mbtowc>:
 8006318:	b082      	sub	sp, #8
 800631a:	b901      	cbnz	r1, 800631e <__ascii_mbtowc+0x6>
 800631c:	a901      	add	r1, sp, #4
 800631e:	b142      	cbz	r2, 8006332 <__ascii_mbtowc+0x1a>
 8006320:	b14b      	cbz	r3, 8006336 <__ascii_mbtowc+0x1e>
 8006322:	7813      	ldrb	r3, [r2, #0]
 8006324:	600b      	str	r3, [r1, #0]
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	1e10      	subs	r0, r2, #0
 800632a:	bf18      	it	ne
 800632c:	2001      	movne	r0, #1
 800632e:	b002      	add	sp, #8
 8006330:	4770      	bx	lr
 8006332:	4610      	mov	r0, r2
 8006334:	e7fb      	b.n	800632e <__ascii_mbtowc+0x16>
 8006336:	f06f 0001 	mvn.w	r0, #1
 800633a:	e7f8      	b.n	800632e <__ascii_mbtowc+0x16>

0800633c <__malloc_lock>:
 800633c:	4801      	ldr	r0, [pc, #4]	@ (8006344 <__malloc_lock+0x8>)
 800633e:	f7ff b86e 	b.w	800541e <__retarget_lock_acquire_recursive>
 8006342:	bf00      	nop
 8006344:	20000990 	.word	0x20000990

08006348 <__malloc_unlock>:
 8006348:	4801      	ldr	r0, [pc, #4]	@ (8006350 <__malloc_unlock+0x8>)
 800634a:	f7ff b869 	b.w	8005420 <__retarget_lock_release_recursive>
 800634e:	bf00      	nop
 8006350:	20000990 	.word	0x20000990

08006354 <_Balloc>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	69c6      	ldr	r6, [r0, #28]
 8006358:	4604      	mov	r4, r0
 800635a:	460d      	mov	r5, r1
 800635c:	b976      	cbnz	r6, 800637c <_Balloc+0x28>
 800635e:	2010      	movs	r0, #16
 8006360:	f7ff ff30 	bl	80061c4 <malloc>
 8006364:	4602      	mov	r2, r0
 8006366:	61e0      	str	r0, [r4, #28]
 8006368:	b920      	cbnz	r0, 8006374 <_Balloc+0x20>
 800636a:	4b18      	ldr	r3, [pc, #96]	@ (80063cc <_Balloc+0x78>)
 800636c:	4818      	ldr	r0, [pc, #96]	@ (80063d0 <_Balloc+0x7c>)
 800636e:	216b      	movs	r1, #107	@ 0x6b
 8006370:	f7ff f866 	bl	8005440 <__assert_func>
 8006374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006378:	6006      	str	r6, [r0, #0]
 800637a:	60c6      	str	r6, [r0, #12]
 800637c:	69e6      	ldr	r6, [r4, #28]
 800637e:	68f3      	ldr	r3, [r6, #12]
 8006380:	b183      	cbz	r3, 80063a4 <_Balloc+0x50>
 8006382:	69e3      	ldr	r3, [r4, #28]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800638a:	b9b8      	cbnz	r0, 80063bc <_Balloc+0x68>
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f605 	lsl.w	r6, r1, r5
 8006392:	1d72      	adds	r2, r6, #5
 8006394:	0092      	lsls	r2, r2, #2
 8006396:	4620      	mov	r0, r4
 8006398:	f000 fdfd 	bl	8006f96 <_calloc_r>
 800639c:	b160      	cbz	r0, 80063b8 <_Balloc+0x64>
 800639e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063a2:	e00e      	b.n	80063c2 <_Balloc+0x6e>
 80063a4:	2221      	movs	r2, #33	@ 0x21
 80063a6:	2104      	movs	r1, #4
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fdf4 	bl	8006f96 <_calloc_r>
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	60f0      	str	r0, [r6, #12]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e4      	bne.n	8006382 <_Balloc+0x2e>
 80063b8:	2000      	movs	r0, #0
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	6802      	ldr	r2, [r0, #0]
 80063be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063c2:	2300      	movs	r3, #0
 80063c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063c8:	e7f7      	b.n	80063ba <_Balloc+0x66>
 80063ca:	bf00      	nop
 80063cc:	080071d7 	.word	0x080071d7
 80063d0:	08007257 	.word	0x08007257

080063d4 <_Bfree>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	69c6      	ldr	r6, [r0, #28]
 80063d8:	4605      	mov	r5, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	b976      	cbnz	r6, 80063fc <_Bfree+0x28>
 80063de:	2010      	movs	r0, #16
 80063e0:	f7ff fef0 	bl	80061c4 <malloc>
 80063e4:	4602      	mov	r2, r0
 80063e6:	61e8      	str	r0, [r5, #28]
 80063e8:	b920      	cbnz	r0, 80063f4 <_Bfree+0x20>
 80063ea:	4b09      	ldr	r3, [pc, #36]	@ (8006410 <_Bfree+0x3c>)
 80063ec:	4809      	ldr	r0, [pc, #36]	@ (8006414 <_Bfree+0x40>)
 80063ee:	218f      	movs	r1, #143	@ 0x8f
 80063f0:	f7ff f826 	bl	8005440 <__assert_func>
 80063f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063f8:	6006      	str	r6, [r0, #0]
 80063fa:	60c6      	str	r6, [r0, #12]
 80063fc:	b13c      	cbz	r4, 800640e <_Bfree+0x3a>
 80063fe:	69eb      	ldr	r3, [r5, #28]
 8006400:	6862      	ldr	r2, [r4, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006408:	6021      	str	r1, [r4, #0]
 800640a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	080071d7 	.word	0x080071d7
 8006414:	08007257 	.word	0x08007257

08006418 <__multadd>:
 8006418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641c:	690d      	ldr	r5, [r1, #16]
 800641e:	4607      	mov	r7, r0
 8006420:	460c      	mov	r4, r1
 8006422:	461e      	mov	r6, r3
 8006424:	f101 0c14 	add.w	ip, r1, #20
 8006428:	2000      	movs	r0, #0
 800642a:	f8dc 3000 	ldr.w	r3, [ip]
 800642e:	b299      	uxth	r1, r3
 8006430:	fb02 6101 	mla	r1, r2, r1, r6
 8006434:	0c1e      	lsrs	r6, r3, #16
 8006436:	0c0b      	lsrs	r3, r1, #16
 8006438:	fb02 3306 	mla	r3, r2, r6, r3
 800643c:	b289      	uxth	r1, r1
 800643e:	3001      	adds	r0, #1
 8006440:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006444:	4285      	cmp	r5, r0
 8006446:	f84c 1b04 	str.w	r1, [ip], #4
 800644a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800644e:	dcec      	bgt.n	800642a <__multadd+0x12>
 8006450:	b30e      	cbz	r6, 8006496 <__multadd+0x7e>
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	42ab      	cmp	r3, r5
 8006456:	dc19      	bgt.n	800648c <__multadd+0x74>
 8006458:	6861      	ldr	r1, [r4, #4]
 800645a:	4638      	mov	r0, r7
 800645c:	3101      	adds	r1, #1
 800645e:	f7ff ff79 	bl	8006354 <_Balloc>
 8006462:	4680      	mov	r8, r0
 8006464:	b928      	cbnz	r0, 8006472 <__multadd+0x5a>
 8006466:	4602      	mov	r2, r0
 8006468:	4b0c      	ldr	r3, [pc, #48]	@ (800649c <__multadd+0x84>)
 800646a:	480d      	ldr	r0, [pc, #52]	@ (80064a0 <__multadd+0x88>)
 800646c:	21ba      	movs	r1, #186	@ 0xba
 800646e:	f7fe ffe7 	bl	8005440 <__assert_func>
 8006472:	6922      	ldr	r2, [r4, #16]
 8006474:	3202      	adds	r2, #2
 8006476:	f104 010c 	add.w	r1, r4, #12
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	300c      	adds	r0, #12
 800647e:	f7fe ffd0 	bl	8005422 <memcpy>
 8006482:	4621      	mov	r1, r4
 8006484:	4638      	mov	r0, r7
 8006486:	f7ff ffa5 	bl	80063d4 <_Bfree>
 800648a:	4644      	mov	r4, r8
 800648c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006490:	3501      	adds	r5, #1
 8006492:	615e      	str	r6, [r3, #20]
 8006494:	6125      	str	r5, [r4, #16]
 8006496:	4620      	mov	r0, r4
 8006498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800649c:	08007246 	.word	0x08007246
 80064a0:	08007257 	.word	0x08007257

080064a4 <__hi0bits>:
 80064a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064a8:	4603      	mov	r3, r0
 80064aa:	bf36      	itet	cc
 80064ac:	0403      	lslcc	r3, r0, #16
 80064ae:	2000      	movcs	r0, #0
 80064b0:	2010      	movcc	r0, #16
 80064b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064b6:	bf3c      	itt	cc
 80064b8:	021b      	lslcc	r3, r3, #8
 80064ba:	3008      	addcc	r0, #8
 80064bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064c0:	bf3c      	itt	cc
 80064c2:	011b      	lslcc	r3, r3, #4
 80064c4:	3004      	addcc	r0, #4
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ca:	bf3c      	itt	cc
 80064cc:	009b      	lslcc	r3, r3, #2
 80064ce:	3002      	addcc	r0, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db05      	blt.n	80064e0 <__hi0bits+0x3c>
 80064d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80064d8:	f100 0001 	add.w	r0, r0, #1
 80064dc:	bf08      	it	eq
 80064de:	2020      	moveq	r0, #32
 80064e0:	4770      	bx	lr

080064e2 <__lo0bits>:
 80064e2:	6803      	ldr	r3, [r0, #0]
 80064e4:	4602      	mov	r2, r0
 80064e6:	f013 0007 	ands.w	r0, r3, #7
 80064ea:	d00b      	beq.n	8006504 <__lo0bits+0x22>
 80064ec:	07d9      	lsls	r1, r3, #31
 80064ee:	d421      	bmi.n	8006534 <__lo0bits+0x52>
 80064f0:	0798      	lsls	r0, r3, #30
 80064f2:	bf49      	itett	mi
 80064f4:	085b      	lsrmi	r3, r3, #1
 80064f6:	089b      	lsrpl	r3, r3, #2
 80064f8:	2001      	movmi	r0, #1
 80064fa:	6013      	strmi	r3, [r2, #0]
 80064fc:	bf5c      	itt	pl
 80064fe:	6013      	strpl	r3, [r2, #0]
 8006500:	2002      	movpl	r0, #2
 8006502:	4770      	bx	lr
 8006504:	b299      	uxth	r1, r3
 8006506:	b909      	cbnz	r1, 800650c <__lo0bits+0x2a>
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	2010      	movs	r0, #16
 800650c:	b2d9      	uxtb	r1, r3
 800650e:	b909      	cbnz	r1, 8006514 <__lo0bits+0x32>
 8006510:	3008      	adds	r0, #8
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	0719      	lsls	r1, r3, #28
 8006516:	bf04      	itt	eq
 8006518:	091b      	lsreq	r3, r3, #4
 800651a:	3004      	addeq	r0, #4
 800651c:	0799      	lsls	r1, r3, #30
 800651e:	bf04      	itt	eq
 8006520:	089b      	lsreq	r3, r3, #2
 8006522:	3002      	addeq	r0, #2
 8006524:	07d9      	lsls	r1, r3, #31
 8006526:	d403      	bmi.n	8006530 <__lo0bits+0x4e>
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	f100 0001 	add.w	r0, r0, #1
 800652e:	d003      	beq.n	8006538 <__lo0bits+0x56>
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	4770      	bx	lr
 8006534:	2000      	movs	r0, #0
 8006536:	4770      	bx	lr
 8006538:	2020      	movs	r0, #32
 800653a:	4770      	bx	lr

0800653c <__i2b>:
 800653c:	b510      	push	{r4, lr}
 800653e:	460c      	mov	r4, r1
 8006540:	2101      	movs	r1, #1
 8006542:	f7ff ff07 	bl	8006354 <_Balloc>
 8006546:	4602      	mov	r2, r0
 8006548:	b928      	cbnz	r0, 8006556 <__i2b+0x1a>
 800654a:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <__i2b+0x24>)
 800654c:	4805      	ldr	r0, [pc, #20]	@ (8006564 <__i2b+0x28>)
 800654e:	f240 1145 	movw	r1, #325	@ 0x145
 8006552:	f7fe ff75 	bl	8005440 <__assert_func>
 8006556:	2301      	movs	r3, #1
 8006558:	6144      	str	r4, [r0, #20]
 800655a:	6103      	str	r3, [r0, #16]
 800655c:	bd10      	pop	{r4, pc}
 800655e:	bf00      	nop
 8006560:	08007246 	.word	0x08007246
 8006564:	08007257 	.word	0x08007257

08006568 <__multiply>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	4617      	mov	r7, r2
 800656e:	690a      	ldr	r2, [r1, #16]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	bfa8      	it	ge
 8006576:	463b      	movge	r3, r7
 8006578:	4689      	mov	r9, r1
 800657a:	bfa4      	itt	ge
 800657c:	460f      	movge	r7, r1
 800657e:	4699      	movge	r9, r3
 8006580:	693d      	ldr	r5, [r7, #16]
 8006582:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	eb05 060a 	add.w	r6, r5, sl
 800658e:	42b3      	cmp	r3, r6
 8006590:	b085      	sub	sp, #20
 8006592:	bfb8      	it	lt
 8006594:	3101      	addlt	r1, #1
 8006596:	f7ff fedd 	bl	8006354 <_Balloc>
 800659a:	b930      	cbnz	r0, 80065aa <__multiply+0x42>
 800659c:	4602      	mov	r2, r0
 800659e:	4b41      	ldr	r3, [pc, #260]	@ (80066a4 <__multiply+0x13c>)
 80065a0:	4841      	ldr	r0, [pc, #260]	@ (80066a8 <__multiply+0x140>)
 80065a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065a6:	f7fe ff4b 	bl	8005440 <__assert_func>
 80065aa:	f100 0414 	add.w	r4, r0, #20
 80065ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80065b2:	4623      	mov	r3, r4
 80065b4:	2200      	movs	r2, #0
 80065b6:	4573      	cmp	r3, lr
 80065b8:	d320      	bcc.n	80065fc <__multiply+0x94>
 80065ba:	f107 0814 	add.w	r8, r7, #20
 80065be:	f109 0114 	add.w	r1, r9, #20
 80065c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80065c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	1beb      	subs	r3, r5, r7
 80065ce:	3b15      	subs	r3, #21
 80065d0:	f023 0303 	bic.w	r3, r3, #3
 80065d4:	3304      	adds	r3, #4
 80065d6:	3715      	adds	r7, #21
 80065d8:	42bd      	cmp	r5, r7
 80065da:	bf38      	it	cc
 80065dc:	2304      	movcc	r3, #4
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	428b      	cmp	r3, r1
 80065e6:	d80c      	bhi.n	8006602 <__multiply+0x9a>
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	dd03      	ble.n	80065f4 <__multiply+0x8c>
 80065ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d055      	beq.n	80066a0 <__multiply+0x138>
 80065f4:	6106      	str	r6, [r0, #16]
 80065f6:	b005      	add	sp, #20
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	f843 2b04 	str.w	r2, [r3], #4
 8006600:	e7d9      	b.n	80065b6 <__multiply+0x4e>
 8006602:	f8b1 a000 	ldrh.w	sl, [r1]
 8006606:	f1ba 0f00 	cmp.w	sl, #0
 800660a:	d01f      	beq.n	800664c <__multiply+0xe4>
 800660c:	46c4      	mov	ip, r8
 800660e:	46a1      	mov	r9, r4
 8006610:	2700      	movs	r7, #0
 8006612:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006616:	f8d9 3000 	ldr.w	r3, [r9]
 800661a:	fa1f fb82 	uxth.w	fp, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	fb0a 330b 	mla	r3, sl, fp, r3
 8006624:	443b      	add	r3, r7
 8006626:	f8d9 7000 	ldr.w	r7, [r9]
 800662a:	0c12      	lsrs	r2, r2, #16
 800662c:	0c3f      	lsrs	r7, r7, #16
 800662e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006632:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800663c:	4565      	cmp	r5, ip
 800663e:	f849 3b04 	str.w	r3, [r9], #4
 8006642:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006646:	d8e4      	bhi.n	8006612 <__multiply+0xaa>
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	50e7      	str	r7, [r4, r3]
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006652:	3104      	adds	r1, #4
 8006654:	f1b9 0f00 	cmp.w	r9, #0
 8006658:	d020      	beq.n	800669c <__multiply+0x134>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	4647      	mov	r7, r8
 800665e:	46a4      	mov	ip, r4
 8006660:	f04f 0a00 	mov.w	sl, #0
 8006664:	f8b7 b000 	ldrh.w	fp, [r7]
 8006668:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800666c:	fb09 220b 	mla	r2, r9, fp, r2
 8006670:	4452      	add	r2, sl
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006678:	f84c 3b04 	str.w	r3, [ip], #4
 800667c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006684:	f8bc 3000 	ldrh.w	r3, [ip]
 8006688:	fb09 330a 	mla	r3, r9, sl, r3
 800668c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006690:	42bd      	cmp	r5, r7
 8006692:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006696:	d8e5      	bhi.n	8006664 <__multiply+0xfc>
 8006698:	9a01      	ldr	r2, [sp, #4]
 800669a:	50a3      	str	r3, [r4, r2]
 800669c:	3404      	adds	r4, #4
 800669e:	e79f      	b.n	80065e0 <__multiply+0x78>
 80066a0:	3e01      	subs	r6, #1
 80066a2:	e7a1      	b.n	80065e8 <__multiply+0x80>
 80066a4:	08007246 	.word	0x08007246
 80066a8:	08007257 	.word	0x08007257

080066ac <__pow5mult>:
 80066ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b0:	4615      	mov	r5, r2
 80066b2:	f012 0203 	ands.w	r2, r2, #3
 80066b6:	4607      	mov	r7, r0
 80066b8:	460e      	mov	r6, r1
 80066ba:	d007      	beq.n	80066cc <__pow5mult+0x20>
 80066bc:	4c25      	ldr	r4, [pc, #148]	@ (8006754 <__pow5mult+0xa8>)
 80066be:	3a01      	subs	r2, #1
 80066c0:	2300      	movs	r3, #0
 80066c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066c6:	f7ff fea7 	bl	8006418 <__multadd>
 80066ca:	4606      	mov	r6, r0
 80066cc:	10ad      	asrs	r5, r5, #2
 80066ce:	d03d      	beq.n	800674c <__pow5mult+0xa0>
 80066d0:	69fc      	ldr	r4, [r7, #28]
 80066d2:	b97c      	cbnz	r4, 80066f4 <__pow5mult+0x48>
 80066d4:	2010      	movs	r0, #16
 80066d6:	f7ff fd75 	bl	80061c4 <malloc>
 80066da:	4602      	mov	r2, r0
 80066dc:	61f8      	str	r0, [r7, #28]
 80066de:	b928      	cbnz	r0, 80066ec <__pow5mult+0x40>
 80066e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <__pow5mult+0xac>)
 80066e2:	481e      	ldr	r0, [pc, #120]	@ (800675c <__pow5mult+0xb0>)
 80066e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80066e8:	f7fe feaa 	bl	8005440 <__assert_func>
 80066ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066f0:	6004      	str	r4, [r0, #0]
 80066f2:	60c4      	str	r4, [r0, #12]
 80066f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80066f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066fc:	b94c      	cbnz	r4, 8006712 <__pow5mult+0x66>
 80066fe:	f240 2171 	movw	r1, #625	@ 0x271
 8006702:	4638      	mov	r0, r7
 8006704:	f7ff ff1a 	bl	800653c <__i2b>
 8006708:	2300      	movs	r3, #0
 800670a:	f8c8 0008 	str.w	r0, [r8, #8]
 800670e:	4604      	mov	r4, r0
 8006710:	6003      	str	r3, [r0, #0]
 8006712:	f04f 0900 	mov.w	r9, #0
 8006716:	07eb      	lsls	r3, r5, #31
 8006718:	d50a      	bpl.n	8006730 <__pow5mult+0x84>
 800671a:	4631      	mov	r1, r6
 800671c:	4622      	mov	r2, r4
 800671e:	4638      	mov	r0, r7
 8006720:	f7ff ff22 	bl	8006568 <__multiply>
 8006724:	4631      	mov	r1, r6
 8006726:	4680      	mov	r8, r0
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff fe53 	bl	80063d4 <_Bfree>
 800672e:	4646      	mov	r6, r8
 8006730:	106d      	asrs	r5, r5, #1
 8006732:	d00b      	beq.n	800674c <__pow5mult+0xa0>
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	b938      	cbnz	r0, 8006748 <__pow5mult+0x9c>
 8006738:	4622      	mov	r2, r4
 800673a:	4621      	mov	r1, r4
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff ff13 	bl	8006568 <__multiply>
 8006742:	6020      	str	r0, [r4, #0]
 8006744:	f8c0 9000 	str.w	r9, [r0]
 8006748:	4604      	mov	r4, r0
 800674a:	e7e4      	b.n	8006716 <__pow5mult+0x6a>
 800674c:	4630      	mov	r0, r6
 800674e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006752:	bf00      	nop
 8006754:	080072c4 	.word	0x080072c4
 8006758:	080071d7 	.word	0x080071d7
 800675c:	08007257 	.word	0x08007257

08006760 <__lshift>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	460c      	mov	r4, r1
 8006766:	6849      	ldr	r1, [r1, #4]
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	4607      	mov	r7, r0
 8006772:	4691      	mov	r9, r2
 8006774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006778:	f108 0601 	add.w	r6, r8, #1
 800677c:	42b3      	cmp	r3, r6
 800677e:	db0b      	blt.n	8006798 <__lshift+0x38>
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff fde7 	bl	8006354 <_Balloc>
 8006786:	4605      	mov	r5, r0
 8006788:	b948      	cbnz	r0, 800679e <__lshift+0x3e>
 800678a:	4602      	mov	r2, r0
 800678c:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <__lshift+0xd0>)
 800678e:	4829      	ldr	r0, [pc, #164]	@ (8006834 <__lshift+0xd4>)
 8006790:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006794:	f7fe fe54 	bl	8005440 <__assert_func>
 8006798:	3101      	adds	r1, #1
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	e7ee      	b.n	800677c <__lshift+0x1c>
 800679e:	2300      	movs	r3, #0
 80067a0:	f100 0114 	add.w	r1, r0, #20
 80067a4:	f100 0210 	add.w	r2, r0, #16
 80067a8:	4618      	mov	r0, r3
 80067aa:	4553      	cmp	r3, sl
 80067ac:	db33      	blt.n	8006816 <__lshift+0xb6>
 80067ae:	6920      	ldr	r0, [r4, #16]
 80067b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067b4:	f104 0314 	add.w	r3, r4, #20
 80067b8:	f019 091f 	ands.w	r9, r9, #31
 80067bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067c4:	d02b      	beq.n	800681e <__lshift+0xbe>
 80067c6:	f1c9 0e20 	rsb	lr, r9, #32
 80067ca:	468a      	mov	sl, r1
 80067cc:	2200      	movs	r2, #0
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	fa00 f009 	lsl.w	r0, r0, r9
 80067d4:	4310      	orrs	r0, r2
 80067d6:	f84a 0b04 	str.w	r0, [sl], #4
 80067da:	f853 2b04 	ldr.w	r2, [r3], #4
 80067de:	459c      	cmp	ip, r3
 80067e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80067e4:	d8f3      	bhi.n	80067ce <__lshift+0x6e>
 80067e6:	ebac 0304 	sub.w	r3, ip, r4
 80067ea:	3b15      	subs	r3, #21
 80067ec:	f023 0303 	bic.w	r3, r3, #3
 80067f0:	3304      	adds	r3, #4
 80067f2:	f104 0015 	add.w	r0, r4, #21
 80067f6:	4560      	cmp	r0, ip
 80067f8:	bf88      	it	hi
 80067fa:	2304      	movhi	r3, #4
 80067fc:	50ca      	str	r2, [r1, r3]
 80067fe:	b10a      	cbz	r2, 8006804 <__lshift+0xa4>
 8006800:	f108 0602 	add.w	r6, r8, #2
 8006804:	3e01      	subs	r6, #1
 8006806:	4638      	mov	r0, r7
 8006808:	612e      	str	r6, [r5, #16]
 800680a:	4621      	mov	r1, r4
 800680c:	f7ff fde2 	bl	80063d4 <_Bfree>
 8006810:	4628      	mov	r0, r5
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006816:	f842 0f04 	str.w	r0, [r2, #4]!
 800681a:	3301      	adds	r3, #1
 800681c:	e7c5      	b.n	80067aa <__lshift+0x4a>
 800681e:	3904      	subs	r1, #4
 8006820:	f853 2b04 	ldr.w	r2, [r3], #4
 8006824:	f841 2f04 	str.w	r2, [r1, #4]!
 8006828:	459c      	cmp	ip, r3
 800682a:	d8f9      	bhi.n	8006820 <__lshift+0xc0>
 800682c:	e7ea      	b.n	8006804 <__lshift+0xa4>
 800682e:	bf00      	nop
 8006830:	08007246 	.word	0x08007246
 8006834:	08007257 	.word	0x08007257

08006838 <__mcmp>:
 8006838:	690a      	ldr	r2, [r1, #16]
 800683a:	4603      	mov	r3, r0
 800683c:	6900      	ldr	r0, [r0, #16]
 800683e:	1a80      	subs	r0, r0, r2
 8006840:	b530      	push	{r4, r5, lr}
 8006842:	d10e      	bne.n	8006862 <__mcmp+0x2a>
 8006844:	3314      	adds	r3, #20
 8006846:	3114      	adds	r1, #20
 8006848:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800684c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006858:	4295      	cmp	r5, r2
 800685a:	d003      	beq.n	8006864 <__mcmp+0x2c>
 800685c:	d205      	bcs.n	800686a <__mcmp+0x32>
 800685e:	f04f 30ff 	mov.w	r0, #4294967295
 8006862:	bd30      	pop	{r4, r5, pc}
 8006864:	42a3      	cmp	r3, r4
 8006866:	d3f3      	bcc.n	8006850 <__mcmp+0x18>
 8006868:	e7fb      	b.n	8006862 <__mcmp+0x2a>
 800686a:	2001      	movs	r0, #1
 800686c:	e7f9      	b.n	8006862 <__mcmp+0x2a>
	...

08006870 <__mdiff>:
 8006870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	4689      	mov	r9, r1
 8006876:	4606      	mov	r6, r0
 8006878:	4611      	mov	r1, r2
 800687a:	4648      	mov	r0, r9
 800687c:	4614      	mov	r4, r2
 800687e:	f7ff ffdb 	bl	8006838 <__mcmp>
 8006882:	1e05      	subs	r5, r0, #0
 8006884:	d112      	bne.n	80068ac <__mdiff+0x3c>
 8006886:	4629      	mov	r1, r5
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff fd63 	bl	8006354 <_Balloc>
 800688e:	4602      	mov	r2, r0
 8006890:	b928      	cbnz	r0, 800689e <__mdiff+0x2e>
 8006892:	4b3f      	ldr	r3, [pc, #252]	@ (8006990 <__mdiff+0x120>)
 8006894:	f240 2137 	movw	r1, #567	@ 0x237
 8006898:	483e      	ldr	r0, [pc, #248]	@ (8006994 <__mdiff+0x124>)
 800689a:	f7fe fdd1 	bl	8005440 <__assert_func>
 800689e:	2301      	movs	r3, #1
 80068a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068a4:	4610      	mov	r0, r2
 80068a6:	b003      	add	sp, #12
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	bfbc      	itt	lt
 80068ae:	464b      	movlt	r3, r9
 80068b0:	46a1      	movlt	r9, r4
 80068b2:	4630      	mov	r0, r6
 80068b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80068b8:	bfba      	itte	lt
 80068ba:	461c      	movlt	r4, r3
 80068bc:	2501      	movlt	r5, #1
 80068be:	2500      	movge	r5, #0
 80068c0:	f7ff fd48 	bl	8006354 <_Balloc>
 80068c4:	4602      	mov	r2, r0
 80068c6:	b918      	cbnz	r0, 80068d0 <__mdiff+0x60>
 80068c8:	4b31      	ldr	r3, [pc, #196]	@ (8006990 <__mdiff+0x120>)
 80068ca:	f240 2145 	movw	r1, #581	@ 0x245
 80068ce:	e7e3      	b.n	8006898 <__mdiff+0x28>
 80068d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80068d4:	6926      	ldr	r6, [r4, #16]
 80068d6:	60c5      	str	r5, [r0, #12]
 80068d8:	f109 0310 	add.w	r3, r9, #16
 80068dc:	f109 0514 	add.w	r5, r9, #20
 80068e0:	f104 0e14 	add.w	lr, r4, #20
 80068e4:	f100 0b14 	add.w	fp, r0, #20
 80068e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80068ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	46d9      	mov	r9, fp
 80068f4:	f04f 0c00 	mov.w	ip, #0
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80068fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	fa1f f38a 	uxth.w	r3, sl
 8006908:	4619      	mov	r1, r3
 800690a:	b283      	uxth	r3, r0
 800690c:	1acb      	subs	r3, r1, r3
 800690e:	0c00      	lsrs	r0, r0, #16
 8006910:	4463      	add	r3, ip
 8006912:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006916:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800691a:	b29b      	uxth	r3, r3
 800691c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006920:	4576      	cmp	r6, lr
 8006922:	f849 3b04 	str.w	r3, [r9], #4
 8006926:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800692a:	d8e5      	bhi.n	80068f8 <__mdiff+0x88>
 800692c:	1b33      	subs	r3, r6, r4
 800692e:	3b15      	subs	r3, #21
 8006930:	f023 0303 	bic.w	r3, r3, #3
 8006934:	3415      	adds	r4, #21
 8006936:	3304      	adds	r3, #4
 8006938:	42a6      	cmp	r6, r4
 800693a:	bf38      	it	cc
 800693c:	2304      	movcc	r3, #4
 800693e:	441d      	add	r5, r3
 8006940:	445b      	add	r3, fp
 8006942:	461e      	mov	r6, r3
 8006944:	462c      	mov	r4, r5
 8006946:	4544      	cmp	r4, r8
 8006948:	d30e      	bcc.n	8006968 <__mdiff+0xf8>
 800694a:	f108 0103 	add.w	r1, r8, #3
 800694e:	1b49      	subs	r1, r1, r5
 8006950:	f021 0103 	bic.w	r1, r1, #3
 8006954:	3d03      	subs	r5, #3
 8006956:	45a8      	cmp	r8, r5
 8006958:	bf38      	it	cc
 800695a:	2100      	movcc	r1, #0
 800695c:	440b      	add	r3, r1
 800695e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006962:	b191      	cbz	r1, 800698a <__mdiff+0x11a>
 8006964:	6117      	str	r7, [r2, #16]
 8006966:	e79d      	b.n	80068a4 <__mdiff+0x34>
 8006968:	f854 1b04 	ldr.w	r1, [r4], #4
 800696c:	46e6      	mov	lr, ip
 800696e:	0c08      	lsrs	r0, r1, #16
 8006970:	fa1c fc81 	uxtah	ip, ip, r1
 8006974:	4471      	add	r1, lr
 8006976:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800697a:	b289      	uxth	r1, r1
 800697c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006980:	f846 1b04 	str.w	r1, [r6], #4
 8006984:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006988:	e7dd      	b.n	8006946 <__mdiff+0xd6>
 800698a:	3f01      	subs	r7, #1
 800698c:	e7e7      	b.n	800695e <__mdiff+0xee>
 800698e:	bf00      	nop
 8006990:	08007246 	.word	0x08007246
 8006994:	08007257 	.word	0x08007257

08006998 <__d2b>:
 8006998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800699c:	460f      	mov	r7, r1
 800699e:	2101      	movs	r1, #1
 80069a0:	ec59 8b10 	vmov	r8, r9, d0
 80069a4:	4616      	mov	r6, r2
 80069a6:	f7ff fcd5 	bl	8006354 <_Balloc>
 80069aa:	4604      	mov	r4, r0
 80069ac:	b930      	cbnz	r0, 80069bc <__d2b+0x24>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b23      	ldr	r3, [pc, #140]	@ (8006a40 <__d2b+0xa8>)
 80069b2:	4824      	ldr	r0, [pc, #144]	@ (8006a44 <__d2b+0xac>)
 80069b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80069b8:	f7fe fd42 	bl	8005440 <__assert_func>
 80069bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069c4:	b10d      	cbz	r5, 80069ca <__d2b+0x32>
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	f1b8 0300 	subs.w	r3, r8, #0
 80069d0:	d023      	beq.n	8006a1a <__d2b+0x82>
 80069d2:	4668      	mov	r0, sp
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	f7ff fd84 	bl	80064e2 <__lo0bits>
 80069da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069de:	b1d0      	cbz	r0, 8006a16 <__d2b+0x7e>
 80069e0:	f1c0 0320 	rsb	r3, r0, #32
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	430b      	orrs	r3, r1
 80069ea:	40c2      	lsrs	r2, r0
 80069ec:	6163      	str	r3, [r4, #20]
 80069ee:	9201      	str	r2, [sp, #4]
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	61a3      	str	r3, [r4, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	bf0c      	ite	eq
 80069f8:	2201      	moveq	r2, #1
 80069fa:	2202      	movne	r2, #2
 80069fc:	6122      	str	r2, [r4, #16]
 80069fe:	b1a5      	cbz	r5, 8006a2a <__d2b+0x92>
 8006a00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a04:	4405      	add	r5, r0
 8006a06:	603d      	str	r5, [r7, #0]
 8006a08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a0c:	6030      	str	r0, [r6, #0]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	b003      	add	sp, #12
 8006a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a16:	6161      	str	r1, [r4, #20]
 8006a18:	e7ea      	b.n	80069f0 <__d2b+0x58>
 8006a1a:	a801      	add	r0, sp, #4
 8006a1c:	f7ff fd61 	bl	80064e2 <__lo0bits>
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	6163      	str	r3, [r4, #20]
 8006a24:	3020      	adds	r0, #32
 8006a26:	2201      	movs	r2, #1
 8006a28:	e7e8      	b.n	80069fc <__d2b+0x64>
 8006a2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a32:	6038      	str	r0, [r7, #0]
 8006a34:	6918      	ldr	r0, [r3, #16]
 8006a36:	f7ff fd35 	bl	80064a4 <__hi0bits>
 8006a3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a3e:	e7e5      	b.n	8006a0c <__d2b+0x74>
 8006a40:	08007246 	.word	0x08007246
 8006a44:	08007257 	.word	0x08007257

08006a48 <__ascii_wctomb>:
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	b141      	cbz	r1, 8006a60 <__ascii_wctomb+0x18>
 8006a4e:	2aff      	cmp	r2, #255	@ 0xff
 8006a50:	d904      	bls.n	8006a5c <__ascii_wctomb+0x14>
 8006a52:	228a      	movs	r2, #138	@ 0x8a
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5a:	4770      	bx	lr
 8006a5c:	700a      	strb	r2, [r1, #0]
 8006a5e:	2001      	movs	r0, #1
 8006a60:	4770      	bx	lr

08006a62 <__sfputc_r>:
 8006a62:	6893      	ldr	r3, [r2, #8]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	b410      	push	{r4}
 8006a6a:	6093      	str	r3, [r2, #8]
 8006a6c:	da08      	bge.n	8006a80 <__sfputc_r+0x1e>
 8006a6e:	6994      	ldr	r4, [r2, #24]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	db01      	blt.n	8006a78 <__sfputc_r+0x16>
 8006a74:	290a      	cmp	r1, #10
 8006a76:	d103      	bne.n	8006a80 <__sfputc_r+0x1e>
 8006a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a7c:	f7fe bbbd 	b.w	80051fa <__swbuf_r>
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	1c58      	adds	r0, r3, #1
 8006a84:	6010      	str	r0, [r2, #0]
 8006a86:	7019      	strb	r1, [r3, #0]
 8006a88:	4608      	mov	r0, r1
 8006a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <__sfputs_r>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	4606      	mov	r6, r0
 8006a94:	460f      	mov	r7, r1
 8006a96:	4614      	mov	r4, r2
 8006a98:	18d5      	adds	r5, r2, r3
 8006a9a:	42ac      	cmp	r4, r5
 8006a9c:	d101      	bne.n	8006aa2 <__sfputs_r+0x12>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e007      	b.n	8006ab2 <__sfputs_r+0x22>
 8006aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa6:	463a      	mov	r2, r7
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff ffda 	bl	8006a62 <__sfputc_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d1f3      	bne.n	8006a9a <__sfputs_r+0xa>
 8006ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ab4 <_vfiprintf_r>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	460d      	mov	r5, r1
 8006aba:	b09d      	sub	sp, #116	@ 0x74
 8006abc:	4614      	mov	r4, r2
 8006abe:	4698      	mov	r8, r3
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	b118      	cbz	r0, 8006acc <_vfiprintf_r+0x18>
 8006ac4:	6a03      	ldr	r3, [r0, #32]
 8006ac6:	b90b      	cbnz	r3, 8006acc <_vfiprintf_r+0x18>
 8006ac8:	f7fe faae 	bl	8005028 <__sinit>
 8006acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ace:	07d9      	lsls	r1, r3, #31
 8006ad0:	d405      	bmi.n	8006ade <_vfiprintf_r+0x2a>
 8006ad2:	89ab      	ldrh	r3, [r5, #12]
 8006ad4:	059a      	lsls	r2, r3, #22
 8006ad6:	d402      	bmi.n	8006ade <_vfiprintf_r+0x2a>
 8006ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ada:	f7fe fca0 	bl	800541e <__retarget_lock_acquire_recursive>
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	071b      	lsls	r3, r3, #28
 8006ae2:	d501      	bpl.n	8006ae8 <_vfiprintf_r+0x34>
 8006ae4:	692b      	ldr	r3, [r5, #16]
 8006ae6:	b99b      	cbnz	r3, 8006b10 <_vfiprintf_r+0x5c>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7fe fbc4 	bl	8005278 <__swsetup_r>
 8006af0:	b170      	cbz	r0, 8006b10 <_vfiprintf_r+0x5c>
 8006af2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006af4:	07dc      	lsls	r4, r3, #31
 8006af6:	d504      	bpl.n	8006b02 <_vfiprintf_r+0x4e>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	b01d      	add	sp, #116	@ 0x74
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	0598      	lsls	r0, r3, #22
 8006b06:	d4f7      	bmi.n	8006af8 <_vfiprintf_r+0x44>
 8006b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b0a:	f7fe fc89 	bl	8005420 <__retarget_lock_release_recursive>
 8006b0e:	e7f3      	b.n	8006af8 <_vfiprintf_r+0x44>
 8006b10:	2300      	movs	r3, #0
 8006b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b14:	2320      	movs	r3, #32
 8006b16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b1e:	2330      	movs	r3, #48	@ 0x30
 8006b20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cd0 <_vfiprintf_r+0x21c>
 8006b24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b28:	f04f 0901 	mov.w	r9, #1
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	469a      	mov	sl, r3
 8006b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b34:	b10a      	cbz	r2, 8006b3a <_vfiprintf_r+0x86>
 8006b36:	2a25      	cmp	r2, #37	@ 0x25
 8006b38:	d1f9      	bne.n	8006b2e <_vfiprintf_r+0x7a>
 8006b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b3e:	d00b      	beq.n	8006b58 <_vfiprintf_r+0xa4>
 8006b40:	465b      	mov	r3, fp
 8006b42:	4622      	mov	r2, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	4630      	mov	r0, r6
 8006b48:	f7ff ffa2 	bl	8006a90 <__sfputs_r>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f000 80a7 	beq.w	8006ca0 <_vfiprintf_r+0x1ec>
 8006b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b54:	445a      	add	r2, fp
 8006b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b58:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 809f 	beq.w	8006ca0 <_vfiprintf_r+0x1ec>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295
 8006b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b6c:	f10a 0a01 	add.w	sl, sl, #1
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	9307      	str	r3, [sp, #28]
 8006b74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b78:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b7a:	4654      	mov	r4, sl
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b82:	4853      	ldr	r0, [pc, #332]	@ (8006cd0 <_vfiprintf_r+0x21c>)
 8006b84:	f7f9 fb44 	bl	8000210 <memchr>
 8006b88:	9a04      	ldr	r2, [sp, #16]
 8006b8a:	b9d8      	cbnz	r0, 8006bc4 <_vfiprintf_r+0x110>
 8006b8c:	06d1      	lsls	r1, r2, #27
 8006b8e:	bf44      	itt	mi
 8006b90:	2320      	movmi	r3, #32
 8006b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b96:	0713      	lsls	r3, r2, #28
 8006b98:	bf44      	itt	mi
 8006b9a:	232b      	movmi	r3, #43	@ 0x2b
 8006b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ba6:	d015      	beq.n	8006bd4 <_vfiprintf_r+0x120>
 8006ba8:	9a07      	ldr	r2, [sp, #28]
 8006baa:	4654      	mov	r4, sl
 8006bac:	2000      	movs	r0, #0
 8006bae:	f04f 0c0a 	mov.w	ip, #10
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb8:	3b30      	subs	r3, #48	@ 0x30
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d94b      	bls.n	8006c56 <_vfiprintf_r+0x1a2>
 8006bbe:	b1b0      	cbz	r0, 8006bee <_vfiprintf_r+0x13a>
 8006bc0:	9207      	str	r2, [sp, #28]
 8006bc2:	e014      	b.n	8006bee <_vfiprintf_r+0x13a>
 8006bc4:	eba0 0308 	sub.w	r3, r0, r8
 8006bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	46a2      	mov	sl, r4
 8006bd2:	e7d2      	b.n	8006b7a <_vfiprintf_r+0xc6>
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	1d19      	adds	r1, r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	9103      	str	r1, [sp, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bfbb      	ittet	lt
 8006be0:	425b      	neglt	r3, r3
 8006be2:	f042 0202 	orrlt.w	r2, r2, #2
 8006be6:	9307      	strge	r3, [sp, #28]
 8006be8:	9307      	strlt	r3, [sp, #28]
 8006bea:	bfb8      	it	lt
 8006bec:	9204      	strlt	r2, [sp, #16]
 8006bee:	7823      	ldrb	r3, [r4, #0]
 8006bf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bf2:	d10a      	bne.n	8006c0a <_vfiprintf_r+0x156>
 8006bf4:	7863      	ldrb	r3, [r4, #1]
 8006bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf8:	d132      	bne.n	8006c60 <_vfiprintf_r+0x1ac>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	9203      	str	r2, [sp, #12]
 8006c02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c06:	3402      	adds	r4, #2
 8006c08:	9305      	str	r3, [sp, #20]
 8006c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ce0 <_vfiprintf_r+0x22c>
 8006c0e:	7821      	ldrb	r1, [r4, #0]
 8006c10:	2203      	movs	r2, #3
 8006c12:	4650      	mov	r0, sl
 8006c14:	f7f9 fafc 	bl	8000210 <memchr>
 8006c18:	b138      	cbz	r0, 8006c2a <_vfiprintf_r+0x176>
 8006c1a:	9b04      	ldr	r3, [sp, #16]
 8006c1c:	eba0 000a 	sub.w	r0, r0, sl
 8006c20:	2240      	movs	r2, #64	@ 0x40
 8006c22:	4082      	lsls	r2, r0
 8006c24:	4313      	orrs	r3, r2
 8006c26:	3401      	adds	r4, #1
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2e:	4829      	ldr	r0, [pc, #164]	@ (8006cd4 <_vfiprintf_r+0x220>)
 8006c30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c34:	2206      	movs	r2, #6
 8006c36:	f7f9 faeb 	bl	8000210 <memchr>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d03f      	beq.n	8006cbe <_vfiprintf_r+0x20a>
 8006c3e:	4b26      	ldr	r3, [pc, #152]	@ (8006cd8 <_vfiprintf_r+0x224>)
 8006c40:	bb1b      	cbnz	r3, 8006c8a <_vfiprintf_r+0x1d6>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	3307      	adds	r3, #7
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	9303      	str	r3, [sp, #12]
 8006c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c50:	443b      	add	r3, r7
 8006c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c54:	e76a      	b.n	8006b2c <_vfiprintf_r+0x78>
 8006c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	e7a8      	b.n	8006bb2 <_vfiprintf_r+0xfe>
 8006c60:	2300      	movs	r3, #0
 8006c62:	3401      	adds	r4, #1
 8006c64:	9305      	str	r3, [sp, #20]
 8006c66:	4619      	mov	r1, r3
 8006c68:	f04f 0c0a 	mov.w	ip, #10
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c72:	3a30      	subs	r2, #48	@ 0x30
 8006c74:	2a09      	cmp	r2, #9
 8006c76:	d903      	bls.n	8006c80 <_vfiprintf_r+0x1cc>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0c6      	beq.n	8006c0a <_vfiprintf_r+0x156>
 8006c7c:	9105      	str	r1, [sp, #20]
 8006c7e:	e7c4      	b.n	8006c0a <_vfiprintf_r+0x156>
 8006c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c84:	4604      	mov	r4, r0
 8006c86:	2301      	movs	r3, #1
 8006c88:	e7f0      	b.n	8006c6c <_vfiprintf_r+0x1b8>
 8006c8a:	ab03      	add	r3, sp, #12
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	462a      	mov	r2, r5
 8006c90:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <_vfiprintf_r+0x228>)
 8006c92:	a904      	add	r1, sp, #16
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7fd fd85 	bl	80047a4 <_printf_float>
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	1c78      	adds	r0, r7, #1
 8006c9e:	d1d6      	bne.n	8006c4e <_vfiprintf_r+0x19a>
 8006ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ca2:	07d9      	lsls	r1, r3, #31
 8006ca4:	d405      	bmi.n	8006cb2 <_vfiprintf_r+0x1fe>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	059a      	lsls	r2, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_vfiprintf_r+0x1fe>
 8006cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cae:	f7fe fbb7 	bl	8005420 <__retarget_lock_release_recursive>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	065b      	lsls	r3, r3, #25
 8006cb6:	f53f af1f 	bmi.w	8006af8 <_vfiprintf_r+0x44>
 8006cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cbc:	e71e      	b.n	8006afc <_vfiprintf_r+0x48>
 8006cbe:	ab03      	add	r3, sp, #12
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <_vfiprintf_r+0x228>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7fe f803 	bl	8004cd4 <_printf_i>
 8006cce:	e7e4      	b.n	8006c9a <_vfiprintf_r+0x1e6>
 8006cd0:	080072b0 	.word	0x080072b0
 8006cd4:	080072ba 	.word	0x080072ba
 8006cd8:	080047a5 	.word	0x080047a5
 8006cdc:	08006a91 	.word	0x08006a91
 8006ce0:	080072b6 	.word	0x080072b6

08006ce4 <__sflush_r>:
 8006ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	0716      	lsls	r6, r2, #28
 8006cee:	4605      	mov	r5, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	d454      	bmi.n	8006d9e <__sflush_r+0xba>
 8006cf4:	684b      	ldr	r3, [r1, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dc02      	bgt.n	8006d00 <__sflush_r+0x1c>
 8006cfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dd48      	ble.n	8006d92 <__sflush_r+0xae>
 8006d00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	d045      	beq.n	8006d92 <__sflush_r+0xae>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d0c:	682f      	ldr	r7, [r5, #0]
 8006d0e:	6a21      	ldr	r1, [r4, #32]
 8006d10:	602b      	str	r3, [r5, #0]
 8006d12:	d030      	beq.n	8006d76 <__sflush_r+0x92>
 8006d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	0759      	lsls	r1, r3, #29
 8006d1a:	d505      	bpl.n	8006d28 <__sflush_r+0x44>
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d22:	b10b      	cbz	r3, 8006d28 <__sflush_r+0x44>
 8006d24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	2300      	movs	r3, #0
 8006d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d2c:	6a21      	ldr	r1, [r4, #32]
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b0      	blx	r6
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	d106      	bne.n	8006d46 <__sflush_r+0x62>
 8006d38:	6829      	ldr	r1, [r5, #0]
 8006d3a:	291d      	cmp	r1, #29
 8006d3c:	d82b      	bhi.n	8006d96 <__sflush_r+0xb2>
 8006d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006de8 <__sflush_r+0x104>)
 8006d40:	40ca      	lsrs	r2, r1
 8006d42:	07d6      	lsls	r6, r2, #31
 8006d44:	d527      	bpl.n	8006d96 <__sflush_r+0xb2>
 8006d46:	2200      	movs	r2, #0
 8006d48:	6062      	str	r2, [r4, #4]
 8006d4a:	04d9      	lsls	r1, r3, #19
 8006d4c:	6922      	ldr	r2, [r4, #16]
 8006d4e:	6022      	str	r2, [r4, #0]
 8006d50:	d504      	bpl.n	8006d5c <__sflush_r+0x78>
 8006d52:	1c42      	adds	r2, r0, #1
 8006d54:	d101      	bne.n	8006d5a <__sflush_r+0x76>
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	b903      	cbnz	r3, 8006d5c <__sflush_r+0x78>
 8006d5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d5e:	602f      	str	r7, [r5, #0]
 8006d60:	b1b9      	cbz	r1, 8006d92 <__sflush_r+0xae>
 8006d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d002      	beq.n	8006d70 <__sflush_r+0x8c>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7ff f9e0 	bl	8006130 <_free_r>
 8006d70:	2300      	movs	r3, #0
 8006d72:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d74:	e00d      	b.n	8006d92 <__sflush_r+0xae>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b0      	blx	r6
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	1c50      	adds	r0, r2, #1
 8006d80:	d1c9      	bne.n	8006d16 <__sflush_r+0x32>
 8006d82:	682b      	ldr	r3, [r5, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0c6      	beq.n	8006d16 <__sflush_r+0x32>
 8006d88:	2b1d      	cmp	r3, #29
 8006d8a:	d001      	beq.n	8006d90 <__sflush_r+0xac>
 8006d8c:	2b16      	cmp	r3, #22
 8006d8e:	d11e      	bne.n	8006dce <__sflush_r+0xea>
 8006d90:	602f      	str	r7, [r5, #0]
 8006d92:	2000      	movs	r0, #0
 8006d94:	e022      	b.n	8006ddc <__sflush_r+0xf8>
 8006d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	e01b      	b.n	8006dd6 <__sflush_r+0xf2>
 8006d9e:	690f      	ldr	r7, [r1, #16]
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	d0f6      	beq.n	8006d92 <__sflush_r+0xae>
 8006da4:	0793      	lsls	r3, r2, #30
 8006da6:	680e      	ldr	r6, [r1, #0]
 8006da8:	bf08      	it	eq
 8006daa:	694b      	ldreq	r3, [r1, #20]
 8006dac:	600f      	str	r7, [r1, #0]
 8006dae:	bf18      	it	ne
 8006db0:	2300      	movne	r3, #0
 8006db2:	eba6 0807 	sub.w	r8, r6, r7
 8006db6:	608b      	str	r3, [r1, #8]
 8006db8:	f1b8 0f00 	cmp.w	r8, #0
 8006dbc:	dde9      	ble.n	8006d92 <__sflush_r+0xae>
 8006dbe:	6a21      	ldr	r1, [r4, #32]
 8006dc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006dc2:	4643      	mov	r3, r8
 8006dc4:	463a      	mov	r2, r7
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b0      	blx	r6
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	dc08      	bgt.n	8006de0 <__sflush_r+0xfc>
 8006dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	4407      	add	r7, r0
 8006de2:	eba8 0800 	sub.w	r8, r8, r0
 8006de6:	e7e7      	b.n	8006db8 <__sflush_r+0xd4>
 8006de8:	20400001 	.word	0x20400001

08006dec <_fflush_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	690b      	ldr	r3, [r1, #16]
 8006df0:	4605      	mov	r5, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	b913      	cbnz	r3, 8006dfc <_fflush_r+0x10>
 8006df6:	2500      	movs	r5, #0
 8006df8:	4628      	mov	r0, r5
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	b118      	cbz	r0, 8006e06 <_fflush_r+0x1a>
 8006dfe:	6a03      	ldr	r3, [r0, #32]
 8006e00:	b90b      	cbnz	r3, 8006e06 <_fflush_r+0x1a>
 8006e02:	f7fe f911 	bl	8005028 <__sinit>
 8006e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f3      	beq.n	8006df6 <_fflush_r+0xa>
 8006e0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e10:	07d0      	lsls	r0, r2, #31
 8006e12:	d404      	bmi.n	8006e1e <_fflush_r+0x32>
 8006e14:	0599      	lsls	r1, r3, #22
 8006e16:	d402      	bmi.n	8006e1e <_fflush_r+0x32>
 8006e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e1a:	f7fe fb00 	bl	800541e <__retarget_lock_acquire_recursive>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	4621      	mov	r1, r4
 8006e22:	f7ff ff5f 	bl	8006ce4 <__sflush_r>
 8006e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e28:	07da      	lsls	r2, r3, #31
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	d4e4      	bmi.n	8006df8 <_fflush_r+0xc>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	059b      	lsls	r3, r3, #22
 8006e32:	d4e1      	bmi.n	8006df8 <_fflush_r+0xc>
 8006e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e36:	f7fe faf3 	bl	8005420 <__retarget_lock_release_recursive>
 8006e3a:	e7dd      	b.n	8006df8 <_fflush_r+0xc>

08006e3c <fiprintf>:
 8006e3c:	b40e      	push	{r1, r2, r3}
 8006e3e:	b503      	push	{r0, r1, lr}
 8006e40:	4601      	mov	r1, r0
 8006e42:	ab03      	add	r3, sp, #12
 8006e44:	4805      	ldr	r0, [pc, #20]	@ (8006e5c <fiprintf+0x20>)
 8006e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4a:	6800      	ldr	r0, [r0, #0]
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	f7ff fe31 	bl	8006ab4 <_vfiprintf_r>
 8006e52:	b002      	add	sp, #8
 8006e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e58:	b003      	add	sp, #12
 8006e5a:	4770      	bx	lr
 8006e5c:	20000180 	.word	0x20000180

08006e60 <__swhatbuf_r>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e68:	2900      	cmp	r1, #0
 8006e6a:	b096      	sub	sp, #88	@ 0x58
 8006e6c:	4615      	mov	r5, r2
 8006e6e:	461e      	mov	r6, r3
 8006e70:	da0d      	bge.n	8006e8e <__swhatbuf_r+0x2e>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e78:	f04f 0100 	mov.w	r1, #0
 8006e7c:	bf14      	ite	ne
 8006e7e:	2340      	movne	r3, #64	@ 0x40
 8006e80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e84:	2000      	movs	r0, #0
 8006e86:	6031      	str	r1, [r6, #0]
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	b016      	add	sp, #88	@ 0x58
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	466a      	mov	r2, sp
 8006e90:	f000 f848 	bl	8006f24 <_fstat_r>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	dbec      	blt.n	8006e72 <__swhatbuf_r+0x12>
 8006e98:	9901      	ldr	r1, [sp, #4]
 8006e9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ea2:	4259      	negs	r1, r3
 8006ea4:	4159      	adcs	r1, r3
 8006ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eaa:	e7eb      	b.n	8006e84 <__swhatbuf_r+0x24>

08006eac <__smakebuf_r>:
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb0:	079d      	lsls	r5, r3, #30
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	d507      	bpl.n	8006ec8 <__smakebuf_r+0x1c>
 8006eb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	6163      	str	r3, [r4, #20]
 8006ec4:	b003      	add	sp, #12
 8006ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec8:	ab01      	add	r3, sp, #4
 8006eca:	466a      	mov	r2, sp
 8006ecc:	f7ff ffc8 	bl	8006e60 <__swhatbuf_r>
 8006ed0:	9f00      	ldr	r7, [sp, #0]
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7ff f99e 	bl	8006218 <_malloc_r>
 8006edc:	b948      	cbnz	r0, 8006ef2 <__smakebuf_r+0x46>
 8006ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee2:	059a      	lsls	r2, r3, #22
 8006ee4:	d4ee      	bmi.n	8006ec4 <__smakebuf_r+0x18>
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	f043 0302 	orr.w	r3, r3, #2
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	e7e2      	b.n	8006eb8 <__smakebuf_r+0xc>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	6020      	str	r0, [r4, #0]
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f02:	b15b      	cbz	r3, 8006f1c <__smakebuf_r+0x70>
 8006f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 f81d 	bl	8006f48 <_isatty_r>
 8006f0e:	b128      	cbz	r0, 8006f1c <__smakebuf_r+0x70>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	431d      	orrs	r5, r3
 8006f20:	81a5      	strh	r5, [r4, #12]
 8006f22:	e7cf      	b.n	8006ec4 <__smakebuf_r+0x18>

08006f24 <_fstat_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	@ (8006f44 <_fstat_r+0x20>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	f7fb fc43 	bl	80027bc <_fstat>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d102      	bne.n	8006f40 <_fstat_r+0x1c>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	b103      	cbz	r3, 8006f40 <_fstat_r+0x1c>
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	2000098c 	.word	0x2000098c

08006f48 <_isatty_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d06      	ldr	r5, [pc, #24]	@ (8006f64 <_isatty_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	602b      	str	r3, [r5, #0]
 8006f54:	f7fb fc42 	bl	80027dc <_isatty>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_isatty_r+0x1a>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_isatty_r+0x1a>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	2000098c 	.word	0x2000098c

08006f68 <_sbrk_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d06      	ldr	r5, [pc, #24]	@ (8006f84 <_sbrk_r+0x1c>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	f7fb fc4a 	bl	800280c <_sbrk>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_sbrk_r+0x1a>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_sbrk_r+0x1a>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	2000098c 	.word	0x2000098c

08006f88 <abort>:
 8006f88:	b508      	push	{r3, lr}
 8006f8a:	2006      	movs	r0, #6
 8006f8c:	f000 f840 	bl	8007010 <raise>
 8006f90:	2001      	movs	r0, #1
 8006f92:	f7fb fbdf 	bl	8002754 <_exit>

08006f96 <_calloc_r>:
 8006f96:	b570      	push	{r4, r5, r6, lr}
 8006f98:	fba1 5402 	umull	r5, r4, r1, r2
 8006f9c:	b934      	cbnz	r4, 8006fac <_calloc_r+0x16>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7ff f93a 	bl	8006218 <_malloc_r>
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	b928      	cbnz	r0, 8006fb4 <_calloc_r+0x1e>
 8006fa8:	4630      	mov	r0, r6
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	220c      	movs	r2, #12
 8006fae:	6002      	str	r2, [r0, #0]
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	e7f9      	b.n	8006fa8 <_calloc_r+0x12>
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	f7fe f9b4 	bl	8005324 <memset>
 8006fbc:	e7f4      	b.n	8006fa8 <_calloc_r+0x12>

08006fbe <_raise_r>:
 8006fbe:	291f      	cmp	r1, #31
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	d904      	bls.n	8006fd2 <_raise_r+0x14>
 8006fc8:	2316      	movs	r3, #22
 8006fca:	6003      	str	r3, [r0, #0]
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006fd4:	b112      	cbz	r2, 8006fdc <_raise_r+0x1e>
 8006fd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fda:	b94b      	cbnz	r3, 8006ff0 <_raise_r+0x32>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f000 f831 	bl	8007044 <_getpid_r>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fec:	f000 b818 	b.w	8007020 <_kill_r>
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d00a      	beq.n	800700a <_raise_r+0x4c>
 8006ff4:	1c59      	adds	r1, r3, #1
 8006ff6:	d103      	bne.n	8007000 <_raise_r+0x42>
 8006ff8:	2316      	movs	r3, #22
 8006ffa:	6003      	str	r3, [r0, #0]
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	e7e7      	b.n	8006fd0 <_raise_r+0x12>
 8007000:	2100      	movs	r1, #0
 8007002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007006:	4620      	mov	r0, r4
 8007008:	4798      	blx	r3
 800700a:	2000      	movs	r0, #0
 800700c:	e7e0      	b.n	8006fd0 <_raise_r+0x12>
	...

08007010 <raise>:
 8007010:	4b02      	ldr	r3, [pc, #8]	@ (800701c <raise+0xc>)
 8007012:	4601      	mov	r1, r0
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f7ff bfd2 	b.w	8006fbe <_raise_r>
 800701a:	bf00      	nop
 800701c:	20000180 	.word	0x20000180

08007020 <_kill_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	@ (8007040 <_kill_r+0x20>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f7fb fb81 	bl	8002734 <_kill>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d102      	bne.n	800703c <_kill_r+0x1c>
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	b103      	cbz	r3, 800703c <_kill_r+0x1c>
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	2000098c 	.word	0x2000098c

08007044 <_getpid_r>:
 8007044:	f7fb bb6e 	b.w	8002724 <_getpid>

08007048 <_init>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	bf00      	nop
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr

08007054 <_fini>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	bf00      	nop
 8007058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705a:	bc08      	pop	{r3}
 800705c:	469e      	mov	lr, r3
 800705e:	4770      	bx	lr
